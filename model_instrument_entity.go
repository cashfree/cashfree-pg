/*
Cashfree Payment Gateway APIs

Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

API version: 2022-09-01
Contact: developers@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg

import (
	"encoding/json"
)

// checks if the InstrumentEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstrumentEntity{}

// InstrumentEntity Saved card instrument object
type InstrumentEntity struct {
	// customer_id for which the instrument was saved
	CustomerId *string `json:"customer_id,omitempty"`
	// cf_payment_id of the successful transaction done while saving instrument
	AfaReference *string `json:"afa_reference,omitempty"`
	// saved instrument id
	InstrumentId *string `json:"instrument_id,omitempty"`
	// Type of the saved instrument
	InstrumentType *string `json:"instrument_type,omitempty"`
	// Unique id for the saved instrument
	InstrumentUid *string `json:"instrument_uid,omitempty"`
	// masked card number displayed to the customer
	InstrumentDisplay *string `json:"instrument_display,omitempty"`
	// Status of the saved instrument.
	InstrumentStatus *string `json:"instrument_status,omitempty"`
	// Timestamp at which instrument was saved.
	CreatedAt *string `json:"created_at,omitempty"`
	InstrumentMeta *SavedInstrumentMeta `json:"instrument_meta,omitempty"`
}

// NewInstrumentEntity instantiates a new InstrumentEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstrumentEntity() *InstrumentEntity {
	this := InstrumentEntity{}
	return &this
}

// NewInstrumentEntityWithDefaults instantiates a new InstrumentEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstrumentEntityWithDefaults() *InstrumentEntity {
	this := InstrumentEntity{}
	return &this
}

// GetCustomerId returns the CustomerId field value if set, zero value otherwise.
func (o *InstrumentEntity) GetCustomerId() string {
	if o == nil || IsNil(o.CustomerId) {
		var ret string
		return ret
	}
	return *o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentEntity) GetCustomerIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerId) {
		return nil, false
	}
	return o.CustomerId, true
}

// HasCustomerId returns a boolean if a field has been set.
func (o *InstrumentEntity) HasCustomerId() bool {
	if o != nil && !IsNil(o.CustomerId) {
		return true
	}

	return false
}

// SetCustomerId gets a reference to the given string and assigns it to the CustomerId field.
func (o *InstrumentEntity) SetCustomerId(v string) {
	o.CustomerId = &v
}

// GetAfaReference returns the AfaReference field value if set, zero value otherwise.
func (o *InstrumentEntity) GetAfaReference() string {
	if o == nil || IsNil(o.AfaReference) {
		var ret string
		return ret
	}
	return *o.AfaReference
}

// GetAfaReferenceOk returns a tuple with the AfaReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentEntity) GetAfaReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.AfaReference) {
		return nil, false
	}
	return o.AfaReference, true
}

// HasAfaReference returns a boolean if a field has been set.
func (o *InstrumentEntity) HasAfaReference() bool {
	if o != nil && !IsNil(o.AfaReference) {
		return true
	}

	return false
}

// SetAfaReference gets a reference to the given string and assigns it to the AfaReference field.
func (o *InstrumentEntity) SetAfaReference(v string) {
	o.AfaReference = &v
}

// GetInstrumentId returns the InstrumentId field value if set, zero value otherwise.
func (o *InstrumentEntity) GetInstrumentId() string {
	if o == nil || IsNil(o.InstrumentId) {
		var ret string
		return ret
	}
	return *o.InstrumentId
}

// GetInstrumentIdOk returns a tuple with the InstrumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentEntity) GetInstrumentIdOk() (*string, bool) {
	if o == nil || IsNil(o.InstrumentId) {
		return nil, false
	}
	return o.InstrumentId, true
}

// HasInstrumentId returns a boolean if a field has been set.
func (o *InstrumentEntity) HasInstrumentId() bool {
	if o != nil && !IsNil(o.InstrumentId) {
		return true
	}

	return false
}

// SetInstrumentId gets a reference to the given string and assigns it to the InstrumentId field.
func (o *InstrumentEntity) SetInstrumentId(v string) {
	o.InstrumentId = &v
}

// GetInstrumentType returns the InstrumentType field value if set, zero value otherwise.
func (o *InstrumentEntity) GetInstrumentType() string {
	if o == nil || IsNil(o.InstrumentType) {
		var ret string
		return ret
	}
	return *o.InstrumentType
}

// GetInstrumentTypeOk returns a tuple with the InstrumentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentEntity) GetInstrumentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.InstrumentType) {
		return nil, false
	}
	return o.InstrumentType, true
}

// HasInstrumentType returns a boolean if a field has been set.
func (o *InstrumentEntity) HasInstrumentType() bool {
	if o != nil && !IsNil(o.InstrumentType) {
		return true
	}

	return false
}

// SetInstrumentType gets a reference to the given string and assigns it to the InstrumentType field.
func (o *InstrumentEntity) SetInstrumentType(v string) {
	o.InstrumentType = &v
}

// GetInstrumentUid returns the InstrumentUid field value if set, zero value otherwise.
func (o *InstrumentEntity) GetInstrumentUid() string {
	if o == nil || IsNil(o.InstrumentUid) {
		var ret string
		return ret
	}
	return *o.InstrumentUid
}

// GetInstrumentUidOk returns a tuple with the InstrumentUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentEntity) GetInstrumentUidOk() (*string, bool) {
	if o == nil || IsNil(o.InstrumentUid) {
		return nil, false
	}
	return o.InstrumentUid, true
}

// HasInstrumentUid returns a boolean if a field has been set.
func (o *InstrumentEntity) HasInstrumentUid() bool {
	if o != nil && !IsNil(o.InstrumentUid) {
		return true
	}

	return false
}

// SetInstrumentUid gets a reference to the given string and assigns it to the InstrumentUid field.
func (o *InstrumentEntity) SetInstrumentUid(v string) {
	o.InstrumentUid = &v
}

// GetInstrumentDisplay returns the InstrumentDisplay field value if set, zero value otherwise.
func (o *InstrumentEntity) GetInstrumentDisplay() string {
	if o == nil || IsNil(o.InstrumentDisplay) {
		var ret string
		return ret
	}
	return *o.InstrumentDisplay
}

// GetInstrumentDisplayOk returns a tuple with the InstrumentDisplay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentEntity) GetInstrumentDisplayOk() (*string, bool) {
	if o == nil || IsNil(o.InstrumentDisplay) {
		return nil, false
	}
	return o.InstrumentDisplay, true
}

// HasInstrumentDisplay returns a boolean if a field has been set.
func (o *InstrumentEntity) HasInstrumentDisplay() bool {
	if o != nil && !IsNil(o.InstrumentDisplay) {
		return true
	}

	return false
}

// SetInstrumentDisplay gets a reference to the given string and assigns it to the InstrumentDisplay field.
func (o *InstrumentEntity) SetInstrumentDisplay(v string) {
	o.InstrumentDisplay = &v
}

// GetInstrumentStatus returns the InstrumentStatus field value if set, zero value otherwise.
func (o *InstrumentEntity) GetInstrumentStatus() string {
	if o == nil || IsNil(o.InstrumentStatus) {
		var ret string
		return ret
	}
	return *o.InstrumentStatus
}

// GetInstrumentStatusOk returns a tuple with the InstrumentStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentEntity) GetInstrumentStatusOk() (*string, bool) {
	if o == nil || IsNil(o.InstrumentStatus) {
		return nil, false
	}
	return o.InstrumentStatus, true
}

// HasInstrumentStatus returns a boolean if a field has been set.
func (o *InstrumentEntity) HasInstrumentStatus() bool {
	if o != nil && !IsNil(o.InstrumentStatus) {
		return true
	}

	return false
}

// SetInstrumentStatus gets a reference to the given string and assigns it to the InstrumentStatus field.
func (o *InstrumentEntity) SetInstrumentStatus(v string) {
	o.InstrumentStatus = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *InstrumentEntity) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentEntity) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *InstrumentEntity) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *InstrumentEntity) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetInstrumentMeta returns the InstrumentMeta field value if set, zero value otherwise.
func (o *InstrumentEntity) GetInstrumentMeta() SavedInstrumentMeta {
	if o == nil || IsNil(o.InstrumentMeta) {
		var ret SavedInstrumentMeta
		return ret
	}
	return *o.InstrumentMeta
}

// GetInstrumentMetaOk returns a tuple with the InstrumentMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentEntity) GetInstrumentMetaOk() (*SavedInstrumentMeta, bool) {
	if o == nil || IsNil(o.InstrumentMeta) {
		return nil, false
	}
	return o.InstrumentMeta, true
}

// HasInstrumentMeta returns a boolean if a field has been set.
func (o *InstrumentEntity) HasInstrumentMeta() bool {
	if o != nil && !IsNil(o.InstrumentMeta) {
		return true
	}

	return false
}

// SetInstrumentMeta gets a reference to the given SavedInstrumentMeta and assigns it to the InstrumentMeta field.
func (o *InstrumentEntity) SetInstrumentMeta(v SavedInstrumentMeta) {
	o.InstrumentMeta = &v
}

func (o InstrumentEntity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstrumentEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomerId) {
		toSerialize["customer_id"] = o.CustomerId
	}
	if !IsNil(o.AfaReference) {
		toSerialize["afa_reference"] = o.AfaReference
	}
	if !IsNil(o.InstrumentId) {
		toSerialize["instrument_id"] = o.InstrumentId
	}
	if !IsNil(o.InstrumentType) {
		toSerialize["instrument_type"] = o.InstrumentType
	}
	if !IsNil(o.InstrumentUid) {
		toSerialize["instrument_uid"] = o.InstrumentUid
	}
	if !IsNil(o.InstrumentDisplay) {
		toSerialize["instrument_display"] = o.InstrumentDisplay
	}
	if !IsNil(o.InstrumentStatus) {
		toSerialize["instrument_status"] = o.InstrumentStatus
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.InstrumentMeta) {
		toSerialize["instrument_meta"] = o.InstrumentMeta
	}
	return toSerialize, nil
}

type NullableInstrumentEntity struct {
	value *InstrumentEntity
	isSet bool
}

func (v NullableInstrumentEntity) Get() *InstrumentEntity {
	return v.value
}

func (v *NullableInstrumentEntity) Set(val *InstrumentEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableInstrumentEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableInstrumentEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstrumentEntity(val *InstrumentEntity) *NullableInstrumentEntity {
	return &NullableInstrumentEntity{value: val, isSet: true}
}

func (v NullableInstrumentEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstrumentEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


