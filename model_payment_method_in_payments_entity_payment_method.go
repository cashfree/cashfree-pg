/*
Cashfree Payment Gateway APIs

Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

API version: 2022-09-01
Contact: developers@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg

import (
	"encoding/json"
	"fmt"
)

// PaymentMethodInPaymentsEntityPaymentMethod - struct for PaymentMethodInPaymentsEntityPaymentMethod
type PaymentMethodInPaymentsEntityPaymentMethod struct {
	PaymentMethodAppInPaymentsEntity *PaymentMethodAppInPaymentsEntity
	PaymentMethodCardInPaymentsEntity *PaymentMethodCardInPaymentsEntity
	PaymentMethodCardlessEMIInPaymentsEntity *PaymentMethodCardlessEMIInPaymentsEntity
	PaymentMethodNetBankingInPaymentsEntity *PaymentMethodNetBankingInPaymentsEntity
	PaymentMethodPaylaterInPaymentsEntity *PaymentMethodPaylaterInPaymentsEntity
	PaymentMethodUPIInPaymentsEntity *PaymentMethodUPIInPaymentsEntity
}

// PaymentMethodAppInPaymentsEntityAsPaymentMethodInPaymentsEntityPaymentMethod is a convenience function that returns PaymentMethodAppInPaymentsEntity wrapped in PaymentMethodInPaymentsEntityPaymentMethod
func PaymentMethodAppInPaymentsEntityAsPaymentMethodInPaymentsEntityPaymentMethod(v *PaymentMethodAppInPaymentsEntity) PaymentMethodInPaymentsEntityPaymentMethod {
	return PaymentMethodInPaymentsEntityPaymentMethod{
		PaymentMethodAppInPaymentsEntity: v,
	}
}

// PaymentMethodCardInPaymentsEntityAsPaymentMethodInPaymentsEntityPaymentMethod is a convenience function that returns PaymentMethodCardInPaymentsEntity wrapped in PaymentMethodInPaymentsEntityPaymentMethod
func PaymentMethodCardInPaymentsEntityAsPaymentMethodInPaymentsEntityPaymentMethod(v *PaymentMethodCardInPaymentsEntity) PaymentMethodInPaymentsEntityPaymentMethod {
	return PaymentMethodInPaymentsEntityPaymentMethod{
		PaymentMethodCardInPaymentsEntity: v,
	}
}

// PaymentMethodCardlessEMIInPaymentsEntityAsPaymentMethodInPaymentsEntityPaymentMethod is a convenience function that returns PaymentMethodCardlessEMIInPaymentsEntity wrapped in PaymentMethodInPaymentsEntityPaymentMethod
func PaymentMethodCardlessEMIInPaymentsEntityAsPaymentMethodInPaymentsEntityPaymentMethod(v *PaymentMethodCardlessEMIInPaymentsEntity) PaymentMethodInPaymentsEntityPaymentMethod {
	return PaymentMethodInPaymentsEntityPaymentMethod{
		PaymentMethodCardlessEMIInPaymentsEntity: v,
	}
}

// PaymentMethodNetBankingInPaymentsEntityAsPaymentMethodInPaymentsEntityPaymentMethod is a convenience function that returns PaymentMethodNetBankingInPaymentsEntity wrapped in PaymentMethodInPaymentsEntityPaymentMethod
func PaymentMethodNetBankingInPaymentsEntityAsPaymentMethodInPaymentsEntityPaymentMethod(v *PaymentMethodNetBankingInPaymentsEntity) PaymentMethodInPaymentsEntityPaymentMethod {
	return PaymentMethodInPaymentsEntityPaymentMethod{
		PaymentMethodNetBankingInPaymentsEntity: v,
	}
}

// PaymentMethodPaylaterInPaymentsEntityAsPaymentMethodInPaymentsEntityPaymentMethod is a convenience function that returns PaymentMethodPaylaterInPaymentsEntity wrapped in PaymentMethodInPaymentsEntityPaymentMethod
func PaymentMethodPaylaterInPaymentsEntityAsPaymentMethodInPaymentsEntityPaymentMethod(v *PaymentMethodPaylaterInPaymentsEntity) PaymentMethodInPaymentsEntityPaymentMethod {
	return PaymentMethodInPaymentsEntityPaymentMethod{
		PaymentMethodPaylaterInPaymentsEntity: v,
	}
}

// PaymentMethodUPIInPaymentsEntityAsPaymentMethodInPaymentsEntityPaymentMethod is a convenience function that returns PaymentMethodUPIInPaymentsEntity wrapped in PaymentMethodInPaymentsEntityPaymentMethod
func PaymentMethodUPIInPaymentsEntityAsPaymentMethodInPaymentsEntityPaymentMethod(v *PaymentMethodUPIInPaymentsEntity) PaymentMethodInPaymentsEntityPaymentMethod {
	return PaymentMethodInPaymentsEntityPaymentMethod{
		PaymentMethodUPIInPaymentsEntity: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PaymentMethodInPaymentsEntityPaymentMethod) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'PaymentMethodAppInPaymentsEntity'
	if jsonDict["type"] == "PaymentMethodAppInPaymentsEntity" {
		// try to unmarshal JSON data into PaymentMethodAppInPaymentsEntity
		err = json.Unmarshal(data, &dst.PaymentMethodAppInPaymentsEntity)
		if err == nil {
			return nil // data stored in dst.PaymentMethodAppInPaymentsEntity, return on the first match
		} else {
			dst.PaymentMethodAppInPaymentsEntity = nil
			return fmt.Errorf("failed to unmarshal PaymentMethodInPaymentsEntityPaymentMethod as PaymentMethodAppInPaymentsEntity: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PaymentMethodCardInPaymentsEntity'
	if jsonDict["type"] == "PaymentMethodCardInPaymentsEntity" {
		// try to unmarshal JSON data into PaymentMethodCardInPaymentsEntity
		err = json.Unmarshal(data, &dst.PaymentMethodCardInPaymentsEntity)
		if err == nil {
			return nil // data stored in dst.PaymentMethodCardInPaymentsEntity, return on the first match
		} else {
			dst.PaymentMethodCardInPaymentsEntity = nil
			return fmt.Errorf("failed to unmarshal PaymentMethodInPaymentsEntityPaymentMethod as PaymentMethodCardInPaymentsEntity: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PaymentMethodCardlessEMIInPaymentsEntity'
	if jsonDict["type"] == "PaymentMethodCardlessEMIInPaymentsEntity" {
		// try to unmarshal JSON data into PaymentMethodCardlessEMIInPaymentsEntity
		err = json.Unmarshal(data, &dst.PaymentMethodCardlessEMIInPaymentsEntity)
		if err == nil {
			return nil // data stored in dst.PaymentMethodCardlessEMIInPaymentsEntity, return on the first match
		} else {
			dst.PaymentMethodCardlessEMIInPaymentsEntity = nil
			return fmt.Errorf("failed to unmarshal PaymentMethodInPaymentsEntityPaymentMethod as PaymentMethodCardlessEMIInPaymentsEntity: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PaymentMethodNetBankingInPaymentsEntity'
	if jsonDict["type"] == "PaymentMethodNetBankingInPaymentsEntity" {
		// try to unmarshal JSON data into PaymentMethodNetBankingInPaymentsEntity
		err = json.Unmarshal(data, &dst.PaymentMethodNetBankingInPaymentsEntity)
		if err == nil {
			return nil // data stored in dst.PaymentMethodNetBankingInPaymentsEntity, return on the first match
		} else {
			dst.PaymentMethodNetBankingInPaymentsEntity = nil
			return fmt.Errorf("failed to unmarshal PaymentMethodInPaymentsEntityPaymentMethod as PaymentMethodNetBankingInPaymentsEntity: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PaymentMethodPaylaterInPaymentsEntity'
	if jsonDict["type"] == "PaymentMethodPaylaterInPaymentsEntity" {
		// try to unmarshal JSON data into PaymentMethodPaylaterInPaymentsEntity
		err = json.Unmarshal(data, &dst.PaymentMethodPaylaterInPaymentsEntity)
		if err == nil {
			return nil // data stored in dst.PaymentMethodPaylaterInPaymentsEntity, return on the first match
		} else {
			dst.PaymentMethodPaylaterInPaymentsEntity = nil
			return fmt.Errorf("failed to unmarshal PaymentMethodInPaymentsEntityPaymentMethod as PaymentMethodPaylaterInPaymentsEntity: %s", err.Error())
		}
	}

	// check if the discriminator value is 'PaymentMethodUPIInPaymentsEntity'
	if jsonDict["type"] == "PaymentMethodUPIInPaymentsEntity" {
		// try to unmarshal JSON data into PaymentMethodUPIInPaymentsEntity
		err = json.Unmarshal(data, &dst.PaymentMethodUPIInPaymentsEntity)
		if err == nil {
			return nil // data stored in dst.PaymentMethodUPIInPaymentsEntity, return on the first match
		} else {
			dst.PaymentMethodUPIInPaymentsEntity = nil
			return fmt.Errorf("failed to unmarshal PaymentMethodInPaymentsEntityPaymentMethod as PaymentMethodUPIInPaymentsEntity: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PaymentMethodInPaymentsEntityPaymentMethod) MarshalJSON() ([]byte, error) {
	if src.PaymentMethodAppInPaymentsEntity != nil {
		return json.Marshal(&src.PaymentMethodAppInPaymentsEntity)
	}

	if src.PaymentMethodCardInPaymentsEntity != nil {
		return json.Marshal(&src.PaymentMethodCardInPaymentsEntity)
	}

	if src.PaymentMethodCardlessEMIInPaymentsEntity != nil {
		return json.Marshal(&src.PaymentMethodCardlessEMIInPaymentsEntity)
	}

	if src.PaymentMethodNetBankingInPaymentsEntity != nil {
		return json.Marshal(&src.PaymentMethodNetBankingInPaymentsEntity)
	}

	if src.PaymentMethodPaylaterInPaymentsEntity != nil {
		return json.Marshal(&src.PaymentMethodPaylaterInPaymentsEntity)
	}

	if src.PaymentMethodUPIInPaymentsEntity != nil {
		return json.Marshal(&src.PaymentMethodUPIInPaymentsEntity)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PaymentMethodInPaymentsEntityPaymentMethod) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PaymentMethodAppInPaymentsEntity != nil {
		return obj.PaymentMethodAppInPaymentsEntity
	}

	if obj.PaymentMethodCardInPaymentsEntity != nil {
		return obj.PaymentMethodCardInPaymentsEntity
	}

	if obj.PaymentMethodCardlessEMIInPaymentsEntity != nil {
		return obj.PaymentMethodCardlessEMIInPaymentsEntity
	}

	if obj.PaymentMethodNetBankingInPaymentsEntity != nil {
		return obj.PaymentMethodNetBankingInPaymentsEntity
	}

	if obj.PaymentMethodPaylaterInPaymentsEntity != nil {
		return obj.PaymentMethodPaylaterInPaymentsEntity
	}

	if obj.PaymentMethodUPIInPaymentsEntity != nil {
		return obj.PaymentMethodUPIInPaymentsEntity
	}

	// all schemas are nil
	return nil
}

type NullablePaymentMethodInPaymentsEntityPaymentMethod struct {
	value *PaymentMethodInPaymentsEntityPaymentMethod
	isSet bool
}

func (v NullablePaymentMethodInPaymentsEntityPaymentMethod) Get() *PaymentMethodInPaymentsEntityPaymentMethod {
	return v.value
}

func (v *NullablePaymentMethodInPaymentsEntityPaymentMethod) Set(val *PaymentMethodInPaymentsEntityPaymentMethod) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentMethodInPaymentsEntityPaymentMethod) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentMethodInPaymentsEntityPaymentMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentMethodInPaymentsEntityPaymentMethod(val *PaymentMethodInPaymentsEntityPaymentMethod) *NullablePaymentMethodInPaymentsEntityPaymentMethod {
	return &NullablePaymentMethodInPaymentsEntityPaymentMethod{value: val, isSet: true}
}

func (v NullablePaymentMethodInPaymentsEntityPaymentMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentMethodInPaymentsEntityPaymentMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


