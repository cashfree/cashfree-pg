/*
Cashfree Payment Gateway APIs

Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

API version: 2025-01-01
Contact: developers@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg

import (
	"encoding/json"
	"strings"
	"fmt"
)

// OfferValidationsResponsePaymentMethod - struct for OfferValidationsResponsePaymentMethod
type OfferValidationsResponsePaymentMethod struct {
	OfferAll *OfferAll
	OfferCard *OfferCard
	OfferEMI *OfferEMI
	OfferNB *OfferNB
	OfferPaylater *OfferPaylater
	OfferUPI *OfferUPI
	OfferWallet *OfferWallet
}

// OfferAllAsOfferValidationsResponsePaymentMethod is a convenience function that returns OfferAll wrapped in OfferValidationsResponsePaymentMethod
func OfferAllAsOfferValidationsResponsePaymentMethod(v *OfferAll) OfferValidationsResponsePaymentMethod {
	return OfferValidationsResponsePaymentMethod{
		OfferAll: v,
	}
}

// OfferCardAsOfferValidationsResponsePaymentMethod is a convenience function that returns OfferCard wrapped in OfferValidationsResponsePaymentMethod
func OfferCardAsOfferValidationsResponsePaymentMethod(v *OfferCard) OfferValidationsResponsePaymentMethod {
	return OfferValidationsResponsePaymentMethod{
		OfferCard: v,
	}
}

// OfferEMIAsOfferValidationsResponsePaymentMethod is a convenience function that returns OfferEMI wrapped in OfferValidationsResponsePaymentMethod
func OfferEMIAsOfferValidationsResponsePaymentMethod(v *OfferEMI) OfferValidationsResponsePaymentMethod {
	return OfferValidationsResponsePaymentMethod{
		OfferEMI: v,
	}
}

// OfferNBAsOfferValidationsResponsePaymentMethod is a convenience function that returns OfferNB wrapped in OfferValidationsResponsePaymentMethod
func OfferNBAsOfferValidationsResponsePaymentMethod(v *OfferNB) OfferValidationsResponsePaymentMethod {
	return OfferValidationsResponsePaymentMethod{
		OfferNB: v,
	}
}

// OfferPaylaterAsOfferValidationsResponsePaymentMethod is a convenience function that returns OfferPaylater wrapped in OfferValidationsResponsePaymentMethod
func OfferPaylaterAsOfferValidationsResponsePaymentMethod(v *OfferPaylater) OfferValidationsResponsePaymentMethod {
	return OfferValidationsResponsePaymentMethod{
		OfferPaylater: v,
	}
}

// OfferUPIAsOfferValidationsResponsePaymentMethod is a convenience function that returns OfferUPI wrapped in OfferValidationsResponsePaymentMethod
func OfferUPIAsOfferValidationsResponsePaymentMethod(v *OfferUPI) OfferValidationsResponsePaymentMethod {
	return OfferValidationsResponsePaymentMethod{
		OfferUPI: v,
	}
}

// OfferWalletAsOfferValidationsResponsePaymentMethod is a convenience function that returns OfferWallet wrapped in OfferValidationsResponsePaymentMethod
func OfferWalletAsOfferValidationsResponsePaymentMethod(v *OfferWallet) OfferValidationsResponsePaymentMethod {
	return OfferValidationsResponsePaymentMethod{
		OfferWallet: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *OfferValidationsResponsePaymentMethod) UnmarshalJSON(data []byte) error {
		var err error





	match := 0


	// try to unmarshal data into OfferAll

	err = json.Unmarshal(data, &dst.OfferAll)

	if err == nil {

		jsonOfferAll, _ := json.Marshal(dst.OfferAll)

		if strings.Contains(string(jsonOfferAll), "{}") || strings.Contains(string(jsonOfferAll), "null") { // empty struct

			dst.OfferAll = nil

		} else {

			match++

		}

	} else {

		dst.OfferAll = nil

	}


	// try to unmarshal data into OfferCard

	err = json.Unmarshal(data, &dst.OfferCard)

	if err == nil {

		jsonOfferCard, _ := json.Marshal(dst.OfferCard)

		if strings.Contains(string(jsonOfferCard), "{}") || strings.Contains(string(jsonOfferCard), "null") { // empty struct

			dst.OfferCard = nil

		} else {

			match++

		}

	} else {

		dst.OfferCard = nil

	}


	// try to unmarshal data into OfferEMI

	err = json.Unmarshal(data, &dst.OfferEMI)

	if err == nil {

		jsonOfferEMI, _ := json.Marshal(dst.OfferEMI)

		if strings.Contains(string(jsonOfferEMI), "{}") || strings.Contains(string(jsonOfferEMI), "null") { // empty struct

			dst.OfferEMI = nil

		} else {

			match++

		}

	} else {

		dst.OfferEMI = nil

	}


	// try to unmarshal data into OfferNB

	err = json.Unmarshal(data, &dst.OfferNB)

	if err == nil {

		jsonOfferNB, _ := json.Marshal(dst.OfferNB)

		if strings.Contains(string(jsonOfferNB), "{}") || strings.Contains(string(jsonOfferNB), "null") { // empty struct

			dst.OfferNB = nil

		} else {

			match++

		}

	} else {

		dst.OfferNB = nil

	}


	// try to unmarshal data into OfferPaylater

	err = json.Unmarshal(data, &dst.OfferPaylater)

	if err == nil {

		jsonOfferPaylater, _ := json.Marshal(dst.OfferPaylater)

		if strings.Contains(string(jsonOfferPaylater), "{}") || strings.Contains(string(jsonOfferPaylater), "null") { // empty struct

			dst.OfferPaylater = nil

		} else {

			match++

		}

	} else {

		dst.OfferPaylater = nil

	}


	// try to unmarshal data into OfferUPI

	err = json.Unmarshal(data, &dst.OfferUPI)

	if err == nil {

		jsonOfferUPI, _ := json.Marshal(dst.OfferUPI)

		if strings.Contains(string(jsonOfferUPI), "{}") || strings.Contains(string(jsonOfferUPI), "null") { // empty struct

			dst.OfferUPI = nil

		} else {

			match++

		}

	} else {

		dst.OfferUPI = nil

	}


	// try to unmarshal data into OfferWallet

	err = json.Unmarshal(data, &dst.OfferWallet)

	if err == nil {

		jsonOfferWallet, _ := json.Marshal(dst.OfferWallet)

		if strings.Contains(string(jsonOfferWallet), "{}") || strings.Contains(string(jsonOfferWallet), "null") { // empty struct

			dst.OfferWallet = nil

		} else {

			match++

		}

	} else {

		dst.OfferWallet = nil

	}


	if match > 1 { // more than 1 match

		// reset to nil


		dst.OfferAll = nil


		dst.OfferCard = nil


		dst.OfferEMI = nil


		dst.OfferNB = nil


		dst.OfferPaylater = nil


		dst.OfferUPI = nil


		dst.OfferWallet = nil


		return fmt.Errorf("data matches more than one schema in oneOf(OfferValidationsResponsePaymentMethod)")

	} else if match == 1 {

		return nil // exactly one match

	} else { // no match

		return fmt.Errorf("data failed to match schemas in oneOf(OfferValidationsResponsePaymentMethod)")

	}



}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OfferValidationsResponsePaymentMethod) MarshalJSON() ([]byte, error) {
	if src.OfferAll != nil {
		return json.Marshal(&src.OfferAll)
	}

	if src.OfferCard != nil {
		return json.Marshal(&src.OfferCard)
	}

	if src.OfferEMI != nil {
		return json.Marshal(&src.OfferEMI)
	}

	if src.OfferNB != nil {
		return json.Marshal(&src.OfferNB)
	}

	if src.OfferPaylater != nil {
		return json.Marshal(&src.OfferPaylater)
	}

	if src.OfferUPI != nil {
		return json.Marshal(&src.OfferUPI)
	}

	if src.OfferWallet != nil {
		return json.Marshal(&src.OfferWallet)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OfferValidationsResponsePaymentMethod) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.OfferAll != nil {
		return obj.OfferAll
	}

	if obj.OfferCard != nil {
		return obj.OfferCard
	}

	if obj.OfferEMI != nil {
		return obj.OfferEMI
	}

	if obj.OfferNB != nil {
		return obj.OfferNB
	}

	if obj.OfferPaylater != nil {
		return obj.OfferPaylater
	}

	if obj.OfferUPI != nil {
		return obj.OfferUPI
	}

	if obj.OfferWallet != nil {
		return obj.OfferWallet
	}

	// all schemas are nil
	return nil
}



