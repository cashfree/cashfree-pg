/*
Cashfree Payment Gateway APIs

Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

API version: 2025-01-01
Contact: developers@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg

import (
	"encoding/json"
	"strings"
)

// checks if the SettlementReconEntityDataInnerPaymentDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettlementReconEntityDataInnerPaymentDetails{}

// SettlementReconEntityDataInnerPaymentDetails struct for SettlementReconEntityDataInnerPaymentDetails
type SettlementReconEntityDataInnerPaymentDetails struct {
	// Payment amount captured.
	PaymentAmount *float32 `json:"payment_amount,omitempty"`
	// Payment Curreny type - INR.
	PaymentCurrency *string `json:"payment_currency,omitempty"`
	// Unique transaction reference number of the payment.
	BankReference *string `json:"bank_reference,omitempty"`
	// Date and time when the payment was initiated.
	PaymentTime *string `json:"payment_time,omitempty"`
	// Mode of the payment.
	PaymentMode *string `json:"payment_mode,omitempty"`
	// Service charge applicable for the payment.
	PaymentServiceCharge *float32 `json:"payment_service_charge,omitempty"`
	// Service tax applicable on the payment.
	PaymentServiceTax *float32 `json:"payment_service_tax,omitempty"`
	// Cashfree Payments unique ID to identify a payment.
	CfPaymentId *string `json:"cf_payment_id,omitempty"`
	// Status of the Payment.
	Status *string `json:"status,omitempty"`
	// Forex Conversion Service Charge.
	ForexConversionHandlingCharge *string `json:"forex_conversion_handling_charge,omitempty"`
	// Forex Conversion Service Tax.
	ForexConversionHandlingTax *string `json:"forex_conversion_handling_tax,omitempty"`
	// Forex Charges Curreny type - INR.
	ChargesCurrency *string `json:"charges_currency,omitempty"`
}


func (o SettlementReconEntityDataInnerPaymentDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettlementReconEntityDataInnerPaymentDetails) ToMap() (map[string]interface{}, error) {
	strings.HasPrefix("cf", "cf")
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PaymentAmount) {
		toSerialize["payment_amount"] = o.PaymentAmount
	}
	if !IsNil(o.PaymentCurrency) {
		toSerialize["payment_currency"] = o.PaymentCurrency
	}
	if !IsNil(o.BankReference) {
		toSerialize["bank_reference"] = o.BankReference
	}
	if !IsNil(o.PaymentTime) {
		toSerialize["payment_time"] = o.PaymentTime
	}
	if !IsNil(o.PaymentMode) {
		toSerialize["payment_mode"] = o.PaymentMode
	}
	if !IsNil(o.PaymentServiceCharge) {
		toSerialize["payment_service_charge"] = o.PaymentServiceCharge
	}
	if !IsNil(o.PaymentServiceTax) {
		toSerialize["payment_service_tax"] = o.PaymentServiceTax
	}
	if !IsNil(o.CfPaymentId) {
		toSerialize["cf_payment_id"] = o.CfPaymentId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.ForexConversionHandlingCharge) {
		toSerialize["forex_conversion_handling_charge"] = o.ForexConversionHandlingCharge
	}
	if !IsNil(o.ForexConversionHandlingTax) {
		toSerialize["forex_conversion_handling_tax"] = o.ForexConversionHandlingTax
	}
	if !IsNil(o.ChargesCurrency) {
		toSerialize["charges_currency"] = o.ChargesCurrency
	}
	return toSerialize, nil
}



