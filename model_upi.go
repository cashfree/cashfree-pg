/*
Cashfree Payment Gateway APIs

Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

API version: 2022-09-01
Contact: developers@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg

import (
	"encoding/json"
)

// checks if the Upi type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Upi{}

// Upi UPI collect payment method object
type Upi struct {
	// Specify the channel through which the payment must be processed. Can be one of [\"link\", \"collect\", \"qrcode\"]
	Channel string `json:"channel"`
	// Customer UPI VPA to process payment.  ### Important This is a required parameter for channel = `collect` 
	UpiId *string `json:"upi_id,omitempty"`
	// use this if you want cashfree to show a loader. Sample response below. It is only supported for collect `action:collect` will be returned with `data.url` having the link for redirection 
	UpiRedirectUrl *bool `json:"upi_redirect_url,omitempty"`
	// The UPI request will be valid for this expiry minutes. This parameter is only applicable for a UPI collect payment. The default value is 5 minutes. You should keep the minimum as 5 minutes, and maximum as 15 minutes
	UpiExpiryMinutes *float32 `json:"upi_expiry_minutes,omitempty"`
	// For one time mandate on UPI. Set this as authorize_only = true. Please note that you can only use the \"collect\" channel if you are sending a one time mandate request
	AuthorizeOnly *bool `json:"authorize_only,omitempty"`
	Authorization *UPIAuthorizeDetails `json:"authorization,omitempty"`
}

// NewUpi instantiates a new Upi object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpi(channel string) *Upi {
	this := Upi{}
	this.Channel = channel
	return &this
}

// NewUpiWithDefaults instantiates a new Upi object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpiWithDefaults() *Upi {
	this := Upi{}
	return &this
}

// GetChannel returns the Channel field value
func (o *Upi) GetChannel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Channel
}

// GetChannelOk returns a tuple with the Channel field value
// and a boolean to check if the value has been set.
func (o *Upi) GetChannelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Channel, true
}

// SetChannel sets field value
func (o *Upi) SetChannel(v string) {
	o.Channel = v
}

// GetUpiId returns the UpiId field value if set, zero value otherwise.
func (o *Upi) GetUpiId() string {
	if o == nil || IsNil(o.UpiId) {
		var ret string
		return ret
	}
	return *o.UpiId
}

// GetUpiIdOk returns a tuple with the UpiId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upi) GetUpiIdOk() (*string, bool) {
	if o == nil || IsNil(o.UpiId) {
		return nil, false
	}
	return o.UpiId, true
}

// HasUpiId returns a boolean if a field has been set.
func (o *Upi) HasUpiId() bool {
	if o != nil && !IsNil(o.UpiId) {
		return true
	}

	return false
}

// SetUpiId gets a reference to the given string and assigns it to the UpiId field.
func (o *Upi) SetUpiId(v string) {
	o.UpiId = &v
}

// GetUpiRedirectUrl returns the UpiRedirectUrl field value if set, zero value otherwise.
func (o *Upi) GetUpiRedirectUrl() bool {
	if o == nil || IsNil(o.UpiRedirectUrl) {
		var ret bool
		return ret
	}
	return *o.UpiRedirectUrl
}

// GetUpiRedirectUrlOk returns a tuple with the UpiRedirectUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upi) GetUpiRedirectUrlOk() (*bool, bool) {
	if o == nil || IsNil(o.UpiRedirectUrl) {
		return nil, false
	}
	return o.UpiRedirectUrl, true
}

// HasUpiRedirectUrl returns a boolean if a field has been set.
func (o *Upi) HasUpiRedirectUrl() bool {
	if o != nil && !IsNil(o.UpiRedirectUrl) {
		return true
	}

	return false
}

// SetUpiRedirectUrl gets a reference to the given bool and assigns it to the UpiRedirectUrl field.
func (o *Upi) SetUpiRedirectUrl(v bool) {
	o.UpiRedirectUrl = &v
}

// GetUpiExpiryMinutes returns the UpiExpiryMinutes field value if set, zero value otherwise.
func (o *Upi) GetUpiExpiryMinutes() float32 {
	if o == nil || IsNil(o.UpiExpiryMinutes) {
		var ret float32
		return ret
	}
	return *o.UpiExpiryMinutes
}

// GetUpiExpiryMinutesOk returns a tuple with the UpiExpiryMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upi) GetUpiExpiryMinutesOk() (*float32, bool) {
	if o == nil || IsNil(o.UpiExpiryMinutes) {
		return nil, false
	}
	return o.UpiExpiryMinutes, true
}

// HasUpiExpiryMinutes returns a boolean if a field has been set.
func (o *Upi) HasUpiExpiryMinutes() bool {
	if o != nil && !IsNil(o.UpiExpiryMinutes) {
		return true
	}

	return false
}

// SetUpiExpiryMinutes gets a reference to the given float32 and assigns it to the UpiExpiryMinutes field.
func (o *Upi) SetUpiExpiryMinutes(v float32) {
	o.UpiExpiryMinutes = &v
}

// GetAuthorizeOnly returns the AuthorizeOnly field value if set, zero value otherwise.
func (o *Upi) GetAuthorizeOnly() bool {
	if o == nil || IsNil(o.AuthorizeOnly) {
		var ret bool
		return ret
	}
	return *o.AuthorizeOnly
}

// GetAuthorizeOnlyOk returns a tuple with the AuthorizeOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upi) GetAuthorizeOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.AuthorizeOnly) {
		return nil, false
	}
	return o.AuthorizeOnly, true
}

// HasAuthorizeOnly returns a boolean if a field has been set.
func (o *Upi) HasAuthorizeOnly() bool {
	if o != nil && !IsNil(o.AuthorizeOnly) {
		return true
	}

	return false
}

// SetAuthorizeOnly gets a reference to the given bool and assigns it to the AuthorizeOnly field.
func (o *Upi) SetAuthorizeOnly(v bool) {
	o.AuthorizeOnly = &v
}

// GetAuthorization returns the Authorization field value if set, zero value otherwise.
func (o *Upi) GetAuthorization() UPIAuthorizeDetails {
	if o == nil || IsNil(o.Authorization) {
		var ret UPIAuthorizeDetails
		return ret
	}
	return *o.Authorization
}

// GetAuthorizationOk returns a tuple with the Authorization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upi) GetAuthorizationOk() (*UPIAuthorizeDetails, bool) {
	if o == nil || IsNil(o.Authorization) {
		return nil, false
	}
	return o.Authorization, true
}

// HasAuthorization returns a boolean if a field has been set.
func (o *Upi) HasAuthorization() bool {
	if o != nil && !IsNil(o.Authorization) {
		return true
	}

	return false
}

// SetAuthorization gets a reference to the given UPIAuthorizeDetails and assigns it to the Authorization field.
func (o *Upi) SetAuthorization(v UPIAuthorizeDetails) {
	o.Authorization = &v
}

func (o Upi) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Upi) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["channel"] = o.Channel
	if !IsNil(o.UpiId) {
		toSerialize["upi_id"] = o.UpiId
	}
	if !IsNil(o.UpiRedirectUrl) {
		toSerialize["upi_redirect_url"] = o.UpiRedirectUrl
	}
	if !IsNil(o.UpiExpiryMinutes) {
		toSerialize["upi_expiry_minutes"] = o.UpiExpiryMinutes
	}
	if !IsNil(o.AuthorizeOnly) {
		toSerialize["authorize_only"] = o.AuthorizeOnly
	}
	if !IsNil(o.Authorization) {
		toSerialize["authorization"] = o.Authorization
	}
	return toSerialize, nil
}

type NullableUpi struct {
	value *Upi
	isSet bool
}

func (v NullableUpi) Get() *Upi {
	return v.value
}

func (v *NullableUpi) Set(val *Upi) {
	v.value = val
	v.isSet = true
}

func (v NullableUpi) IsSet() bool {
	return v.isSet
}

func (v *NullableUpi) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpi(val *Upi) *NullableUpi {
	return &NullableUpi{value: val, isSet: true}
}

func (v NullableUpi) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpi) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


