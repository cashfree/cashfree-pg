/*
Cashfree Payment Gateway APIs

Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

API version: 2022-09-01
Contact: developers@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg

import (
	"encoding/json"
)

// checks if the RefundSpeed type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RefundSpeed{}

// RefundSpeed How fast refund has to be proecessed
type RefundSpeed struct {
	// Requested speed of refund.
	Requested *string `json:"requested,omitempty"`
	// Accepted speed of refund.
	Accepted *string `json:"accepted,omitempty"`
	// Processed speed of refund.
	Processed *string `json:"processed,omitempty"`
	// Error message, if any for refund_speed request
	Message *string `json:"message,omitempty"`
}

// NewRefundSpeed instantiates a new RefundSpeed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefundSpeed() *RefundSpeed {
	this := RefundSpeed{}
	return &this
}

// NewRefundSpeedWithDefaults instantiates a new RefundSpeed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefundSpeedWithDefaults() *RefundSpeed {
	this := RefundSpeed{}
	return &this
}

// GetRequested returns the Requested field value if set, zero value otherwise.
func (o *RefundSpeed) GetRequested() string {
	if o == nil || IsNil(o.Requested) {
		var ret string
		return ret
	}
	return *o.Requested
}

// GetRequestedOk returns a tuple with the Requested field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundSpeed) GetRequestedOk() (*string, bool) {
	if o == nil || IsNil(o.Requested) {
		return nil, false
	}
	return o.Requested, true
}

// HasRequested returns a boolean if a field has been set.
func (o *RefundSpeed) HasRequested() bool {
	if o != nil && !IsNil(o.Requested) {
		return true
	}

	return false
}

// SetRequested gets a reference to the given string and assigns it to the Requested field.
func (o *RefundSpeed) SetRequested(v string) {
	o.Requested = &v
}

// GetAccepted returns the Accepted field value if set, zero value otherwise.
func (o *RefundSpeed) GetAccepted() string {
	if o == nil || IsNil(o.Accepted) {
		var ret string
		return ret
	}
	return *o.Accepted
}

// GetAcceptedOk returns a tuple with the Accepted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundSpeed) GetAcceptedOk() (*string, bool) {
	if o == nil || IsNil(o.Accepted) {
		return nil, false
	}
	return o.Accepted, true
}

// HasAccepted returns a boolean if a field has been set.
func (o *RefundSpeed) HasAccepted() bool {
	if o != nil && !IsNil(o.Accepted) {
		return true
	}

	return false
}

// SetAccepted gets a reference to the given string and assigns it to the Accepted field.
func (o *RefundSpeed) SetAccepted(v string) {
	o.Accepted = &v
}

// GetProcessed returns the Processed field value if set, zero value otherwise.
func (o *RefundSpeed) GetProcessed() string {
	if o == nil || IsNil(o.Processed) {
		var ret string
		return ret
	}
	return *o.Processed
}

// GetProcessedOk returns a tuple with the Processed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundSpeed) GetProcessedOk() (*string, bool) {
	if o == nil || IsNil(o.Processed) {
		return nil, false
	}
	return o.Processed, true
}

// HasProcessed returns a boolean if a field has been set.
func (o *RefundSpeed) HasProcessed() bool {
	if o != nil && !IsNil(o.Processed) {
		return true
	}

	return false
}

// SetProcessed gets a reference to the given string and assigns it to the Processed field.
func (o *RefundSpeed) SetProcessed(v string) {
	o.Processed = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *RefundSpeed) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundSpeed) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *RefundSpeed) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *RefundSpeed) SetMessage(v string) {
	o.Message = &v
}

func (o RefundSpeed) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RefundSpeed) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Requested) {
		toSerialize["requested"] = o.Requested
	}
	if !IsNil(o.Accepted) {
		toSerialize["accepted"] = o.Accepted
	}
	if !IsNil(o.Processed) {
		toSerialize["processed"] = o.Processed
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

type NullableRefundSpeed struct {
	value *RefundSpeed
	isSet bool
}

func (v NullableRefundSpeed) Get() *RefundSpeed {
	return v.value
}

func (v *NullableRefundSpeed) Set(val *RefundSpeed) {
	v.value = val
	v.isSet = true
}

func (v NullableRefundSpeed) IsSet() bool {
	return v.isSet
}

func (v *NullableRefundSpeed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefundSpeed(val *RefundSpeed) *NullableRefundSpeed {
	return &NullableRefundSpeed{value: val, isSet: true}
}

func (v NullableRefundSpeed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefundSpeed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


