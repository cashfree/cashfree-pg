/*
Cashfree Payment Gateway APIs

Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

API version: 2022-09-01
Contact: developers@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg

import (
	"encoding/json"
)

// checks if the OfferCard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OfferCard{}

// OfferCard Offers related to cards
type OfferCard struct {
	Card CardOffer `json:"card"`
}

// NewOfferCard instantiates a new OfferCard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOfferCard(card CardOffer) *OfferCard {
	this := OfferCard{}
	this.Card = card
	return &this
}

// NewOfferCardWithDefaults instantiates a new OfferCard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOfferCardWithDefaults() *OfferCard {
	this := OfferCard{}
	return &this
}

// GetCard returns the Card field value
func (o *OfferCard) GetCard() CardOffer {
	if o == nil {
		var ret CardOffer
		return ret
	}

	return o.Card
}

// GetCardOk returns a tuple with the Card field value
// and a boolean to check if the value has been set.
func (o *OfferCard) GetCardOk() (*CardOffer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Card, true
}

// SetCard sets field value
func (o *OfferCard) SetCard(v CardOffer) {
	o.Card = v
}

func (o OfferCard) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OfferCard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["card"] = o.Card
	return toSerialize, nil
}

type NullableOfferCard struct {
	value *OfferCard
	isSet bool
}

func (v NullableOfferCard) Get() *OfferCard {
	return v.value
}

func (v *NullableOfferCard) Set(val *OfferCard) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferCard) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferCard(val *OfferCard) *NullableOfferCard {
	return &NullableOfferCard{value: val, isSet: true}
}

func (v NullableOfferCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


