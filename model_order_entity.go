/*
Cashfree Payment Gateway APIs

Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

API version: 2022-09-01
Contact: developers@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg

import (
	"encoding/json"
	"time"
)

// checks if the OrderEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderEntity{}

// OrderEntity The complete order entity
type OrderEntity struct {
	// unique id generated by cashfree for your order
	CfOrderId *int64 `json:"cf_order_id,omitempty"`
	// order_id sent during the api request
	OrderId *string `json:"order_id,omitempty"`
	// Type of the entity.
	Entity *string `json:"entity,omitempty"`
	// Currency of the order. Example INR
	OrderCurrency *string `json:"order_currency,omitempty"`
	OrderAmount *float32 `json:"order_amount,omitempty"`
	// Possible values are  - `ACTIVE`: Order does not have a sucessful transaction yet - `PAID`: Order is PAID with one successful transaction - `EXPIRED`: Order was not PAID and not it has expired. No transaction can be initiated for an EXPIRED order. 
	OrderStatus *string `json:"order_status,omitempty"`
	PaymentSessionId *string `json:"payment_session_id,omitempty"`
	OrderExpiryTime *time.Time `json:"order_expiry_time,omitempty"`
	// Additional note for order
	OrderNote NullableString `json:"order_note,omitempty"`
	// When the order was created at cashfree's server
	CreatedAt *time.Time `json:"created_at,omitempty"`
	OrderSplits []VendorSplit `json:"order_splits,omitempty"`
	CustomerDetails *CustomerDetails `json:"customer_details,omitempty"`
	OrderMeta *OrderMeta `json:"order_meta,omitempty"`
	Payments *PaymentURLObject `json:"payments,omitempty"`
	Settlements *SettlementURLObject `json:"settlements,omitempty"`
	Refunds *RefundURLObject `json:"refunds,omitempty"`
	// Custom Tags in thr form of {\"key\":\"value\"} which can be passed for an order. A maximum of 10 tags can be added
	OrderTags map[string]string `json:"order_tags,omitempty"`
}

// NewOrderEntity instantiates a new OrderEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderEntity() *OrderEntity {
	this := OrderEntity{}
	return &this
}

// NewOrderEntityWithDefaults instantiates a new OrderEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderEntityWithDefaults() *OrderEntity {
	this := OrderEntity{}
	return &this
}

// GetCfOrderId returns the CfOrderId field value if set, zero value otherwise.
func (o *OrderEntity) GetCfOrderId() int64 {
	if o == nil || IsNil(o.CfOrderId) {
		var ret int64
		return ret
	}
	return *o.CfOrderId
}

// GetCfOrderIdOk returns a tuple with the CfOrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderEntity) GetCfOrderIdOk() (*int64, bool) {
	if o == nil || IsNil(o.CfOrderId) {
		return nil, false
	}
	return o.CfOrderId, true
}

// HasCfOrderId returns a boolean if a field has been set.
func (o *OrderEntity) HasCfOrderId() bool {
	if o != nil && !IsNil(o.CfOrderId) {
		return true
	}

	return false
}

// SetCfOrderId gets a reference to the given int64 and assigns it to the CfOrderId field.
func (o *OrderEntity) SetCfOrderId(v int64) {
	o.CfOrderId = &v
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *OrderEntity) GetOrderId() string {
	if o == nil || IsNil(o.OrderId) {
		var ret string
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderEntity) GetOrderIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrderId) {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *OrderEntity) HasOrderId() bool {
	if o != nil && !IsNil(o.OrderId) {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given string and assigns it to the OrderId field.
func (o *OrderEntity) SetOrderId(v string) {
	o.OrderId = &v
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *OrderEntity) GetEntity() string {
	if o == nil || IsNil(o.Entity) {
		var ret string
		return ret
	}
	return *o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderEntity) GetEntityOk() (*string, bool) {
	if o == nil || IsNil(o.Entity) {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *OrderEntity) HasEntity() bool {
	if o != nil && !IsNil(o.Entity) {
		return true
	}

	return false
}

// SetEntity gets a reference to the given string and assigns it to the Entity field.
func (o *OrderEntity) SetEntity(v string) {
	o.Entity = &v
}

// GetOrderCurrency returns the OrderCurrency field value if set, zero value otherwise.
func (o *OrderEntity) GetOrderCurrency() string {
	if o == nil || IsNil(o.OrderCurrency) {
		var ret string
		return ret
	}
	return *o.OrderCurrency
}

// GetOrderCurrencyOk returns a tuple with the OrderCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderEntity) GetOrderCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.OrderCurrency) {
		return nil, false
	}
	return o.OrderCurrency, true
}

// HasOrderCurrency returns a boolean if a field has been set.
func (o *OrderEntity) HasOrderCurrency() bool {
	if o != nil && !IsNil(o.OrderCurrency) {
		return true
	}

	return false
}

// SetOrderCurrency gets a reference to the given string and assigns it to the OrderCurrency field.
func (o *OrderEntity) SetOrderCurrency(v string) {
	o.OrderCurrency = &v
}

// GetOrderAmount returns the OrderAmount field value if set, zero value otherwise.
func (o *OrderEntity) GetOrderAmount() float32 {
	if o == nil || IsNil(o.OrderAmount) {
		var ret float32
		return ret
	}
	return *o.OrderAmount
}

// GetOrderAmountOk returns a tuple with the OrderAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderEntity) GetOrderAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.OrderAmount) {
		return nil, false
	}
	return o.OrderAmount, true
}

// HasOrderAmount returns a boolean if a field has been set.
func (o *OrderEntity) HasOrderAmount() bool {
	if o != nil && !IsNil(o.OrderAmount) {
		return true
	}

	return false
}

// SetOrderAmount gets a reference to the given float32 and assigns it to the OrderAmount field.
func (o *OrderEntity) SetOrderAmount(v float32) {
	o.OrderAmount = &v
}

// GetOrderStatus returns the OrderStatus field value if set, zero value otherwise.
func (o *OrderEntity) GetOrderStatus() string {
	if o == nil || IsNil(o.OrderStatus) {
		var ret string
		return ret
	}
	return *o.OrderStatus
}

// GetOrderStatusOk returns a tuple with the OrderStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderEntity) GetOrderStatusOk() (*string, bool) {
	if o == nil || IsNil(o.OrderStatus) {
		return nil, false
	}
	return o.OrderStatus, true
}

// HasOrderStatus returns a boolean if a field has been set.
func (o *OrderEntity) HasOrderStatus() bool {
	if o != nil && !IsNil(o.OrderStatus) {
		return true
	}

	return false
}

// SetOrderStatus gets a reference to the given string and assigns it to the OrderStatus field.
func (o *OrderEntity) SetOrderStatus(v string) {
	o.OrderStatus = &v
}

// GetPaymentSessionId returns the PaymentSessionId field value if set, zero value otherwise.
func (o *OrderEntity) GetPaymentSessionId() string {
	if o == nil || IsNil(o.PaymentSessionId) {
		var ret string
		return ret
	}
	return *o.PaymentSessionId
}

// GetPaymentSessionIdOk returns a tuple with the PaymentSessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderEntity) GetPaymentSessionIdOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentSessionId) {
		return nil, false
	}
	return o.PaymentSessionId, true
}

// HasPaymentSessionId returns a boolean if a field has been set.
func (o *OrderEntity) HasPaymentSessionId() bool {
	if o != nil && !IsNil(o.PaymentSessionId) {
		return true
	}

	return false
}

// SetPaymentSessionId gets a reference to the given string and assigns it to the PaymentSessionId field.
func (o *OrderEntity) SetPaymentSessionId(v string) {
	o.PaymentSessionId = &v
}

// GetOrderExpiryTime returns the OrderExpiryTime field value if set, zero value otherwise.
func (o *OrderEntity) GetOrderExpiryTime() time.Time {
	if o == nil || IsNil(o.OrderExpiryTime) {
		var ret time.Time
		return ret
	}
	return *o.OrderExpiryTime
}

// GetOrderExpiryTimeOk returns a tuple with the OrderExpiryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderEntity) GetOrderExpiryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.OrderExpiryTime) {
		return nil, false
	}
	return o.OrderExpiryTime, true
}

// HasOrderExpiryTime returns a boolean if a field has been set.
func (o *OrderEntity) HasOrderExpiryTime() bool {
	if o != nil && !IsNil(o.OrderExpiryTime) {
		return true
	}

	return false
}

// SetOrderExpiryTime gets a reference to the given time.Time and assigns it to the OrderExpiryTime field.
func (o *OrderEntity) SetOrderExpiryTime(v time.Time) {
	o.OrderExpiryTime = &v
}

// GetOrderNote returns the OrderNote field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderEntity) GetOrderNote() string {
	if o == nil || IsNil(o.OrderNote.Get()) {
		var ret string
		return ret
	}
	return *o.OrderNote.Get()
}

// GetOrderNoteOk returns a tuple with the OrderNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderEntity) GetOrderNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrderNote.Get(), o.OrderNote.IsSet()
}

// HasOrderNote returns a boolean if a field has been set.
func (o *OrderEntity) HasOrderNote() bool {
	if o != nil && o.OrderNote.IsSet() {
		return true
	}

	return false
}

// SetOrderNote gets a reference to the given NullableString and assigns it to the OrderNote field.
func (o *OrderEntity) SetOrderNote(v string) {
	o.OrderNote.Set(&v)
}
// SetOrderNoteNil sets the value for OrderNote to be an explicit nil
func (o *OrderEntity) SetOrderNoteNil() {
	o.OrderNote.Set(nil)
}

// UnsetOrderNote ensures that no value is present for OrderNote, not even an explicit nil
func (o *OrderEntity) UnsetOrderNote() {
	o.OrderNote.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *OrderEntity) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderEntity) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *OrderEntity) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *OrderEntity) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetOrderSplits returns the OrderSplits field value if set, zero value otherwise.
func (o *OrderEntity) GetOrderSplits() []VendorSplit {
	if o == nil || IsNil(o.OrderSplits) {
		var ret []VendorSplit
		return ret
	}
	return o.OrderSplits
}

// GetOrderSplitsOk returns a tuple with the OrderSplits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderEntity) GetOrderSplitsOk() ([]VendorSplit, bool) {
	if o == nil || IsNil(o.OrderSplits) {
		return nil, false
	}
	return o.OrderSplits, true
}

// HasOrderSplits returns a boolean if a field has been set.
func (o *OrderEntity) HasOrderSplits() bool {
	if o != nil && !IsNil(o.OrderSplits) {
		return true
	}

	return false
}

// SetOrderSplits gets a reference to the given []VendorSplit and assigns it to the OrderSplits field.
func (o *OrderEntity) SetOrderSplits(v []VendorSplit) {
	o.OrderSplits = v
}

// GetCustomerDetails returns the CustomerDetails field value if set, zero value otherwise.
func (o *OrderEntity) GetCustomerDetails() CustomerDetails {
	if o == nil || IsNil(o.CustomerDetails) {
		var ret CustomerDetails
		return ret
	}
	return *o.CustomerDetails
}

// GetCustomerDetailsOk returns a tuple with the CustomerDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderEntity) GetCustomerDetailsOk() (*CustomerDetails, bool) {
	if o == nil || IsNil(o.CustomerDetails) {
		return nil, false
	}
	return o.CustomerDetails, true
}

// HasCustomerDetails returns a boolean if a field has been set.
func (o *OrderEntity) HasCustomerDetails() bool {
	if o != nil && !IsNil(o.CustomerDetails) {
		return true
	}

	return false
}

// SetCustomerDetails gets a reference to the given CustomerDetails and assigns it to the CustomerDetails field.
func (o *OrderEntity) SetCustomerDetails(v CustomerDetails) {
	o.CustomerDetails = &v
}

// GetOrderMeta returns the OrderMeta field value if set, zero value otherwise.
func (o *OrderEntity) GetOrderMeta() OrderMeta {
	if o == nil || IsNil(o.OrderMeta) {
		var ret OrderMeta
		return ret
	}
	return *o.OrderMeta
}

// GetOrderMetaOk returns a tuple with the OrderMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderEntity) GetOrderMetaOk() (*OrderMeta, bool) {
	if o == nil || IsNil(o.OrderMeta) {
		return nil, false
	}
	return o.OrderMeta, true
}

// HasOrderMeta returns a boolean if a field has been set.
func (o *OrderEntity) HasOrderMeta() bool {
	if o != nil && !IsNil(o.OrderMeta) {
		return true
	}

	return false
}

// SetOrderMeta gets a reference to the given OrderMeta and assigns it to the OrderMeta field.
func (o *OrderEntity) SetOrderMeta(v OrderMeta) {
	o.OrderMeta = &v
}

// GetPayments returns the Payments field value if set, zero value otherwise.
func (o *OrderEntity) GetPayments() PaymentURLObject {
	if o == nil || IsNil(o.Payments) {
		var ret PaymentURLObject
		return ret
	}
	return *o.Payments
}

// GetPaymentsOk returns a tuple with the Payments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderEntity) GetPaymentsOk() (*PaymentURLObject, bool) {
	if o == nil || IsNil(o.Payments) {
		return nil, false
	}
	return o.Payments, true
}

// HasPayments returns a boolean if a field has been set.
func (o *OrderEntity) HasPayments() bool {
	if o != nil && !IsNil(o.Payments) {
		return true
	}

	return false
}

// SetPayments gets a reference to the given PaymentURLObject and assigns it to the Payments field.
func (o *OrderEntity) SetPayments(v PaymentURLObject) {
	o.Payments = &v
}

// GetSettlements returns the Settlements field value if set, zero value otherwise.
func (o *OrderEntity) GetSettlements() SettlementURLObject {
	if o == nil || IsNil(o.Settlements) {
		var ret SettlementURLObject
		return ret
	}
	return *o.Settlements
}

// GetSettlementsOk returns a tuple with the Settlements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderEntity) GetSettlementsOk() (*SettlementURLObject, bool) {
	if o == nil || IsNil(o.Settlements) {
		return nil, false
	}
	return o.Settlements, true
}

// HasSettlements returns a boolean if a field has been set.
func (o *OrderEntity) HasSettlements() bool {
	if o != nil && !IsNil(o.Settlements) {
		return true
	}

	return false
}

// SetSettlements gets a reference to the given SettlementURLObject and assigns it to the Settlements field.
func (o *OrderEntity) SetSettlements(v SettlementURLObject) {
	o.Settlements = &v
}

// GetRefunds returns the Refunds field value if set, zero value otherwise.
func (o *OrderEntity) GetRefunds() RefundURLObject {
	if o == nil || IsNil(o.Refunds) {
		var ret RefundURLObject
		return ret
	}
	return *o.Refunds
}

// GetRefundsOk returns a tuple with the Refunds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderEntity) GetRefundsOk() (*RefundURLObject, bool) {
	if o == nil || IsNil(o.Refunds) {
		return nil, false
	}
	return o.Refunds, true
}

// HasRefunds returns a boolean if a field has been set.
func (o *OrderEntity) HasRefunds() bool {
	if o != nil && !IsNil(o.Refunds) {
		return true
	}

	return false
}

// SetRefunds gets a reference to the given RefundURLObject and assigns it to the Refunds field.
func (o *OrderEntity) SetRefunds(v RefundURLObject) {
	o.Refunds = &v
}

// GetOrderTags returns the OrderTags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderEntity) GetOrderTags() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.OrderTags
}

// GetOrderTagsOk returns a tuple with the OrderTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderEntity) GetOrderTagsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.OrderTags) {
		return nil, false
	}
	return &o.OrderTags, true
}

// HasOrderTags returns a boolean if a field has been set.
func (o *OrderEntity) HasOrderTags() bool {
	if o != nil && IsNil(o.OrderTags) {
		return true
	}

	return false
}

// SetOrderTags gets a reference to the given map[string]string and assigns it to the OrderTags field.
func (o *OrderEntity) SetOrderTags(v map[string]string) {
	o.OrderTags = v
}

func (o OrderEntity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CfOrderId) {
		toSerialize["cf_order_id"] = o.CfOrderId
	}
	if !IsNil(o.OrderId) {
		toSerialize["order_id"] = o.OrderId
	}
	if !IsNil(o.Entity) {
		toSerialize["entity"] = o.Entity
	}
	if !IsNil(o.OrderCurrency) {
		toSerialize["order_currency"] = o.OrderCurrency
	}
	if !IsNil(o.OrderAmount) {
		toSerialize["order_amount"] = o.OrderAmount
	}
	if !IsNil(o.OrderStatus) {
		toSerialize["order_status"] = o.OrderStatus
	}
	if !IsNil(o.PaymentSessionId) {
		toSerialize["payment_session_id"] = o.PaymentSessionId
	}
	if !IsNil(o.OrderExpiryTime) {
		toSerialize["order_expiry_time"] = o.OrderExpiryTime
	}
	if o.OrderNote.IsSet() {
		toSerialize["order_note"] = o.OrderNote.Get()
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.OrderSplits) {
		toSerialize["order_splits"] = o.OrderSplits
	}
	if !IsNil(o.CustomerDetails) {
		toSerialize["customer_details"] = o.CustomerDetails
	}
	if !IsNil(o.OrderMeta) {
		toSerialize["order_meta"] = o.OrderMeta
	}
	if !IsNil(o.Payments) {
		toSerialize["payments"] = o.Payments
	}
	if !IsNil(o.Settlements) {
		toSerialize["settlements"] = o.Settlements
	}
	if !IsNil(o.Refunds) {
		toSerialize["refunds"] = o.Refunds
	}
	if o.OrderTags != nil {
		toSerialize["order_tags"] = o.OrderTags
	}
	return toSerialize, nil
}

type NullableOrderEntity struct {
	value *OrderEntity
	isSet bool
}

func (v NullableOrderEntity) Get() *OrderEntity {
	return v.value
}

func (v *NullableOrderEntity) Set(val *OrderEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderEntity(val *OrderEntity) *NullableOrderEntity {
	return &NullableOrderEntity{value: val, isSet: true}
}

func (v NullableOrderEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


