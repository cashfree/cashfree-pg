/*
Cashfree Payment Gateway APIs

Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

API version: 2025-01-01
Contact: developers@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg

import (
	"encoding/json"
	"strings"
)

// checks if the SettlementReconEntityDataInnerSettlementDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettlementReconEntityDataInnerSettlementDetails{}

// SettlementReconEntityDataInnerSettlementDetails struct for SettlementReconEntityDataInnerSettlementDetails
type SettlementReconEntityDataInnerSettlementDetails struct {
	// Unique ID to identify the settlement.
	CfSettlementId *string `json:"cf_settlement_id,omitempty"`
	// Date and time when the settlement was processed.
	SettlementDate *string `json:"settlement_date,omitempty"`
	// Unique transaction reference number of the settlement.
	Utr *string `json:"utr,omitempty"`
	// Service charge that is applicable for splitting the payment.
	SplitServiceCharge *float32 `json:"split_service_charge,omitempty"`
	// Service tax applicable for splitting the amount to vendors.
	SplitServiceTax *float32 `json:"split_service_tax,omitempty"`
	// Vendor commission applicable for this transaction.
	VendorCommission *float32 `json:"vendor_commission,omitempty"`
	// Date and time from settlement computed.
	PaymentFrom *string `json:"payment_from,omitempty"`
	// Date and time till settlement computed.
	PaymentTill *string `json:"payment_till,omitempty"`
	// If any reason for settlement failure.
	Reason *string `json:"reason,omitempty"`
	// Remarks related for settlement.
	Remarks *string `json:"remarks,omitempty"`
	// Service charge for the transactions.
	ServiceCharge *float32 `json:"service_charge,omitempty"`
	// Service tax for the transactions.
	ServiceTax *float32 `json:"service_tax,omitempty"`
	// Settlement Service Charge.
	SettlementCharge *float32 `json:"settlement_charge,omitempty"`
	// Date and time when Settlement initiated.
	SettlementInitiatedOn *string `json:"settlement_initiated_on,omitempty"`
	// Settlement Service Tax.
	SettlementTax *float32 `json:"settlement_tax,omitempty"`
	// Type of Settlement, Example - Normal Settlement.
	SettlementType *string `json:"settlement_type,omitempty"`
}


func (o SettlementReconEntityDataInnerSettlementDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettlementReconEntityDataInnerSettlementDetails) ToMap() (map[string]interface{}, error) {
	strings.HasPrefix("cf", "cf")
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CfSettlementId) {
		toSerialize["cf_settlement_id"] = o.CfSettlementId
	}
	if !IsNil(o.SettlementDate) {
		toSerialize["settlement_date"] = o.SettlementDate
	}
	if !IsNil(o.Utr) {
		toSerialize["utr"] = o.Utr
	}
	if !IsNil(o.SplitServiceCharge) {
		toSerialize["split_service_charge"] = o.SplitServiceCharge
	}
	if !IsNil(o.SplitServiceTax) {
		toSerialize["split_service_tax"] = o.SplitServiceTax
	}
	if !IsNil(o.VendorCommission) {
		toSerialize["vendor_commission"] = o.VendorCommission
	}
	if !IsNil(o.PaymentFrom) {
		toSerialize["payment_from"] = o.PaymentFrom
	}
	if !IsNil(o.PaymentTill) {
		toSerialize["payment_till"] = o.PaymentTill
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Remarks) {
		toSerialize["remarks"] = o.Remarks
	}
	if !IsNil(o.ServiceCharge) {
		toSerialize["service_charge"] = o.ServiceCharge
	}
	if !IsNil(o.ServiceTax) {
		toSerialize["service_tax"] = o.ServiceTax
	}
	if !IsNil(o.SettlementCharge) {
		toSerialize["settlement_charge"] = o.SettlementCharge
	}
	if !IsNil(o.SettlementInitiatedOn) {
		toSerialize["settlement_initiated_on"] = o.SettlementInitiatedOn
	}
	if !IsNil(o.SettlementTax) {
		toSerialize["settlement_tax"] = o.SettlementTax
	}
	if !IsNil(o.SettlementType) {
		toSerialize["settlement_type"] = o.SettlementType
	}
	return toSerialize, nil
}



