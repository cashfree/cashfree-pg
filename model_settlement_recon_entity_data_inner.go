/*
Cashfree Payment Gateway APIs

Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

API version: 2022-09-01
Contact: developers@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg

import (
	"encoding/json"
)

// checks if the SettlementReconEntityDataInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettlementReconEntityDataInner{}

// SettlementReconEntityDataInner struct for SettlementReconEntityDataInner
type SettlementReconEntityDataInner struct {
	// Unique ID associated with the event.
	EventId *string `json:"event_id,omitempty"`
	// The event type can be PAYMENT, REFUND, REFUND_REVERSAL, DISPUTE, DISPUTE_REVERSAL, CHARGEBACK, CHARGEBACK_REVERSAL, OTHER_ADJUSTMENT.
	EventType *string `json:"event_type,omitempty"`
	// Amount that is part of the settlement corresponding to the event.
	EventSettlementAmount *float32 `json:"event_settlement_amount,omitempty"`
	// Amount corresponding to the event. Example, refund amount, dispute amount, payment amount, etc.
	EventAmount *float32 `json:"event_amount,omitempty"`
	// Indicates if it is CREDIT/DEBIT sale.
	SaleType *string `json:"sale_type,omitempty"`
	// Status of the event. Example - SUCCESS, FAILED, PENDING, CANCELLED.
	EventStatus *string `json:"event_status,omitempty"`
	// Recon
	Entity *string `json:"entity,omitempty"`
	// Time associated with the event. Example, transaction time, dispute initiation time
	EventTime *string `json:"event_time,omitempty"`
	// Curreny type - INR.
	EventCurrency *string `json:"event_currency,omitempty"`
	// Unique order ID. Alphanumeric and only '-' and '_' allowed.
	OrderId *string `json:"order_id,omitempty"`
	// The amount which was passed at the order creation time.
	OrderAmount *float32 `json:"order_amount,omitempty"`
	// Customer phone number.
	CustomerPhone *string `json:"customer_phone,omitempty"`
	// Customer email.
	CustomerEmail *string `json:"customer_email,omitempty"`
	// Customer name.
	CustomerName *string `json:"customer_name,omitempty"`
	// Payment amount captured.
	PaymentAmount *float32 `json:"payment_amount,omitempty"`
	// Unique transaction reference number of the payment.
	PaymentUtr *string `json:"payment_utr,omitempty"`
	// Date and time when the payment was initiated.
	PaymentTime *string `json:"payment_time,omitempty"`
	// Service charge applicable for the payment.
	PaymentServiceCharge *float32 `json:"payment_service_charge,omitempty"`
	// Service tax applicable on the payment.
	PaymentServiceTax *float32 `json:"payment_service_tax,omitempty"`
	// Cashfree Payments unique ID to identify a payment.
	CfPaymentId *int64 `json:"cf_payment_id,omitempty"`
	// Unique ID to identify the settlement.
	CfSettlementId *int32 `json:"cf_settlement_id,omitempty"`
	// Date and time when the settlement was processed.
	SettlementDate *string `json:"settlement_date,omitempty"`
	// Unique transaction reference number of the settlement.
	SettlementUtr *string `json:"settlement_utr,omitempty"`
	// Service charge that is applicable for splitting the payment.
	SplitServiceCharge *float32 `json:"split_service_charge,omitempty"`
	// Service tax applicable for splitting the amount to vendors.
	SplitServiceTax *float32 `json:"split_service_tax,omitempty"`
	// Vendor commission applicable for this transaction.
	VendorCommission *float32 `json:"vendor_commission,omitempty"`
	// Specifies whether the dispute was closed in favor of the merchant or customer. Possible values - Merchant, Customer.
	ClosedInFavorOf *string `json:"closed_in_favor_of,omitempty"`
	// Date and time when the dispute was resolved.
	DisputeResolvedOn *string `json:"dispute_resolved_on,omitempty"`
	// Category of the dispute - Dispute code and the reason for dispute is shown.
	DisputeCategory *string `json:"dispute_category,omitempty"`
	// Note regarding the dispute.
	DisputeNote *string `json:"dispute_note,omitempty"`
	// Date and time when the refund was processed.
	RefundProcessedAt *string `json:"refund_processed_at,omitempty"`
	// The bank reference number for refund.
	RefundArn *string `json:"refund_arn,omitempty"`
	// A refund note for your reference.
	RefundNote *string `json:"refund_note,omitempty"`
	// An unique ID associated with the refund.
	RefundId *string `json:"refund_id,omitempty"`
	// Other adjustment remarks.
	AdjustmentRemarks *string `json:"adjustment_remarks,omitempty"`
}

// NewSettlementReconEntityDataInner instantiates a new SettlementReconEntityDataInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettlementReconEntityDataInner() *SettlementReconEntityDataInner {
	this := SettlementReconEntityDataInner{}
	return &this
}

// NewSettlementReconEntityDataInnerWithDefaults instantiates a new SettlementReconEntityDataInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettlementReconEntityDataInnerWithDefaults() *SettlementReconEntityDataInner {
	this := SettlementReconEntityDataInner{}
	return &this
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetEventId() string {
	if o == nil || IsNil(o.EventId) {
		var ret string
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetEventIdOk() (*string, bool) {
	if o == nil || IsNil(o.EventId) {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasEventId() bool {
	if o != nil && !IsNil(o.EventId) {
		return true
	}

	return false
}

// SetEventId gets a reference to the given string and assigns it to the EventId field.
func (o *SettlementReconEntityDataInner) SetEventId(v string) {
	o.EventId = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *SettlementReconEntityDataInner) SetEventType(v string) {
	o.EventType = &v
}

// GetEventSettlementAmount returns the EventSettlementAmount field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetEventSettlementAmount() float32 {
	if o == nil || IsNil(o.EventSettlementAmount) {
		var ret float32
		return ret
	}
	return *o.EventSettlementAmount
}

// GetEventSettlementAmountOk returns a tuple with the EventSettlementAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetEventSettlementAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.EventSettlementAmount) {
		return nil, false
	}
	return o.EventSettlementAmount, true
}

// HasEventSettlementAmount returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasEventSettlementAmount() bool {
	if o != nil && !IsNil(o.EventSettlementAmount) {
		return true
	}

	return false
}

// SetEventSettlementAmount gets a reference to the given float32 and assigns it to the EventSettlementAmount field.
func (o *SettlementReconEntityDataInner) SetEventSettlementAmount(v float32) {
	o.EventSettlementAmount = &v
}

// GetEventAmount returns the EventAmount field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetEventAmount() float32 {
	if o == nil || IsNil(o.EventAmount) {
		var ret float32
		return ret
	}
	return *o.EventAmount
}

// GetEventAmountOk returns a tuple with the EventAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetEventAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.EventAmount) {
		return nil, false
	}
	return o.EventAmount, true
}

// HasEventAmount returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasEventAmount() bool {
	if o != nil && !IsNil(o.EventAmount) {
		return true
	}

	return false
}

// SetEventAmount gets a reference to the given float32 and assigns it to the EventAmount field.
func (o *SettlementReconEntityDataInner) SetEventAmount(v float32) {
	o.EventAmount = &v
}

// GetSaleType returns the SaleType field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetSaleType() string {
	if o == nil || IsNil(o.SaleType) {
		var ret string
		return ret
	}
	return *o.SaleType
}

// GetSaleTypeOk returns a tuple with the SaleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetSaleTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SaleType) {
		return nil, false
	}
	return o.SaleType, true
}

// HasSaleType returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasSaleType() bool {
	if o != nil && !IsNil(o.SaleType) {
		return true
	}

	return false
}

// SetSaleType gets a reference to the given string and assigns it to the SaleType field.
func (o *SettlementReconEntityDataInner) SetSaleType(v string) {
	o.SaleType = &v
}

// GetEventStatus returns the EventStatus field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetEventStatus() string {
	if o == nil || IsNil(o.EventStatus) {
		var ret string
		return ret
	}
	return *o.EventStatus
}

// GetEventStatusOk returns a tuple with the EventStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetEventStatusOk() (*string, bool) {
	if o == nil || IsNil(o.EventStatus) {
		return nil, false
	}
	return o.EventStatus, true
}

// HasEventStatus returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasEventStatus() bool {
	if o != nil && !IsNil(o.EventStatus) {
		return true
	}

	return false
}

// SetEventStatus gets a reference to the given string and assigns it to the EventStatus field.
func (o *SettlementReconEntityDataInner) SetEventStatus(v string) {
	o.EventStatus = &v
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetEntity() string {
	if o == nil || IsNil(o.Entity) {
		var ret string
		return ret
	}
	return *o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetEntityOk() (*string, bool) {
	if o == nil || IsNil(o.Entity) {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasEntity() bool {
	if o != nil && !IsNil(o.Entity) {
		return true
	}

	return false
}

// SetEntity gets a reference to the given string and assigns it to the Entity field.
func (o *SettlementReconEntityDataInner) SetEntity(v string) {
	o.Entity = &v
}

// GetEventTime returns the EventTime field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetEventTime() string {
	if o == nil || IsNil(o.EventTime) {
		var ret string
		return ret
	}
	return *o.EventTime
}

// GetEventTimeOk returns a tuple with the EventTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetEventTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EventTime) {
		return nil, false
	}
	return o.EventTime, true
}

// HasEventTime returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasEventTime() bool {
	if o != nil && !IsNil(o.EventTime) {
		return true
	}

	return false
}

// SetEventTime gets a reference to the given string and assigns it to the EventTime field.
func (o *SettlementReconEntityDataInner) SetEventTime(v string) {
	o.EventTime = &v
}

// GetEventCurrency returns the EventCurrency field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetEventCurrency() string {
	if o == nil || IsNil(o.EventCurrency) {
		var ret string
		return ret
	}
	return *o.EventCurrency
}

// GetEventCurrencyOk returns a tuple with the EventCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetEventCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.EventCurrency) {
		return nil, false
	}
	return o.EventCurrency, true
}

// HasEventCurrency returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasEventCurrency() bool {
	if o != nil && !IsNil(o.EventCurrency) {
		return true
	}

	return false
}

// SetEventCurrency gets a reference to the given string and assigns it to the EventCurrency field.
func (o *SettlementReconEntityDataInner) SetEventCurrency(v string) {
	o.EventCurrency = &v
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetOrderId() string {
	if o == nil || IsNil(o.OrderId) {
		var ret string
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetOrderIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrderId) {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasOrderId() bool {
	if o != nil && !IsNil(o.OrderId) {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given string and assigns it to the OrderId field.
func (o *SettlementReconEntityDataInner) SetOrderId(v string) {
	o.OrderId = &v
}

// GetOrderAmount returns the OrderAmount field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetOrderAmount() float32 {
	if o == nil || IsNil(o.OrderAmount) {
		var ret float32
		return ret
	}
	return *o.OrderAmount
}

// GetOrderAmountOk returns a tuple with the OrderAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetOrderAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.OrderAmount) {
		return nil, false
	}
	return o.OrderAmount, true
}

// HasOrderAmount returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasOrderAmount() bool {
	if o != nil && !IsNil(o.OrderAmount) {
		return true
	}

	return false
}

// SetOrderAmount gets a reference to the given float32 and assigns it to the OrderAmount field.
func (o *SettlementReconEntityDataInner) SetOrderAmount(v float32) {
	o.OrderAmount = &v
}

// GetCustomerPhone returns the CustomerPhone field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetCustomerPhone() string {
	if o == nil || IsNil(o.CustomerPhone) {
		var ret string
		return ret
	}
	return *o.CustomerPhone
}

// GetCustomerPhoneOk returns a tuple with the CustomerPhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetCustomerPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerPhone) {
		return nil, false
	}
	return o.CustomerPhone, true
}

// HasCustomerPhone returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasCustomerPhone() bool {
	if o != nil && !IsNil(o.CustomerPhone) {
		return true
	}

	return false
}

// SetCustomerPhone gets a reference to the given string and assigns it to the CustomerPhone field.
func (o *SettlementReconEntityDataInner) SetCustomerPhone(v string) {
	o.CustomerPhone = &v
}

// GetCustomerEmail returns the CustomerEmail field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetCustomerEmail() string {
	if o == nil || IsNil(o.CustomerEmail) {
		var ret string
		return ret
	}
	return *o.CustomerEmail
}

// GetCustomerEmailOk returns a tuple with the CustomerEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetCustomerEmailOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerEmail) {
		return nil, false
	}
	return o.CustomerEmail, true
}

// HasCustomerEmail returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasCustomerEmail() bool {
	if o != nil && !IsNil(o.CustomerEmail) {
		return true
	}

	return false
}

// SetCustomerEmail gets a reference to the given string and assigns it to the CustomerEmail field.
func (o *SettlementReconEntityDataInner) SetCustomerEmail(v string) {
	o.CustomerEmail = &v
}

// GetCustomerName returns the CustomerName field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetCustomerName() string {
	if o == nil || IsNil(o.CustomerName) {
		var ret string
		return ret
	}
	return *o.CustomerName
}

// GetCustomerNameOk returns a tuple with the CustomerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetCustomerNameOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerName) {
		return nil, false
	}
	return o.CustomerName, true
}

// HasCustomerName returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasCustomerName() bool {
	if o != nil && !IsNil(o.CustomerName) {
		return true
	}

	return false
}

// SetCustomerName gets a reference to the given string and assigns it to the CustomerName field.
func (o *SettlementReconEntityDataInner) SetCustomerName(v string) {
	o.CustomerName = &v
}

// GetPaymentAmount returns the PaymentAmount field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetPaymentAmount() float32 {
	if o == nil || IsNil(o.PaymentAmount) {
		var ret float32
		return ret
	}
	return *o.PaymentAmount
}

// GetPaymentAmountOk returns a tuple with the PaymentAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetPaymentAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.PaymentAmount) {
		return nil, false
	}
	return o.PaymentAmount, true
}

// HasPaymentAmount returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasPaymentAmount() bool {
	if o != nil && !IsNil(o.PaymentAmount) {
		return true
	}

	return false
}

// SetPaymentAmount gets a reference to the given float32 and assigns it to the PaymentAmount field.
func (o *SettlementReconEntityDataInner) SetPaymentAmount(v float32) {
	o.PaymentAmount = &v
}

// GetPaymentUtr returns the PaymentUtr field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetPaymentUtr() string {
	if o == nil || IsNil(o.PaymentUtr) {
		var ret string
		return ret
	}
	return *o.PaymentUtr
}

// GetPaymentUtrOk returns a tuple with the PaymentUtr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetPaymentUtrOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentUtr) {
		return nil, false
	}
	return o.PaymentUtr, true
}

// HasPaymentUtr returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasPaymentUtr() bool {
	if o != nil && !IsNil(o.PaymentUtr) {
		return true
	}

	return false
}

// SetPaymentUtr gets a reference to the given string and assigns it to the PaymentUtr field.
func (o *SettlementReconEntityDataInner) SetPaymentUtr(v string) {
	o.PaymentUtr = &v
}

// GetPaymentTime returns the PaymentTime field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetPaymentTime() string {
	if o == nil || IsNil(o.PaymentTime) {
		var ret string
		return ret
	}
	return *o.PaymentTime
}

// GetPaymentTimeOk returns a tuple with the PaymentTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetPaymentTimeOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentTime) {
		return nil, false
	}
	return o.PaymentTime, true
}

// HasPaymentTime returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasPaymentTime() bool {
	if o != nil && !IsNil(o.PaymentTime) {
		return true
	}

	return false
}

// SetPaymentTime gets a reference to the given string and assigns it to the PaymentTime field.
func (o *SettlementReconEntityDataInner) SetPaymentTime(v string) {
	o.PaymentTime = &v
}

// GetPaymentServiceCharge returns the PaymentServiceCharge field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetPaymentServiceCharge() float32 {
	if o == nil || IsNil(o.PaymentServiceCharge) {
		var ret float32
		return ret
	}
	return *o.PaymentServiceCharge
}

// GetPaymentServiceChargeOk returns a tuple with the PaymentServiceCharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetPaymentServiceChargeOk() (*float32, bool) {
	if o == nil || IsNil(o.PaymentServiceCharge) {
		return nil, false
	}
	return o.PaymentServiceCharge, true
}

// HasPaymentServiceCharge returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasPaymentServiceCharge() bool {
	if o != nil && !IsNil(o.PaymentServiceCharge) {
		return true
	}

	return false
}

// SetPaymentServiceCharge gets a reference to the given float32 and assigns it to the PaymentServiceCharge field.
func (o *SettlementReconEntityDataInner) SetPaymentServiceCharge(v float32) {
	o.PaymentServiceCharge = &v
}

// GetPaymentServiceTax returns the PaymentServiceTax field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetPaymentServiceTax() float32 {
	if o == nil || IsNil(o.PaymentServiceTax) {
		var ret float32
		return ret
	}
	return *o.PaymentServiceTax
}

// GetPaymentServiceTaxOk returns a tuple with the PaymentServiceTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetPaymentServiceTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.PaymentServiceTax) {
		return nil, false
	}
	return o.PaymentServiceTax, true
}

// HasPaymentServiceTax returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasPaymentServiceTax() bool {
	if o != nil && !IsNil(o.PaymentServiceTax) {
		return true
	}

	return false
}

// SetPaymentServiceTax gets a reference to the given float32 and assigns it to the PaymentServiceTax field.
func (o *SettlementReconEntityDataInner) SetPaymentServiceTax(v float32) {
	o.PaymentServiceTax = &v
}

// GetCfPaymentId returns the CfPaymentId field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetCfPaymentId() int64 {
	if o == nil || IsNil(o.CfPaymentId) {
		var ret int64
		return ret
	}
	return *o.CfPaymentId
}

// GetCfPaymentIdOk returns a tuple with the CfPaymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetCfPaymentIdOk() (*int64, bool) {
	if o == nil || IsNil(o.CfPaymentId) {
		return nil, false
	}
	return o.CfPaymentId, true
}

// HasCfPaymentId returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasCfPaymentId() bool {
	if o != nil && !IsNil(o.CfPaymentId) {
		return true
	}

	return false
}

// SetCfPaymentId gets a reference to the given int64 and assigns it to the CfPaymentId field.
func (o *SettlementReconEntityDataInner) SetCfPaymentId(v int64) {
	o.CfPaymentId = &v
}

// GetCfSettlementId returns the CfSettlementId field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetCfSettlementId() int32 {
	if o == nil || IsNil(o.CfSettlementId) {
		var ret int32
		return ret
	}
	return *o.CfSettlementId
}

// GetCfSettlementIdOk returns a tuple with the CfSettlementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetCfSettlementIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CfSettlementId) {
		return nil, false
	}
	return o.CfSettlementId, true
}

// HasCfSettlementId returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasCfSettlementId() bool {
	if o != nil && !IsNil(o.CfSettlementId) {
		return true
	}

	return false
}

// SetCfSettlementId gets a reference to the given int32 and assigns it to the CfSettlementId field.
func (o *SettlementReconEntityDataInner) SetCfSettlementId(v int32) {
	o.CfSettlementId = &v
}

// GetSettlementDate returns the SettlementDate field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetSettlementDate() string {
	if o == nil || IsNil(o.SettlementDate) {
		var ret string
		return ret
	}
	return *o.SettlementDate
}

// GetSettlementDateOk returns a tuple with the SettlementDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetSettlementDateOk() (*string, bool) {
	if o == nil || IsNil(o.SettlementDate) {
		return nil, false
	}
	return o.SettlementDate, true
}

// HasSettlementDate returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasSettlementDate() bool {
	if o != nil && !IsNil(o.SettlementDate) {
		return true
	}

	return false
}

// SetSettlementDate gets a reference to the given string and assigns it to the SettlementDate field.
func (o *SettlementReconEntityDataInner) SetSettlementDate(v string) {
	o.SettlementDate = &v
}

// GetSettlementUtr returns the SettlementUtr field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetSettlementUtr() string {
	if o == nil || IsNil(o.SettlementUtr) {
		var ret string
		return ret
	}
	return *o.SettlementUtr
}

// GetSettlementUtrOk returns a tuple with the SettlementUtr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetSettlementUtrOk() (*string, bool) {
	if o == nil || IsNil(o.SettlementUtr) {
		return nil, false
	}
	return o.SettlementUtr, true
}

// HasSettlementUtr returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasSettlementUtr() bool {
	if o != nil && !IsNil(o.SettlementUtr) {
		return true
	}

	return false
}

// SetSettlementUtr gets a reference to the given string and assigns it to the SettlementUtr field.
func (o *SettlementReconEntityDataInner) SetSettlementUtr(v string) {
	o.SettlementUtr = &v
}

// GetSplitServiceCharge returns the SplitServiceCharge field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetSplitServiceCharge() float32 {
	if o == nil || IsNil(o.SplitServiceCharge) {
		var ret float32
		return ret
	}
	return *o.SplitServiceCharge
}

// GetSplitServiceChargeOk returns a tuple with the SplitServiceCharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetSplitServiceChargeOk() (*float32, bool) {
	if o == nil || IsNil(o.SplitServiceCharge) {
		return nil, false
	}
	return o.SplitServiceCharge, true
}

// HasSplitServiceCharge returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasSplitServiceCharge() bool {
	if o != nil && !IsNil(o.SplitServiceCharge) {
		return true
	}

	return false
}

// SetSplitServiceCharge gets a reference to the given float32 and assigns it to the SplitServiceCharge field.
func (o *SettlementReconEntityDataInner) SetSplitServiceCharge(v float32) {
	o.SplitServiceCharge = &v
}

// GetSplitServiceTax returns the SplitServiceTax field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetSplitServiceTax() float32 {
	if o == nil || IsNil(o.SplitServiceTax) {
		var ret float32
		return ret
	}
	return *o.SplitServiceTax
}

// GetSplitServiceTaxOk returns a tuple with the SplitServiceTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetSplitServiceTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.SplitServiceTax) {
		return nil, false
	}
	return o.SplitServiceTax, true
}

// HasSplitServiceTax returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasSplitServiceTax() bool {
	if o != nil && !IsNil(o.SplitServiceTax) {
		return true
	}

	return false
}

// SetSplitServiceTax gets a reference to the given float32 and assigns it to the SplitServiceTax field.
func (o *SettlementReconEntityDataInner) SetSplitServiceTax(v float32) {
	o.SplitServiceTax = &v
}

// GetVendorCommission returns the VendorCommission field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetVendorCommission() float32 {
	if o == nil || IsNil(o.VendorCommission) {
		var ret float32
		return ret
	}
	return *o.VendorCommission
}

// GetVendorCommissionOk returns a tuple with the VendorCommission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetVendorCommissionOk() (*float32, bool) {
	if o == nil || IsNil(o.VendorCommission) {
		return nil, false
	}
	return o.VendorCommission, true
}

// HasVendorCommission returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasVendorCommission() bool {
	if o != nil && !IsNil(o.VendorCommission) {
		return true
	}

	return false
}

// SetVendorCommission gets a reference to the given float32 and assigns it to the VendorCommission field.
func (o *SettlementReconEntityDataInner) SetVendorCommission(v float32) {
	o.VendorCommission = &v
}

// GetClosedInFavorOf returns the ClosedInFavorOf field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetClosedInFavorOf() string {
	if o == nil || IsNil(o.ClosedInFavorOf) {
		var ret string
		return ret
	}
	return *o.ClosedInFavorOf
}

// GetClosedInFavorOfOk returns a tuple with the ClosedInFavorOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetClosedInFavorOfOk() (*string, bool) {
	if o == nil || IsNil(o.ClosedInFavorOf) {
		return nil, false
	}
	return o.ClosedInFavorOf, true
}

// HasClosedInFavorOf returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasClosedInFavorOf() bool {
	if o != nil && !IsNil(o.ClosedInFavorOf) {
		return true
	}

	return false
}

// SetClosedInFavorOf gets a reference to the given string and assigns it to the ClosedInFavorOf field.
func (o *SettlementReconEntityDataInner) SetClosedInFavorOf(v string) {
	o.ClosedInFavorOf = &v
}

// GetDisputeResolvedOn returns the DisputeResolvedOn field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetDisputeResolvedOn() string {
	if o == nil || IsNil(o.DisputeResolvedOn) {
		var ret string
		return ret
	}
	return *o.DisputeResolvedOn
}

// GetDisputeResolvedOnOk returns a tuple with the DisputeResolvedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetDisputeResolvedOnOk() (*string, bool) {
	if o == nil || IsNil(o.DisputeResolvedOn) {
		return nil, false
	}
	return o.DisputeResolvedOn, true
}

// HasDisputeResolvedOn returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasDisputeResolvedOn() bool {
	if o != nil && !IsNil(o.DisputeResolvedOn) {
		return true
	}

	return false
}

// SetDisputeResolvedOn gets a reference to the given string and assigns it to the DisputeResolvedOn field.
func (o *SettlementReconEntityDataInner) SetDisputeResolvedOn(v string) {
	o.DisputeResolvedOn = &v
}

// GetDisputeCategory returns the DisputeCategory field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetDisputeCategory() string {
	if o == nil || IsNil(o.DisputeCategory) {
		var ret string
		return ret
	}
	return *o.DisputeCategory
}

// GetDisputeCategoryOk returns a tuple with the DisputeCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetDisputeCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.DisputeCategory) {
		return nil, false
	}
	return o.DisputeCategory, true
}

// HasDisputeCategory returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasDisputeCategory() bool {
	if o != nil && !IsNil(o.DisputeCategory) {
		return true
	}

	return false
}

// SetDisputeCategory gets a reference to the given string and assigns it to the DisputeCategory field.
func (o *SettlementReconEntityDataInner) SetDisputeCategory(v string) {
	o.DisputeCategory = &v
}

// GetDisputeNote returns the DisputeNote field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetDisputeNote() string {
	if o == nil || IsNil(o.DisputeNote) {
		var ret string
		return ret
	}
	return *o.DisputeNote
}

// GetDisputeNoteOk returns a tuple with the DisputeNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetDisputeNoteOk() (*string, bool) {
	if o == nil || IsNil(o.DisputeNote) {
		return nil, false
	}
	return o.DisputeNote, true
}

// HasDisputeNote returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasDisputeNote() bool {
	if o != nil && !IsNil(o.DisputeNote) {
		return true
	}

	return false
}

// SetDisputeNote gets a reference to the given string and assigns it to the DisputeNote field.
func (o *SettlementReconEntityDataInner) SetDisputeNote(v string) {
	o.DisputeNote = &v
}

// GetRefundProcessedAt returns the RefundProcessedAt field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetRefundProcessedAt() string {
	if o == nil || IsNil(o.RefundProcessedAt) {
		var ret string
		return ret
	}
	return *o.RefundProcessedAt
}

// GetRefundProcessedAtOk returns a tuple with the RefundProcessedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetRefundProcessedAtOk() (*string, bool) {
	if o == nil || IsNil(o.RefundProcessedAt) {
		return nil, false
	}
	return o.RefundProcessedAt, true
}

// HasRefundProcessedAt returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasRefundProcessedAt() bool {
	if o != nil && !IsNil(o.RefundProcessedAt) {
		return true
	}

	return false
}

// SetRefundProcessedAt gets a reference to the given string and assigns it to the RefundProcessedAt field.
func (o *SettlementReconEntityDataInner) SetRefundProcessedAt(v string) {
	o.RefundProcessedAt = &v
}

// GetRefundArn returns the RefundArn field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetRefundArn() string {
	if o == nil || IsNil(o.RefundArn) {
		var ret string
		return ret
	}
	return *o.RefundArn
}

// GetRefundArnOk returns a tuple with the RefundArn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetRefundArnOk() (*string, bool) {
	if o == nil || IsNil(o.RefundArn) {
		return nil, false
	}
	return o.RefundArn, true
}

// HasRefundArn returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasRefundArn() bool {
	if o != nil && !IsNil(o.RefundArn) {
		return true
	}

	return false
}

// SetRefundArn gets a reference to the given string and assigns it to the RefundArn field.
func (o *SettlementReconEntityDataInner) SetRefundArn(v string) {
	o.RefundArn = &v
}

// GetRefundNote returns the RefundNote field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetRefundNote() string {
	if o == nil || IsNil(o.RefundNote) {
		var ret string
		return ret
	}
	return *o.RefundNote
}

// GetRefundNoteOk returns a tuple with the RefundNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetRefundNoteOk() (*string, bool) {
	if o == nil || IsNil(o.RefundNote) {
		return nil, false
	}
	return o.RefundNote, true
}

// HasRefundNote returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasRefundNote() bool {
	if o != nil && !IsNil(o.RefundNote) {
		return true
	}

	return false
}

// SetRefundNote gets a reference to the given string and assigns it to the RefundNote field.
func (o *SettlementReconEntityDataInner) SetRefundNote(v string) {
	o.RefundNote = &v
}

// GetRefundId returns the RefundId field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetRefundId() string {
	if o == nil || IsNil(o.RefundId) {
		var ret string
		return ret
	}
	return *o.RefundId
}

// GetRefundIdOk returns a tuple with the RefundId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetRefundIdOk() (*string, bool) {
	if o == nil || IsNil(o.RefundId) {
		return nil, false
	}
	return o.RefundId, true
}

// HasRefundId returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasRefundId() bool {
	if o != nil && !IsNil(o.RefundId) {
		return true
	}

	return false
}

// SetRefundId gets a reference to the given string and assigns it to the RefundId field.
func (o *SettlementReconEntityDataInner) SetRefundId(v string) {
	o.RefundId = &v
}

// GetAdjustmentRemarks returns the AdjustmentRemarks field value if set, zero value otherwise.
func (o *SettlementReconEntityDataInner) GetAdjustmentRemarks() string {
	if o == nil || IsNil(o.AdjustmentRemarks) {
		var ret string
		return ret
	}
	return *o.AdjustmentRemarks
}

// GetAdjustmentRemarksOk returns a tuple with the AdjustmentRemarks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettlementReconEntityDataInner) GetAdjustmentRemarksOk() (*string, bool) {
	if o == nil || IsNil(o.AdjustmentRemarks) {
		return nil, false
	}
	return o.AdjustmentRemarks, true
}

// HasAdjustmentRemarks returns a boolean if a field has been set.
func (o *SettlementReconEntityDataInner) HasAdjustmentRemarks() bool {
	if o != nil && !IsNil(o.AdjustmentRemarks) {
		return true
	}

	return false
}

// SetAdjustmentRemarks gets a reference to the given string and assigns it to the AdjustmentRemarks field.
func (o *SettlementReconEntityDataInner) SetAdjustmentRemarks(v string) {
	o.AdjustmentRemarks = &v
}

func (o SettlementReconEntityDataInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettlementReconEntityDataInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventId) {
		toSerialize["event_id"] = o.EventId
	}
	if !IsNil(o.EventType) {
		toSerialize["event_type"] = o.EventType
	}
	if !IsNil(o.EventSettlementAmount) {
		toSerialize["event_settlement_amount"] = o.EventSettlementAmount
	}
	if !IsNil(o.EventAmount) {
		toSerialize["event_amount"] = o.EventAmount
	}
	if !IsNil(o.SaleType) {
		toSerialize["sale_type"] = o.SaleType
	}
	if !IsNil(o.EventStatus) {
		toSerialize["event_status"] = o.EventStatus
	}
	if !IsNil(o.Entity) {
		toSerialize["entity"] = o.Entity
	}
	if !IsNil(o.EventTime) {
		toSerialize["event_time"] = o.EventTime
	}
	if !IsNil(o.EventCurrency) {
		toSerialize["event_currency"] = o.EventCurrency
	}
	if !IsNil(o.OrderId) {
		toSerialize["order_id"] = o.OrderId
	}
	if !IsNil(o.OrderAmount) {
		toSerialize["order_amount"] = o.OrderAmount
	}
	if !IsNil(o.CustomerPhone) {
		toSerialize["customer_phone"] = o.CustomerPhone
	}
	if !IsNil(o.CustomerEmail) {
		toSerialize["customer_email"] = o.CustomerEmail
	}
	if !IsNil(o.CustomerName) {
		toSerialize["customer_name"] = o.CustomerName
	}
	if !IsNil(o.PaymentAmount) {
		toSerialize["payment_amount"] = o.PaymentAmount
	}
	if !IsNil(o.PaymentUtr) {
		toSerialize["payment_utr"] = o.PaymentUtr
	}
	if !IsNil(o.PaymentTime) {
		toSerialize["payment_time"] = o.PaymentTime
	}
	if !IsNil(o.PaymentServiceCharge) {
		toSerialize["payment_service_charge"] = o.PaymentServiceCharge
	}
	if !IsNil(o.PaymentServiceTax) {
		toSerialize["payment_service_tax"] = o.PaymentServiceTax
	}
	if !IsNil(o.CfPaymentId) {
		toSerialize["cf_payment_id"] = o.CfPaymentId
	}
	if !IsNil(o.CfSettlementId) {
		toSerialize["cf_settlement_id"] = o.CfSettlementId
	}
	if !IsNil(o.SettlementDate) {
		toSerialize["settlement_date"] = o.SettlementDate
	}
	if !IsNil(o.SettlementUtr) {
		toSerialize["settlement_utr"] = o.SettlementUtr
	}
	if !IsNil(o.SplitServiceCharge) {
		toSerialize["split_service_charge"] = o.SplitServiceCharge
	}
	if !IsNil(o.SplitServiceTax) {
		toSerialize["split_service_tax"] = o.SplitServiceTax
	}
	if !IsNil(o.VendorCommission) {
		toSerialize["vendor_commission"] = o.VendorCommission
	}
	if !IsNil(o.ClosedInFavorOf) {
		toSerialize["closed_in_favor_of"] = o.ClosedInFavorOf
	}
	if !IsNil(o.DisputeResolvedOn) {
		toSerialize["dispute_resolved_on"] = o.DisputeResolvedOn
	}
	if !IsNil(o.DisputeCategory) {
		toSerialize["dispute_category"] = o.DisputeCategory
	}
	if !IsNil(o.DisputeNote) {
		toSerialize["dispute_note"] = o.DisputeNote
	}
	if !IsNil(o.RefundProcessedAt) {
		toSerialize["refund_processed_at"] = o.RefundProcessedAt
	}
	if !IsNil(o.RefundArn) {
		toSerialize["refund_arn"] = o.RefundArn
	}
	if !IsNil(o.RefundNote) {
		toSerialize["refund_note"] = o.RefundNote
	}
	if !IsNil(o.RefundId) {
		toSerialize["refund_id"] = o.RefundId
	}
	if !IsNil(o.AdjustmentRemarks) {
		toSerialize["adjustment_remarks"] = o.AdjustmentRemarks
	}
	return toSerialize, nil
}

type NullableSettlementReconEntityDataInner struct {
	value *SettlementReconEntityDataInner
	isSet bool
}

func (v NullableSettlementReconEntityDataInner) Get() *SettlementReconEntityDataInner {
	return v.value
}

func (v *NullableSettlementReconEntityDataInner) Set(val *SettlementReconEntityDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSettlementReconEntityDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSettlementReconEntityDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettlementReconEntityDataInner(val *SettlementReconEntityDataInner) *NullableSettlementReconEntityDataInner {
	return &NullableSettlementReconEntityDataInner{value: val, isSet: true}
}

func (v NullableSettlementReconEntityDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettlementReconEntityDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


