/*
Cashfree Payment Gateway APIs

Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

API version: 2025-01-01
Contact: developers@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg

import (
	"encoding/json"
	"strings"
)

// checks if the PlanEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanEntity{}

// PlanEntity The response returned for Get, Create and Manage Plan APIs
type PlanEntity struct {
	// Currency for the plan.
	PlanCurrency *string `json:"plan_currency,omitempty"`
	// Plan ID provided by merchant.
	PlanId *string `json:"plan_id,omitempty"`
	// Interval type for the plan.
	PlanIntervalType *string `json:"plan_interval_type,omitempty"`
	// Number of intervals for the plan.
	PlanIntervals *int32 `json:"plan_intervals,omitempty"`
	// Maximum amount for the plan.
	PlanMaxAmount *float32 `json:"plan_max_amount,omitempty"`
	// Maximum number of payment cycles for the plan.
	PlanMaxCycles *int32 `json:"plan_max_cycles,omitempty"`
	// Name of the plan.
	PlanName *string `json:"plan_name,omitempty"`
	// Note for the plan.
	PlanNote *string `json:"plan_note,omitempty"`
	// Recurring amount for the plan.
	PlanRecurringAmount *float32 `json:"plan_recurring_amount,omitempty"`
	// Status of the plan.
	PlanStatus *string `json:"plan_status,omitempty"`
	// Type of the plan.
	PlanType *string `json:"plan_type,omitempty"`
}


func (o PlanEntity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanEntity) ToMap() (map[string]interface{}, error) {
	strings.HasPrefix("cf", "cf")
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PlanCurrency) {
		toSerialize["plan_currency"] = o.PlanCurrency
	}
	if !IsNil(o.PlanId) {
		toSerialize["plan_id"] = o.PlanId
	}
	if !IsNil(o.PlanIntervalType) {
		toSerialize["plan_interval_type"] = o.PlanIntervalType
	}
	if !IsNil(o.PlanIntervals) {
		toSerialize["plan_intervals"] = o.PlanIntervals
	}
	if !IsNil(o.PlanMaxAmount) {
		toSerialize["plan_max_amount"] = o.PlanMaxAmount
	}
	if !IsNil(o.PlanMaxCycles) {
		toSerialize["plan_max_cycles"] = o.PlanMaxCycles
	}
	if !IsNil(o.PlanName) {
		toSerialize["plan_name"] = o.PlanName
	}
	if !IsNil(o.PlanNote) {
		toSerialize["plan_note"] = o.PlanNote
	}
	if !IsNil(o.PlanRecurringAmount) {
		toSerialize["plan_recurring_amount"] = o.PlanRecurringAmount
	}
	if !IsNil(o.PlanStatus) {
		toSerialize["plan_status"] = o.PlanStatus
	}
	if !IsNil(o.PlanType) {
		toSerialize["plan_type"] = o.PlanType
	}
	return toSerialize, nil
}



