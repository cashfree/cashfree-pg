/*
Cashfree Payment Gateway APIs

Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

API version: 2022-09-01
Contact: developers@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg

import (
	"encoding/json"
)

// checks if the WHorder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WHorder{}

// WHorder order entity in webhook
type WHorder struct {
	OrderId *string `json:"order_id,omitempty"`
	OrderAmount *float64 `json:"order_amount,omitempty"`
	OrderCurrency *string `json:"order_currency,omitempty"`
	// Custom Tags in thr form of {\"key\":\"value\"} which can be passed for an order. A maximum of 10 tags can be added
	OrderTags map[string]string `json:"order_tags,omitempty"`
}

// NewWHorder instantiates a new WHorder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWHorder() *WHorder {
	this := WHorder{}
	return &this
}

// NewWHorderWithDefaults instantiates a new WHorder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWHorderWithDefaults() *WHorder {
	this := WHorder{}
	return &this
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *WHorder) GetOrderId() string {
	if o == nil || IsNil(o.OrderId) {
		var ret string
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WHorder) GetOrderIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrderId) {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *WHorder) HasOrderId() bool {
	if o != nil && !IsNil(o.OrderId) {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given string and assigns it to the OrderId field.
func (o *WHorder) SetOrderId(v string) {
	o.OrderId = &v
}

// GetOrderAmount returns the OrderAmount field value if set, zero value otherwise.
func (o *WHorder) GetOrderAmount() float64 {
	if o == nil || IsNil(o.OrderAmount) {
		var ret float64
		return ret
	}
	return *o.OrderAmount
}

// GetOrderAmountOk returns a tuple with the OrderAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WHorder) GetOrderAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.OrderAmount) {
		return nil, false
	}
	return o.OrderAmount, true
}

// HasOrderAmount returns a boolean if a field has been set.
func (o *WHorder) HasOrderAmount() bool {
	if o != nil && !IsNil(o.OrderAmount) {
		return true
	}

	return false
}

// SetOrderAmount gets a reference to the given float64 and assigns it to the OrderAmount field.
func (o *WHorder) SetOrderAmount(v float64) {
	o.OrderAmount = &v
}

// GetOrderCurrency returns the OrderCurrency field value if set, zero value otherwise.
func (o *WHorder) GetOrderCurrency() string {
	if o == nil || IsNil(o.OrderCurrency) {
		var ret string
		return ret
	}
	return *o.OrderCurrency
}

// GetOrderCurrencyOk returns a tuple with the OrderCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WHorder) GetOrderCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.OrderCurrency) {
		return nil, false
	}
	return o.OrderCurrency, true
}

// HasOrderCurrency returns a boolean if a field has been set.
func (o *WHorder) HasOrderCurrency() bool {
	if o != nil && !IsNil(o.OrderCurrency) {
		return true
	}

	return false
}

// SetOrderCurrency gets a reference to the given string and assigns it to the OrderCurrency field.
func (o *WHorder) SetOrderCurrency(v string) {
	o.OrderCurrency = &v
}

// GetOrderTags returns the OrderTags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WHorder) GetOrderTags() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.OrderTags
}

// GetOrderTagsOk returns a tuple with the OrderTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WHorder) GetOrderTagsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.OrderTags) {
		return nil, false
	}
	return &o.OrderTags, true
}

// HasOrderTags returns a boolean if a field has been set.
func (o *WHorder) HasOrderTags() bool {
	if o != nil && IsNil(o.OrderTags) {
		return true
	}

	return false
}

// SetOrderTags gets a reference to the given map[string]string and assigns it to the OrderTags field.
func (o *WHorder) SetOrderTags(v map[string]string) {
	o.OrderTags = v
}

func (o WHorder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WHorder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OrderId) {
		toSerialize["order_id"] = o.OrderId
	}
	if !IsNil(o.OrderAmount) {
		toSerialize["order_amount"] = o.OrderAmount
	}
	if !IsNil(o.OrderCurrency) {
		toSerialize["order_currency"] = o.OrderCurrency
	}
	if o.OrderTags != nil {
		toSerialize["order_tags"] = o.OrderTags
	}
	return toSerialize, nil
}

type NullableWHorder struct {
	value *WHorder
	isSet bool
}

func (v NullableWHorder) Get() *WHorder {
	return v.value
}

func (v *NullableWHorder) Set(val *WHorder) {
	v.value = val
	v.isSet = true
}

func (v NullableWHorder) IsSet() bool {
	return v.isSet
}

func (v *NullableWHorder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWHorder(val *WHorder) *NullableWHorder {
	return &NullableWHorder{value: val, isSet: true}
}

func (v NullableWHorder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWHorder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


