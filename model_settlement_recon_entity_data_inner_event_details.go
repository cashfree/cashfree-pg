/*
Cashfree Payment Gateway APIs

Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

API version: 2025-01-01
Contact: developers@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg

import (
	"encoding/json"
	"strings"
)

// checks if the SettlementReconEntityDataInnerEventDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettlementReconEntityDataInnerEventDetails{}

// SettlementReconEntityDataInnerEventDetails struct for SettlementReconEntityDataInnerEventDetails
type SettlementReconEntityDataInnerEventDetails struct {
	// Unique ID associated with the event.
	EventId *string `json:"event_id,omitempty"`
	// The event type can be PAYMENT, REFUND, REFUND_REVERSAL, DISPUTE, DISPUTE_REVERSAL, CHARGEBACK, CHARGEBACK_REVERSAL, OTHER_ADJUSTMENT.
	EventType *string `json:"event_type,omitempty"`
	// Amount that is part of the settlement corresponding to the event.
	EventSettlementAmount *float32 `json:"event_settlement_amount,omitempty"`
	// Amount corresponding to the event. Example, refund amount, dispute amount, payment amount, etc.
	EventAmount *float32 `json:"event_amount,omitempty"`
	// Indicates if it is CREDIT/DEBIT sale.
	SaleType *string `json:"sale_type,omitempty"`
	// Status of the event. Example - SUCCESS, FAILED, PENDING, CANCELLED.
	EventStatus *string `json:"event_status,omitempty"`
	// Recon
	Entity *string `json:"entity,omitempty"`
	// Time associated with the event. Example, transaction time, dispute initiation time
	EventTime *string `json:"event_time,omitempty"`
	// Curreny type - INR.
	EventCurrency *string `json:"event_currency,omitempty"`
	// Service charge for above event_type.
	EventServiceCharge *float32 `json:"event_service_charge,omitempty"`
	// Service tax for above event_type.
	EventServiceTax *float32 `json:"event_service_tax,omitempty"`
	// Remarks for above event_type.
	EventRemarks *float32 `json:"event_remarks,omitempty"`
}


func (o SettlementReconEntityDataInnerEventDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettlementReconEntityDataInnerEventDetails) ToMap() (map[string]interface{}, error) {
	strings.HasPrefix("cf", "cf")
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventId) {
		toSerialize["event_id"] = o.EventId
	}
	if !IsNil(o.EventType) {
		toSerialize["event_type"] = o.EventType
	}
	if !IsNil(o.EventSettlementAmount) {
		toSerialize["event_settlement_amount"] = o.EventSettlementAmount
	}
	if !IsNil(o.EventAmount) {
		toSerialize["event_amount"] = o.EventAmount
	}
	if !IsNil(o.SaleType) {
		toSerialize["sale_type"] = o.SaleType
	}
	if !IsNil(o.EventStatus) {
		toSerialize["event_status"] = o.EventStatus
	}
	if !IsNil(o.Entity) {
		toSerialize["entity"] = o.Entity
	}
	if !IsNil(o.EventTime) {
		toSerialize["event_time"] = o.EventTime
	}
	if !IsNil(o.EventCurrency) {
		toSerialize["event_currency"] = o.EventCurrency
	}
	if !IsNil(o.EventServiceCharge) {
		toSerialize["event_service_charge"] = o.EventServiceCharge
	}
	if !IsNil(o.EventServiceTax) {
		toSerialize["event_service_tax"] = o.EventServiceTax
	}
	if !IsNil(o.EventRemarks) {
		toSerialize["event_remarks"] = o.EventRemarks
	}
	return toSerialize, nil
}



