/*
Cashfree Payment Gateway APIs

Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

API version: 2022-09-01
Contact: developers@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg

import (
	"encoding/json"
)

// checks if the ErrorDetailsInPaymentsEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorDetailsInPaymentsEntity{}

// ErrorDetailsInPaymentsEntity The error details are present only for failed payments
type ErrorDetailsInPaymentsEntity struct {
	ErrorCode *string `json:"error_code,omitempty"`
	ErrorDescription *string `json:"error_description,omitempty"`
	ErrorReason *string `json:"error_reason,omitempty"`
	ErrorSource *string `json:"error_source,omitempty"`
	ErrorCodeRaw *string `json:"error_code_raw,omitempty"`
	ErrorDescriptionRaw *string `json:"error_description_raw,omitempty"`
	ErrorSubcodeRaw *string `json:"error_subcode_raw,omitempty"`
}

// NewErrorDetailsInPaymentsEntity instantiates a new ErrorDetailsInPaymentsEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorDetailsInPaymentsEntity() *ErrorDetailsInPaymentsEntity {
	this := ErrorDetailsInPaymentsEntity{}
	return &this
}

// NewErrorDetailsInPaymentsEntityWithDefaults instantiates a new ErrorDetailsInPaymentsEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorDetailsInPaymentsEntityWithDefaults() *ErrorDetailsInPaymentsEntity {
	this := ErrorDetailsInPaymentsEntity{}
	return &this
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *ErrorDetailsInPaymentsEntity) GetErrorCode() string {
	if o == nil || IsNil(o.ErrorCode) {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorDetailsInPaymentsEntity) GetErrorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *ErrorDetailsInPaymentsEntity) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *ErrorDetailsInPaymentsEntity) SetErrorCode(v string) {
	o.ErrorCode = &v
}

// GetErrorDescription returns the ErrorDescription field value if set, zero value otherwise.
func (o *ErrorDetailsInPaymentsEntity) GetErrorDescription() string {
	if o == nil || IsNil(o.ErrorDescription) {
		var ret string
		return ret
	}
	return *o.ErrorDescription
}

// GetErrorDescriptionOk returns a tuple with the ErrorDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorDetailsInPaymentsEntity) GetErrorDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorDescription) {
		return nil, false
	}
	return o.ErrorDescription, true
}

// HasErrorDescription returns a boolean if a field has been set.
func (o *ErrorDetailsInPaymentsEntity) HasErrorDescription() bool {
	if o != nil && !IsNil(o.ErrorDescription) {
		return true
	}

	return false
}

// SetErrorDescription gets a reference to the given string and assigns it to the ErrorDescription field.
func (o *ErrorDetailsInPaymentsEntity) SetErrorDescription(v string) {
	o.ErrorDescription = &v
}

// GetErrorReason returns the ErrorReason field value if set, zero value otherwise.
func (o *ErrorDetailsInPaymentsEntity) GetErrorReason() string {
	if o == nil || IsNil(o.ErrorReason) {
		var ret string
		return ret
	}
	return *o.ErrorReason
}

// GetErrorReasonOk returns a tuple with the ErrorReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorDetailsInPaymentsEntity) GetErrorReasonOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorReason) {
		return nil, false
	}
	return o.ErrorReason, true
}

// HasErrorReason returns a boolean if a field has been set.
func (o *ErrorDetailsInPaymentsEntity) HasErrorReason() bool {
	if o != nil && !IsNil(o.ErrorReason) {
		return true
	}

	return false
}

// SetErrorReason gets a reference to the given string and assigns it to the ErrorReason field.
func (o *ErrorDetailsInPaymentsEntity) SetErrorReason(v string) {
	o.ErrorReason = &v
}

// GetErrorSource returns the ErrorSource field value if set, zero value otherwise.
func (o *ErrorDetailsInPaymentsEntity) GetErrorSource() string {
	if o == nil || IsNil(o.ErrorSource) {
		var ret string
		return ret
	}
	return *o.ErrorSource
}

// GetErrorSourceOk returns a tuple with the ErrorSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorDetailsInPaymentsEntity) GetErrorSourceOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorSource) {
		return nil, false
	}
	return o.ErrorSource, true
}

// HasErrorSource returns a boolean if a field has been set.
func (o *ErrorDetailsInPaymentsEntity) HasErrorSource() bool {
	if o != nil && !IsNil(o.ErrorSource) {
		return true
	}

	return false
}

// SetErrorSource gets a reference to the given string and assigns it to the ErrorSource field.
func (o *ErrorDetailsInPaymentsEntity) SetErrorSource(v string) {
	o.ErrorSource = &v
}

// GetErrorCodeRaw returns the ErrorCodeRaw field value if set, zero value otherwise.
func (o *ErrorDetailsInPaymentsEntity) GetErrorCodeRaw() string {
	if o == nil || IsNil(o.ErrorCodeRaw) {
		var ret string
		return ret
	}
	return *o.ErrorCodeRaw
}

// GetErrorCodeRawOk returns a tuple with the ErrorCodeRaw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorDetailsInPaymentsEntity) GetErrorCodeRawOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorCodeRaw) {
		return nil, false
	}
	return o.ErrorCodeRaw, true
}

// HasErrorCodeRaw returns a boolean if a field has been set.
func (o *ErrorDetailsInPaymentsEntity) HasErrorCodeRaw() bool {
	if o != nil && !IsNil(o.ErrorCodeRaw) {
		return true
	}

	return false
}

// SetErrorCodeRaw gets a reference to the given string and assigns it to the ErrorCodeRaw field.
func (o *ErrorDetailsInPaymentsEntity) SetErrorCodeRaw(v string) {
	o.ErrorCodeRaw = &v
}

// GetErrorDescriptionRaw returns the ErrorDescriptionRaw field value if set, zero value otherwise.
func (o *ErrorDetailsInPaymentsEntity) GetErrorDescriptionRaw() string {
	if o == nil || IsNil(o.ErrorDescriptionRaw) {
		var ret string
		return ret
	}
	return *o.ErrorDescriptionRaw
}

// GetErrorDescriptionRawOk returns a tuple with the ErrorDescriptionRaw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorDetailsInPaymentsEntity) GetErrorDescriptionRawOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorDescriptionRaw) {
		return nil, false
	}
	return o.ErrorDescriptionRaw, true
}

// HasErrorDescriptionRaw returns a boolean if a field has been set.
func (o *ErrorDetailsInPaymentsEntity) HasErrorDescriptionRaw() bool {
	if o != nil && !IsNil(o.ErrorDescriptionRaw) {
		return true
	}

	return false
}

// SetErrorDescriptionRaw gets a reference to the given string and assigns it to the ErrorDescriptionRaw field.
func (o *ErrorDetailsInPaymentsEntity) SetErrorDescriptionRaw(v string) {
	o.ErrorDescriptionRaw = &v
}

// GetErrorSubcodeRaw returns the ErrorSubcodeRaw field value if set, zero value otherwise.
func (o *ErrorDetailsInPaymentsEntity) GetErrorSubcodeRaw() string {
	if o == nil || IsNil(o.ErrorSubcodeRaw) {
		var ret string
		return ret
	}
	return *o.ErrorSubcodeRaw
}

// GetErrorSubcodeRawOk returns a tuple with the ErrorSubcodeRaw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorDetailsInPaymentsEntity) GetErrorSubcodeRawOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorSubcodeRaw) {
		return nil, false
	}
	return o.ErrorSubcodeRaw, true
}

// HasErrorSubcodeRaw returns a boolean if a field has been set.
func (o *ErrorDetailsInPaymentsEntity) HasErrorSubcodeRaw() bool {
	if o != nil && !IsNil(o.ErrorSubcodeRaw) {
		return true
	}

	return false
}

// SetErrorSubcodeRaw gets a reference to the given string and assigns it to the ErrorSubcodeRaw field.
func (o *ErrorDetailsInPaymentsEntity) SetErrorSubcodeRaw(v string) {
	o.ErrorSubcodeRaw = &v
}

func (o ErrorDetailsInPaymentsEntity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorDetailsInPaymentsEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorCode) {
		toSerialize["error_code"] = o.ErrorCode
	}
	if !IsNil(o.ErrorDescription) {
		toSerialize["error_description"] = o.ErrorDescription
	}
	if !IsNil(o.ErrorReason) {
		toSerialize["error_reason"] = o.ErrorReason
	}
	if !IsNil(o.ErrorSource) {
		toSerialize["error_source"] = o.ErrorSource
	}
	if !IsNil(o.ErrorCodeRaw) {
		toSerialize["error_code_raw"] = o.ErrorCodeRaw
	}
	if !IsNil(o.ErrorDescriptionRaw) {
		toSerialize["error_description_raw"] = o.ErrorDescriptionRaw
	}
	if !IsNil(o.ErrorSubcodeRaw) {
		toSerialize["error_subcode_raw"] = o.ErrorSubcodeRaw
	}
	return toSerialize, nil
}

type NullableErrorDetailsInPaymentsEntity struct {
	value *ErrorDetailsInPaymentsEntity
	isSet bool
}

func (v NullableErrorDetailsInPaymentsEntity) Get() *ErrorDetailsInPaymentsEntity {
	return v.value
}

func (v *NullableErrorDetailsInPaymentsEntity) Set(val *ErrorDetailsInPaymentsEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorDetailsInPaymentsEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorDetailsInPaymentsEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorDetailsInPaymentsEntity(val *ErrorDetailsInPaymentsEntity) *NullableErrorDetailsInPaymentsEntity {
	return &NullableErrorDetailsInPaymentsEntity{value: val, isSet: true}
}

func (v NullableErrorDetailsInPaymentsEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorDetailsInPaymentsEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


