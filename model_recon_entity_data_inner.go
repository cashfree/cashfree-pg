/*
Cashfree Payment Gateway APIs

Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

API version: 2022-09-01
Contact: developers@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg

import (
	"encoding/json"
)

// checks if the ReconEntityDataInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReconEntityDataInner{}

// ReconEntityDataInner struct for ReconEntityDataInner
type ReconEntityDataInner struct {
	// Unique ID associated with the event.
	EventId *string `json:"event_id,omitempty"`
	// The event type can be SETTLEMENT, PAYMENT, REFUND, REFUND_REVERSAL, DISPUTE, DISPUTE_REVERSAL, CHARGEBACK, CHARGEBACK_REVERSAL, OTHER_ADJUSTMENT.
	EventType *string `json:"event_type,omitempty"`
	// Amount that is part of the settlement corresponding to the event.
	EventSettlementAmount *float32 `json:"event_settlement_amount,omitempty"`
	// Amount of the event. Example, refund amount, dispute amount, payment amount, etc.
	EventAmount *float32 `json:"event_amount,omitempty"`
	// Indicates if it is CREDIT/DEBIT sale.
	SaleType NullableString `json:"sale_type,omitempty"`
	// Status of the event. Example - SUCCESS, FAILED, PENDING, CANCELLED.
	EventStatus NullableString `json:"event_status,omitempty"`
	// Recon
	Entity *string `json:"entity,omitempty"`
	// Time associated with the event. Example, transaction time, dispute initiation time
	EventTime *string `json:"event_time,omitempty"`
	// Curreny type - INR.
	EventCurrency NullableString `json:"event_currency,omitempty"`
	// Unique order ID. Alphanumeric and only '-' and '_' allowed.
	OrderId NullableString `json:"order_id,omitempty"`
	// The amount which was passed at the order creation time.
	OrderAmount NullableFloat32 `json:"order_amount,omitempty"`
	// Customer phone number.
	CustomerPhone NullableString `json:"customer_phone,omitempty"`
	// Customer email.
	CustomerEmail NullableString `json:"customer_email,omitempty"`
	// Customer name.
	CustomerName NullableString `json:"customer_name,omitempty"`
	// Payment amount captured.
	PaymentAmount NullableFloat32 `json:"payment_amount,omitempty"`
	// Unique transaction reference number of the payment.
	PaymentUtr NullableString `json:"payment_utr,omitempty"`
	// Date and time when the payment was initiated.
	PaymentTime NullableString `json:"payment_time,omitempty"`
	// Service charge applicable for the payment.
	PaymentServiceCharge NullableFloat32 `json:"payment_service_charge,omitempty"`
	// Service tax applicable on the payment.
	PaymentServiceTax NullableFloat32 `json:"payment_service_tax,omitempty"`
	// Cashfree Payments unique ID to identify a payment.
	CfPaymentId NullableInt64 `json:"cf_payment_id,omitempty"`
	// Unique ID to identify the settlement.
	CfSettlementId NullableInt32 `json:"cf_settlement_id,omitempty"`
	// Date and time when the settlement was processed.
	SettlementDate NullableString `json:"settlement_date,omitempty"`
	// Unique transaction reference number of the settlement.
	SettlementUtr NullableString `json:"settlement_utr,omitempty"`
	// Service charge that is applicable for splitting the payment.
	SplitServiceCharge NullableFloat32 `json:"split_service_charge,omitempty"`
	// Service tax applicable for splitting the amount to vendors.
	SplitServiceTax NullableFloat32 `json:"split_service_tax,omitempty"`
	// Vendor commission applicable for this transaction.
	VendorCommission NullableFloat32 `json:"vendor_commission,omitempty"`
	// Specifies whether the dispute was closed in favor of the merchant or customer. /n Possible values - Merchant, Customer
	ClosedInFavorOf NullableString `json:"closed_in_favor_of,omitempty"`
	// Date and time when the dispute was resolved.
	DisputeResolvedOn NullableString `json:"dispute_resolved_on,omitempty"`
	// Category of the dispute - Dispute code and the reason for dispute is shown.
	DisputeCategory NullableString `json:"dispute_category,omitempty"`
	// Note regarding the dispute.
	DisputeNote NullableString `json:"dispute_note,omitempty"`
	// Date and time when the refund was processed.
	RefundProcessedAt NullableString `json:"refund_processed_at,omitempty"`
	// The bank reference number for the refund.
	RefundArn NullableString `json:"refund_arn,omitempty"`
	// A refund note for your reference.
	RefundNote NullableString `json:"refund_note,omitempty"`
	// An unique ID to associate the refund with.
	RefundId NullableString `json:"refund_id,omitempty"`
	// Other adjustment remarks.
	AdjustmentRemarks NullableString `json:"adjustment_remarks,omitempty"`
	// Amount that is adjusted from the settlement amount because of any credit/debit event such as refund, refund_reverse etc.
	Adjustment NullableFloat32 `json:"adjustment,omitempty"`
	// Service tax applicable on the settlement amount.
	ServiceTax NullableFloat32 `json:"service_tax,omitempty"`
	// Service charge applicable on the settlement amount.
	ServiceCharge NullableFloat32 `json:"service_charge,omitempty"`
	// Net amount that is settled after considering the adjustments, settlement charge and tax.
	AmountSettled NullableFloat32 `json:"amount_settled,omitempty"`
	// The start time of the time range of the payments considered for the settlement.
	PaymentFrom NullableString `json:"payment_from,omitempty"`
	// The end time of time range of the payments considered for the settlement.
	PaymentTill NullableString `json:"payment_till,omitempty"`
	// Reason for settlement failure.
	Reason NullableString `json:"reason,omitempty"`
	// Date and time when the settlement was initiated.
	SettlementInitiatedOn NullableString `json:"settlement_initiated_on,omitempty"`
	// Type of settlement. Possible values - Standard, Instant, On demand.
	SettlementType NullableString `json:"settlement_type,omitempty"`
	// Settlement charges applicable on the settlement.
	SettlementCharge NullableFloat32 `json:"settlement_charge,omitempty"`
	// Settlement tax applicable on the settlement.
	SettlementTax NullableFloat32 `json:"settlement_tax,omitempty"`
	// Remarks on the settlement.
	Remarks NullableString `json:"remarks,omitempty"`
}

// NewReconEntityDataInner instantiates a new ReconEntityDataInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReconEntityDataInner() *ReconEntityDataInner {
	this := ReconEntityDataInner{}
	return &this
}

// NewReconEntityDataInnerWithDefaults instantiates a new ReconEntityDataInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReconEntityDataInnerWithDefaults() *ReconEntityDataInner {
	this := ReconEntityDataInner{}
	return &this
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *ReconEntityDataInner) GetEventId() string {
	if o == nil || IsNil(o.EventId) {
		var ret string
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconEntityDataInner) GetEventIdOk() (*string, bool) {
	if o == nil || IsNil(o.EventId) {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasEventId() bool {
	if o != nil && !IsNil(o.EventId) {
		return true
	}

	return false
}

// SetEventId gets a reference to the given string and assigns it to the EventId field.
func (o *ReconEntityDataInner) SetEventId(v string) {
	o.EventId = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *ReconEntityDataInner) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconEntityDataInner) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *ReconEntityDataInner) SetEventType(v string) {
	o.EventType = &v
}

// GetEventSettlementAmount returns the EventSettlementAmount field value if set, zero value otherwise.
func (o *ReconEntityDataInner) GetEventSettlementAmount() float32 {
	if o == nil || IsNil(o.EventSettlementAmount) {
		var ret float32
		return ret
	}
	return *o.EventSettlementAmount
}

// GetEventSettlementAmountOk returns a tuple with the EventSettlementAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconEntityDataInner) GetEventSettlementAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.EventSettlementAmount) {
		return nil, false
	}
	return o.EventSettlementAmount, true
}

// HasEventSettlementAmount returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasEventSettlementAmount() bool {
	if o != nil && !IsNil(o.EventSettlementAmount) {
		return true
	}

	return false
}

// SetEventSettlementAmount gets a reference to the given float32 and assigns it to the EventSettlementAmount field.
func (o *ReconEntityDataInner) SetEventSettlementAmount(v float32) {
	o.EventSettlementAmount = &v
}

// GetEventAmount returns the EventAmount field value if set, zero value otherwise.
func (o *ReconEntityDataInner) GetEventAmount() float32 {
	if o == nil || IsNil(o.EventAmount) {
		var ret float32
		return ret
	}
	return *o.EventAmount
}

// GetEventAmountOk returns a tuple with the EventAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconEntityDataInner) GetEventAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.EventAmount) {
		return nil, false
	}
	return o.EventAmount, true
}

// HasEventAmount returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasEventAmount() bool {
	if o != nil && !IsNil(o.EventAmount) {
		return true
	}

	return false
}

// SetEventAmount gets a reference to the given float32 and assigns it to the EventAmount field.
func (o *ReconEntityDataInner) SetEventAmount(v float32) {
	o.EventAmount = &v
}

// GetSaleType returns the SaleType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetSaleType() string {
	if o == nil || IsNil(o.SaleType.Get()) {
		var ret string
		return ret
	}
	return *o.SaleType.Get()
}

// GetSaleTypeOk returns a tuple with the SaleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetSaleTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SaleType.Get(), o.SaleType.IsSet()
}

// HasSaleType returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasSaleType() bool {
	if o != nil && o.SaleType.IsSet() {
		return true
	}

	return false
}

// SetSaleType gets a reference to the given NullableString and assigns it to the SaleType field.
func (o *ReconEntityDataInner) SetSaleType(v string) {
	o.SaleType.Set(&v)
}
// SetSaleTypeNil sets the value for SaleType to be an explicit nil
func (o *ReconEntityDataInner) SetSaleTypeNil() {
	o.SaleType.Set(nil)
}

// UnsetSaleType ensures that no value is present for SaleType, not even an explicit nil
func (o *ReconEntityDataInner) UnsetSaleType() {
	o.SaleType.Unset()
}

// GetEventStatus returns the EventStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetEventStatus() string {
	if o == nil || IsNil(o.EventStatus.Get()) {
		var ret string
		return ret
	}
	return *o.EventStatus.Get()
}

// GetEventStatusOk returns a tuple with the EventStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetEventStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventStatus.Get(), o.EventStatus.IsSet()
}

// HasEventStatus returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasEventStatus() bool {
	if o != nil && o.EventStatus.IsSet() {
		return true
	}

	return false
}

// SetEventStatus gets a reference to the given NullableString and assigns it to the EventStatus field.
func (o *ReconEntityDataInner) SetEventStatus(v string) {
	o.EventStatus.Set(&v)
}
// SetEventStatusNil sets the value for EventStatus to be an explicit nil
func (o *ReconEntityDataInner) SetEventStatusNil() {
	o.EventStatus.Set(nil)
}

// UnsetEventStatus ensures that no value is present for EventStatus, not even an explicit nil
func (o *ReconEntityDataInner) UnsetEventStatus() {
	o.EventStatus.Unset()
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *ReconEntityDataInner) GetEntity() string {
	if o == nil || IsNil(o.Entity) {
		var ret string
		return ret
	}
	return *o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconEntityDataInner) GetEntityOk() (*string, bool) {
	if o == nil || IsNil(o.Entity) {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasEntity() bool {
	if o != nil && !IsNil(o.Entity) {
		return true
	}

	return false
}

// SetEntity gets a reference to the given string and assigns it to the Entity field.
func (o *ReconEntityDataInner) SetEntity(v string) {
	o.Entity = &v
}

// GetEventTime returns the EventTime field value if set, zero value otherwise.
func (o *ReconEntityDataInner) GetEventTime() string {
	if o == nil || IsNil(o.EventTime) {
		var ret string
		return ret
	}
	return *o.EventTime
}

// GetEventTimeOk returns a tuple with the EventTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconEntityDataInner) GetEventTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EventTime) {
		return nil, false
	}
	return o.EventTime, true
}

// HasEventTime returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasEventTime() bool {
	if o != nil && !IsNil(o.EventTime) {
		return true
	}

	return false
}

// SetEventTime gets a reference to the given string and assigns it to the EventTime field.
func (o *ReconEntityDataInner) SetEventTime(v string) {
	o.EventTime = &v
}

// GetEventCurrency returns the EventCurrency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetEventCurrency() string {
	if o == nil || IsNil(o.EventCurrency.Get()) {
		var ret string
		return ret
	}
	return *o.EventCurrency.Get()
}

// GetEventCurrencyOk returns a tuple with the EventCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetEventCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventCurrency.Get(), o.EventCurrency.IsSet()
}

// HasEventCurrency returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasEventCurrency() bool {
	if o != nil && o.EventCurrency.IsSet() {
		return true
	}

	return false
}

// SetEventCurrency gets a reference to the given NullableString and assigns it to the EventCurrency field.
func (o *ReconEntityDataInner) SetEventCurrency(v string) {
	o.EventCurrency.Set(&v)
}
// SetEventCurrencyNil sets the value for EventCurrency to be an explicit nil
func (o *ReconEntityDataInner) SetEventCurrencyNil() {
	o.EventCurrency.Set(nil)
}

// UnsetEventCurrency ensures that no value is present for EventCurrency, not even an explicit nil
func (o *ReconEntityDataInner) UnsetEventCurrency() {
	o.EventCurrency.Unset()
}

// GetOrderId returns the OrderId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetOrderId() string {
	if o == nil || IsNil(o.OrderId.Get()) {
		var ret string
		return ret
	}
	return *o.OrderId.Get()
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetOrderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrderId.Get(), o.OrderId.IsSet()
}

// HasOrderId returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasOrderId() bool {
	if o != nil && o.OrderId.IsSet() {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given NullableString and assigns it to the OrderId field.
func (o *ReconEntityDataInner) SetOrderId(v string) {
	o.OrderId.Set(&v)
}
// SetOrderIdNil sets the value for OrderId to be an explicit nil
func (o *ReconEntityDataInner) SetOrderIdNil() {
	o.OrderId.Set(nil)
}

// UnsetOrderId ensures that no value is present for OrderId, not even an explicit nil
func (o *ReconEntityDataInner) UnsetOrderId() {
	o.OrderId.Unset()
}

// GetOrderAmount returns the OrderAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetOrderAmount() float32 {
	if o == nil || IsNil(o.OrderAmount.Get()) {
		var ret float32
		return ret
	}
	return *o.OrderAmount.Get()
}

// GetOrderAmountOk returns a tuple with the OrderAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetOrderAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrderAmount.Get(), o.OrderAmount.IsSet()
}

// HasOrderAmount returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasOrderAmount() bool {
	if o != nil && o.OrderAmount.IsSet() {
		return true
	}

	return false
}

// SetOrderAmount gets a reference to the given NullableFloat32 and assigns it to the OrderAmount field.
func (o *ReconEntityDataInner) SetOrderAmount(v float32) {
	o.OrderAmount.Set(&v)
}
// SetOrderAmountNil sets the value for OrderAmount to be an explicit nil
func (o *ReconEntityDataInner) SetOrderAmountNil() {
	o.OrderAmount.Set(nil)
}

// UnsetOrderAmount ensures that no value is present for OrderAmount, not even an explicit nil
func (o *ReconEntityDataInner) UnsetOrderAmount() {
	o.OrderAmount.Unset()
}

// GetCustomerPhone returns the CustomerPhone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetCustomerPhone() string {
	if o == nil || IsNil(o.CustomerPhone.Get()) {
		var ret string
		return ret
	}
	return *o.CustomerPhone.Get()
}

// GetCustomerPhoneOk returns a tuple with the CustomerPhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetCustomerPhoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomerPhone.Get(), o.CustomerPhone.IsSet()
}

// HasCustomerPhone returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasCustomerPhone() bool {
	if o != nil && o.CustomerPhone.IsSet() {
		return true
	}

	return false
}

// SetCustomerPhone gets a reference to the given NullableString and assigns it to the CustomerPhone field.
func (o *ReconEntityDataInner) SetCustomerPhone(v string) {
	o.CustomerPhone.Set(&v)
}
// SetCustomerPhoneNil sets the value for CustomerPhone to be an explicit nil
func (o *ReconEntityDataInner) SetCustomerPhoneNil() {
	o.CustomerPhone.Set(nil)
}

// UnsetCustomerPhone ensures that no value is present for CustomerPhone, not even an explicit nil
func (o *ReconEntityDataInner) UnsetCustomerPhone() {
	o.CustomerPhone.Unset()
}

// GetCustomerEmail returns the CustomerEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetCustomerEmail() string {
	if o == nil || IsNil(o.CustomerEmail.Get()) {
		var ret string
		return ret
	}
	return *o.CustomerEmail.Get()
}

// GetCustomerEmailOk returns a tuple with the CustomerEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetCustomerEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomerEmail.Get(), o.CustomerEmail.IsSet()
}

// HasCustomerEmail returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasCustomerEmail() bool {
	if o != nil && o.CustomerEmail.IsSet() {
		return true
	}

	return false
}

// SetCustomerEmail gets a reference to the given NullableString and assigns it to the CustomerEmail field.
func (o *ReconEntityDataInner) SetCustomerEmail(v string) {
	o.CustomerEmail.Set(&v)
}
// SetCustomerEmailNil sets the value for CustomerEmail to be an explicit nil
func (o *ReconEntityDataInner) SetCustomerEmailNil() {
	o.CustomerEmail.Set(nil)
}

// UnsetCustomerEmail ensures that no value is present for CustomerEmail, not even an explicit nil
func (o *ReconEntityDataInner) UnsetCustomerEmail() {
	o.CustomerEmail.Unset()
}

// GetCustomerName returns the CustomerName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetCustomerName() string {
	if o == nil || IsNil(o.CustomerName.Get()) {
		var ret string
		return ret
	}
	return *o.CustomerName.Get()
}

// GetCustomerNameOk returns a tuple with the CustomerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetCustomerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomerName.Get(), o.CustomerName.IsSet()
}

// HasCustomerName returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasCustomerName() bool {
	if o != nil && o.CustomerName.IsSet() {
		return true
	}

	return false
}

// SetCustomerName gets a reference to the given NullableString and assigns it to the CustomerName field.
func (o *ReconEntityDataInner) SetCustomerName(v string) {
	o.CustomerName.Set(&v)
}
// SetCustomerNameNil sets the value for CustomerName to be an explicit nil
func (o *ReconEntityDataInner) SetCustomerNameNil() {
	o.CustomerName.Set(nil)
}

// UnsetCustomerName ensures that no value is present for CustomerName, not even an explicit nil
func (o *ReconEntityDataInner) UnsetCustomerName() {
	o.CustomerName.Unset()
}

// GetPaymentAmount returns the PaymentAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetPaymentAmount() float32 {
	if o == nil || IsNil(o.PaymentAmount.Get()) {
		var ret float32
		return ret
	}
	return *o.PaymentAmount.Get()
}

// GetPaymentAmountOk returns a tuple with the PaymentAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetPaymentAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PaymentAmount.Get(), o.PaymentAmount.IsSet()
}

// HasPaymentAmount returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasPaymentAmount() bool {
	if o != nil && o.PaymentAmount.IsSet() {
		return true
	}

	return false
}

// SetPaymentAmount gets a reference to the given NullableFloat32 and assigns it to the PaymentAmount field.
func (o *ReconEntityDataInner) SetPaymentAmount(v float32) {
	o.PaymentAmount.Set(&v)
}
// SetPaymentAmountNil sets the value for PaymentAmount to be an explicit nil
func (o *ReconEntityDataInner) SetPaymentAmountNil() {
	o.PaymentAmount.Set(nil)
}

// UnsetPaymentAmount ensures that no value is present for PaymentAmount, not even an explicit nil
func (o *ReconEntityDataInner) UnsetPaymentAmount() {
	o.PaymentAmount.Unset()
}

// GetPaymentUtr returns the PaymentUtr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetPaymentUtr() string {
	if o == nil || IsNil(o.PaymentUtr.Get()) {
		var ret string
		return ret
	}
	return *o.PaymentUtr.Get()
}

// GetPaymentUtrOk returns a tuple with the PaymentUtr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetPaymentUtrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PaymentUtr.Get(), o.PaymentUtr.IsSet()
}

// HasPaymentUtr returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasPaymentUtr() bool {
	if o != nil && o.PaymentUtr.IsSet() {
		return true
	}

	return false
}

// SetPaymentUtr gets a reference to the given NullableString and assigns it to the PaymentUtr field.
func (o *ReconEntityDataInner) SetPaymentUtr(v string) {
	o.PaymentUtr.Set(&v)
}
// SetPaymentUtrNil sets the value for PaymentUtr to be an explicit nil
func (o *ReconEntityDataInner) SetPaymentUtrNil() {
	o.PaymentUtr.Set(nil)
}

// UnsetPaymentUtr ensures that no value is present for PaymentUtr, not even an explicit nil
func (o *ReconEntityDataInner) UnsetPaymentUtr() {
	o.PaymentUtr.Unset()
}

// GetPaymentTime returns the PaymentTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetPaymentTime() string {
	if o == nil || IsNil(o.PaymentTime.Get()) {
		var ret string
		return ret
	}
	return *o.PaymentTime.Get()
}

// GetPaymentTimeOk returns a tuple with the PaymentTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetPaymentTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PaymentTime.Get(), o.PaymentTime.IsSet()
}

// HasPaymentTime returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasPaymentTime() bool {
	if o != nil && o.PaymentTime.IsSet() {
		return true
	}

	return false
}

// SetPaymentTime gets a reference to the given NullableString and assigns it to the PaymentTime field.
func (o *ReconEntityDataInner) SetPaymentTime(v string) {
	o.PaymentTime.Set(&v)
}
// SetPaymentTimeNil sets the value for PaymentTime to be an explicit nil
func (o *ReconEntityDataInner) SetPaymentTimeNil() {
	o.PaymentTime.Set(nil)
}

// UnsetPaymentTime ensures that no value is present for PaymentTime, not even an explicit nil
func (o *ReconEntityDataInner) UnsetPaymentTime() {
	o.PaymentTime.Unset()
}

// GetPaymentServiceCharge returns the PaymentServiceCharge field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetPaymentServiceCharge() float32 {
	if o == nil || IsNil(o.PaymentServiceCharge.Get()) {
		var ret float32
		return ret
	}
	return *o.PaymentServiceCharge.Get()
}

// GetPaymentServiceChargeOk returns a tuple with the PaymentServiceCharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetPaymentServiceChargeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PaymentServiceCharge.Get(), o.PaymentServiceCharge.IsSet()
}

// HasPaymentServiceCharge returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasPaymentServiceCharge() bool {
	if o != nil && o.PaymentServiceCharge.IsSet() {
		return true
	}

	return false
}

// SetPaymentServiceCharge gets a reference to the given NullableFloat32 and assigns it to the PaymentServiceCharge field.
func (o *ReconEntityDataInner) SetPaymentServiceCharge(v float32) {
	o.PaymentServiceCharge.Set(&v)
}
// SetPaymentServiceChargeNil sets the value for PaymentServiceCharge to be an explicit nil
func (o *ReconEntityDataInner) SetPaymentServiceChargeNil() {
	o.PaymentServiceCharge.Set(nil)
}

// UnsetPaymentServiceCharge ensures that no value is present for PaymentServiceCharge, not even an explicit nil
func (o *ReconEntityDataInner) UnsetPaymentServiceCharge() {
	o.PaymentServiceCharge.Unset()
}

// GetPaymentServiceTax returns the PaymentServiceTax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetPaymentServiceTax() float32 {
	if o == nil || IsNil(o.PaymentServiceTax.Get()) {
		var ret float32
		return ret
	}
	return *o.PaymentServiceTax.Get()
}

// GetPaymentServiceTaxOk returns a tuple with the PaymentServiceTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetPaymentServiceTaxOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PaymentServiceTax.Get(), o.PaymentServiceTax.IsSet()
}

// HasPaymentServiceTax returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasPaymentServiceTax() bool {
	if o != nil && o.PaymentServiceTax.IsSet() {
		return true
	}

	return false
}

// SetPaymentServiceTax gets a reference to the given NullableFloat32 and assigns it to the PaymentServiceTax field.
func (o *ReconEntityDataInner) SetPaymentServiceTax(v float32) {
	o.PaymentServiceTax.Set(&v)
}
// SetPaymentServiceTaxNil sets the value for PaymentServiceTax to be an explicit nil
func (o *ReconEntityDataInner) SetPaymentServiceTaxNil() {
	o.PaymentServiceTax.Set(nil)
}

// UnsetPaymentServiceTax ensures that no value is present for PaymentServiceTax, not even an explicit nil
func (o *ReconEntityDataInner) UnsetPaymentServiceTax() {
	o.PaymentServiceTax.Unset()
}

// GetCfPaymentId returns the CfPaymentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetCfPaymentId() int64 {
	if o == nil || IsNil(o.CfPaymentId.Get()) {
		var ret int64
		return ret
	}
	return *o.CfPaymentId.Get()
}

// GetCfPaymentIdOk returns a tuple with the CfPaymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetCfPaymentIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CfPaymentId.Get(), o.CfPaymentId.IsSet()
}

// HasCfPaymentId returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasCfPaymentId() bool {
	if o != nil && o.CfPaymentId.IsSet() {
		return true
	}

	return false
}

// SetCfPaymentId gets a reference to the given NullableInt64 and assigns it to the CfPaymentId field.
func (o *ReconEntityDataInner) SetCfPaymentId(v int64) {
	o.CfPaymentId.Set(&v)
}
// SetCfPaymentIdNil sets the value for CfPaymentId to be an explicit nil
func (o *ReconEntityDataInner) SetCfPaymentIdNil() {
	o.CfPaymentId.Set(nil)
}

// UnsetCfPaymentId ensures that no value is present for CfPaymentId, not even an explicit nil
func (o *ReconEntityDataInner) UnsetCfPaymentId() {
	o.CfPaymentId.Unset()
}

// GetCfSettlementId returns the CfSettlementId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetCfSettlementId() int32 {
	if o == nil || IsNil(o.CfSettlementId.Get()) {
		var ret int32
		return ret
	}
	return *o.CfSettlementId.Get()
}

// GetCfSettlementIdOk returns a tuple with the CfSettlementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetCfSettlementIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CfSettlementId.Get(), o.CfSettlementId.IsSet()
}

// HasCfSettlementId returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasCfSettlementId() bool {
	if o != nil && o.CfSettlementId.IsSet() {
		return true
	}

	return false
}

// SetCfSettlementId gets a reference to the given NullableInt32 and assigns it to the CfSettlementId field.
func (o *ReconEntityDataInner) SetCfSettlementId(v int32) {
	o.CfSettlementId.Set(&v)
}
// SetCfSettlementIdNil sets the value for CfSettlementId to be an explicit nil
func (o *ReconEntityDataInner) SetCfSettlementIdNil() {
	o.CfSettlementId.Set(nil)
}

// UnsetCfSettlementId ensures that no value is present for CfSettlementId, not even an explicit nil
func (o *ReconEntityDataInner) UnsetCfSettlementId() {
	o.CfSettlementId.Unset()
}

// GetSettlementDate returns the SettlementDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetSettlementDate() string {
	if o == nil || IsNil(o.SettlementDate.Get()) {
		var ret string
		return ret
	}
	return *o.SettlementDate.Get()
}

// GetSettlementDateOk returns a tuple with the SettlementDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetSettlementDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SettlementDate.Get(), o.SettlementDate.IsSet()
}

// HasSettlementDate returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasSettlementDate() bool {
	if o != nil && o.SettlementDate.IsSet() {
		return true
	}

	return false
}

// SetSettlementDate gets a reference to the given NullableString and assigns it to the SettlementDate field.
func (o *ReconEntityDataInner) SetSettlementDate(v string) {
	o.SettlementDate.Set(&v)
}
// SetSettlementDateNil sets the value for SettlementDate to be an explicit nil
func (o *ReconEntityDataInner) SetSettlementDateNil() {
	o.SettlementDate.Set(nil)
}

// UnsetSettlementDate ensures that no value is present for SettlementDate, not even an explicit nil
func (o *ReconEntityDataInner) UnsetSettlementDate() {
	o.SettlementDate.Unset()
}

// GetSettlementUtr returns the SettlementUtr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetSettlementUtr() string {
	if o == nil || IsNil(o.SettlementUtr.Get()) {
		var ret string
		return ret
	}
	return *o.SettlementUtr.Get()
}

// GetSettlementUtrOk returns a tuple with the SettlementUtr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetSettlementUtrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SettlementUtr.Get(), o.SettlementUtr.IsSet()
}

// HasSettlementUtr returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasSettlementUtr() bool {
	if o != nil && o.SettlementUtr.IsSet() {
		return true
	}

	return false
}

// SetSettlementUtr gets a reference to the given NullableString and assigns it to the SettlementUtr field.
func (o *ReconEntityDataInner) SetSettlementUtr(v string) {
	o.SettlementUtr.Set(&v)
}
// SetSettlementUtrNil sets the value for SettlementUtr to be an explicit nil
func (o *ReconEntityDataInner) SetSettlementUtrNil() {
	o.SettlementUtr.Set(nil)
}

// UnsetSettlementUtr ensures that no value is present for SettlementUtr, not even an explicit nil
func (o *ReconEntityDataInner) UnsetSettlementUtr() {
	o.SettlementUtr.Unset()
}

// GetSplitServiceCharge returns the SplitServiceCharge field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetSplitServiceCharge() float32 {
	if o == nil || IsNil(o.SplitServiceCharge.Get()) {
		var ret float32
		return ret
	}
	return *o.SplitServiceCharge.Get()
}

// GetSplitServiceChargeOk returns a tuple with the SplitServiceCharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetSplitServiceChargeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SplitServiceCharge.Get(), o.SplitServiceCharge.IsSet()
}

// HasSplitServiceCharge returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasSplitServiceCharge() bool {
	if o != nil && o.SplitServiceCharge.IsSet() {
		return true
	}

	return false
}

// SetSplitServiceCharge gets a reference to the given NullableFloat32 and assigns it to the SplitServiceCharge field.
func (o *ReconEntityDataInner) SetSplitServiceCharge(v float32) {
	o.SplitServiceCharge.Set(&v)
}
// SetSplitServiceChargeNil sets the value for SplitServiceCharge to be an explicit nil
func (o *ReconEntityDataInner) SetSplitServiceChargeNil() {
	o.SplitServiceCharge.Set(nil)
}

// UnsetSplitServiceCharge ensures that no value is present for SplitServiceCharge, not even an explicit nil
func (o *ReconEntityDataInner) UnsetSplitServiceCharge() {
	o.SplitServiceCharge.Unset()
}

// GetSplitServiceTax returns the SplitServiceTax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetSplitServiceTax() float32 {
	if o == nil || IsNil(o.SplitServiceTax.Get()) {
		var ret float32
		return ret
	}
	return *o.SplitServiceTax.Get()
}

// GetSplitServiceTaxOk returns a tuple with the SplitServiceTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetSplitServiceTaxOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SplitServiceTax.Get(), o.SplitServiceTax.IsSet()
}

// HasSplitServiceTax returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasSplitServiceTax() bool {
	if o != nil && o.SplitServiceTax.IsSet() {
		return true
	}

	return false
}

// SetSplitServiceTax gets a reference to the given NullableFloat32 and assigns it to the SplitServiceTax field.
func (o *ReconEntityDataInner) SetSplitServiceTax(v float32) {
	o.SplitServiceTax.Set(&v)
}
// SetSplitServiceTaxNil sets the value for SplitServiceTax to be an explicit nil
func (o *ReconEntityDataInner) SetSplitServiceTaxNil() {
	o.SplitServiceTax.Set(nil)
}

// UnsetSplitServiceTax ensures that no value is present for SplitServiceTax, not even an explicit nil
func (o *ReconEntityDataInner) UnsetSplitServiceTax() {
	o.SplitServiceTax.Unset()
}

// GetVendorCommission returns the VendorCommission field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetVendorCommission() float32 {
	if o == nil || IsNil(o.VendorCommission.Get()) {
		var ret float32
		return ret
	}
	return *o.VendorCommission.Get()
}

// GetVendorCommissionOk returns a tuple with the VendorCommission field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetVendorCommissionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.VendorCommission.Get(), o.VendorCommission.IsSet()
}

// HasVendorCommission returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasVendorCommission() bool {
	if o != nil && o.VendorCommission.IsSet() {
		return true
	}

	return false
}

// SetVendorCommission gets a reference to the given NullableFloat32 and assigns it to the VendorCommission field.
func (o *ReconEntityDataInner) SetVendorCommission(v float32) {
	o.VendorCommission.Set(&v)
}
// SetVendorCommissionNil sets the value for VendorCommission to be an explicit nil
func (o *ReconEntityDataInner) SetVendorCommissionNil() {
	o.VendorCommission.Set(nil)
}

// UnsetVendorCommission ensures that no value is present for VendorCommission, not even an explicit nil
func (o *ReconEntityDataInner) UnsetVendorCommission() {
	o.VendorCommission.Unset()
}

// GetClosedInFavorOf returns the ClosedInFavorOf field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetClosedInFavorOf() string {
	if o == nil || IsNil(o.ClosedInFavorOf.Get()) {
		var ret string
		return ret
	}
	return *o.ClosedInFavorOf.Get()
}

// GetClosedInFavorOfOk returns a tuple with the ClosedInFavorOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetClosedInFavorOfOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClosedInFavorOf.Get(), o.ClosedInFavorOf.IsSet()
}

// HasClosedInFavorOf returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasClosedInFavorOf() bool {
	if o != nil && o.ClosedInFavorOf.IsSet() {
		return true
	}

	return false
}

// SetClosedInFavorOf gets a reference to the given NullableString and assigns it to the ClosedInFavorOf field.
func (o *ReconEntityDataInner) SetClosedInFavorOf(v string) {
	o.ClosedInFavorOf.Set(&v)
}
// SetClosedInFavorOfNil sets the value for ClosedInFavorOf to be an explicit nil
func (o *ReconEntityDataInner) SetClosedInFavorOfNil() {
	o.ClosedInFavorOf.Set(nil)
}

// UnsetClosedInFavorOf ensures that no value is present for ClosedInFavorOf, not even an explicit nil
func (o *ReconEntityDataInner) UnsetClosedInFavorOf() {
	o.ClosedInFavorOf.Unset()
}

// GetDisputeResolvedOn returns the DisputeResolvedOn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetDisputeResolvedOn() string {
	if o == nil || IsNil(o.DisputeResolvedOn.Get()) {
		var ret string
		return ret
	}
	return *o.DisputeResolvedOn.Get()
}

// GetDisputeResolvedOnOk returns a tuple with the DisputeResolvedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetDisputeResolvedOnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisputeResolvedOn.Get(), o.DisputeResolvedOn.IsSet()
}

// HasDisputeResolvedOn returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasDisputeResolvedOn() bool {
	if o != nil && o.DisputeResolvedOn.IsSet() {
		return true
	}

	return false
}

// SetDisputeResolvedOn gets a reference to the given NullableString and assigns it to the DisputeResolvedOn field.
func (o *ReconEntityDataInner) SetDisputeResolvedOn(v string) {
	o.DisputeResolvedOn.Set(&v)
}
// SetDisputeResolvedOnNil sets the value for DisputeResolvedOn to be an explicit nil
func (o *ReconEntityDataInner) SetDisputeResolvedOnNil() {
	o.DisputeResolvedOn.Set(nil)
}

// UnsetDisputeResolvedOn ensures that no value is present for DisputeResolvedOn, not even an explicit nil
func (o *ReconEntityDataInner) UnsetDisputeResolvedOn() {
	o.DisputeResolvedOn.Unset()
}

// GetDisputeCategory returns the DisputeCategory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetDisputeCategory() string {
	if o == nil || IsNil(o.DisputeCategory.Get()) {
		var ret string
		return ret
	}
	return *o.DisputeCategory.Get()
}

// GetDisputeCategoryOk returns a tuple with the DisputeCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetDisputeCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisputeCategory.Get(), o.DisputeCategory.IsSet()
}

// HasDisputeCategory returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasDisputeCategory() bool {
	if o != nil && o.DisputeCategory.IsSet() {
		return true
	}

	return false
}

// SetDisputeCategory gets a reference to the given NullableString and assigns it to the DisputeCategory field.
func (o *ReconEntityDataInner) SetDisputeCategory(v string) {
	o.DisputeCategory.Set(&v)
}
// SetDisputeCategoryNil sets the value for DisputeCategory to be an explicit nil
func (o *ReconEntityDataInner) SetDisputeCategoryNil() {
	o.DisputeCategory.Set(nil)
}

// UnsetDisputeCategory ensures that no value is present for DisputeCategory, not even an explicit nil
func (o *ReconEntityDataInner) UnsetDisputeCategory() {
	o.DisputeCategory.Unset()
}

// GetDisputeNote returns the DisputeNote field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetDisputeNote() string {
	if o == nil || IsNil(o.DisputeNote.Get()) {
		var ret string
		return ret
	}
	return *o.DisputeNote.Get()
}

// GetDisputeNoteOk returns a tuple with the DisputeNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetDisputeNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisputeNote.Get(), o.DisputeNote.IsSet()
}

// HasDisputeNote returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasDisputeNote() bool {
	if o != nil && o.DisputeNote.IsSet() {
		return true
	}

	return false
}

// SetDisputeNote gets a reference to the given NullableString and assigns it to the DisputeNote field.
func (o *ReconEntityDataInner) SetDisputeNote(v string) {
	o.DisputeNote.Set(&v)
}
// SetDisputeNoteNil sets the value for DisputeNote to be an explicit nil
func (o *ReconEntityDataInner) SetDisputeNoteNil() {
	o.DisputeNote.Set(nil)
}

// UnsetDisputeNote ensures that no value is present for DisputeNote, not even an explicit nil
func (o *ReconEntityDataInner) UnsetDisputeNote() {
	o.DisputeNote.Unset()
}

// GetRefundProcessedAt returns the RefundProcessedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetRefundProcessedAt() string {
	if o == nil || IsNil(o.RefundProcessedAt.Get()) {
		var ret string
		return ret
	}
	return *o.RefundProcessedAt.Get()
}

// GetRefundProcessedAtOk returns a tuple with the RefundProcessedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetRefundProcessedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RefundProcessedAt.Get(), o.RefundProcessedAt.IsSet()
}

// HasRefundProcessedAt returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasRefundProcessedAt() bool {
	if o != nil && o.RefundProcessedAt.IsSet() {
		return true
	}

	return false
}

// SetRefundProcessedAt gets a reference to the given NullableString and assigns it to the RefundProcessedAt field.
func (o *ReconEntityDataInner) SetRefundProcessedAt(v string) {
	o.RefundProcessedAt.Set(&v)
}
// SetRefundProcessedAtNil sets the value for RefundProcessedAt to be an explicit nil
func (o *ReconEntityDataInner) SetRefundProcessedAtNil() {
	o.RefundProcessedAt.Set(nil)
}

// UnsetRefundProcessedAt ensures that no value is present for RefundProcessedAt, not even an explicit nil
func (o *ReconEntityDataInner) UnsetRefundProcessedAt() {
	o.RefundProcessedAt.Unset()
}

// GetRefundArn returns the RefundArn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetRefundArn() string {
	if o == nil || IsNil(o.RefundArn.Get()) {
		var ret string
		return ret
	}
	return *o.RefundArn.Get()
}

// GetRefundArnOk returns a tuple with the RefundArn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetRefundArnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RefundArn.Get(), o.RefundArn.IsSet()
}

// HasRefundArn returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasRefundArn() bool {
	if o != nil && o.RefundArn.IsSet() {
		return true
	}

	return false
}

// SetRefundArn gets a reference to the given NullableString and assigns it to the RefundArn field.
func (o *ReconEntityDataInner) SetRefundArn(v string) {
	o.RefundArn.Set(&v)
}
// SetRefundArnNil sets the value for RefundArn to be an explicit nil
func (o *ReconEntityDataInner) SetRefundArnNil() {
	o.RefundArn.Set(nil)
}

// UnsetRefundArn ensures that no value is present for RefundArn, not even an explicit nil
func (o *ReconEntityDataInner) UnsetRefundArn() {
	o.RefundArn.Unset()
}

// GetRefundNote returns the RefundNote field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetRefundNote() string {
	if o == nil || IsNil(o.RefundNote.Get()) {
		var ret string
		return ret
	}
	return *o.RefundNote.Get()
}

// GetRefundNoteOk returns a tuple with the RefundNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetRefundNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RefundNote.Get(), o.RefundNote.IsSet()
}

// HasRefundNote returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasRefundNote() bool {
	if o != nil && o.RefundNote.IsSet() {
		return true
	}

	return false
}

// SetRefundNote gets a reference to the given NullableString and assigns it to the RefundNote field.
func (o *ReconEntityDataInner) SetRefundNote(v string) {
	o.RefundNote.Set(&v)
}
// SetRefundNoteNil sets the value for RefundNote to be an explicit nil
func (o *ReconEntityDataInner) SetRefundNoteNil() {
	o.RefundNote.Set(nil)
}

// UnsetRefundNote ensures that no value is present for RefundNote, not even an explicit nil
func (o *ReconEntityDataInner) UnsetRefundNote() {
	o.RefundNote.Unset()
}

// GetRefundId returns the RefundId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetRefundId() string {
	if o == nil || IsNil(o.RefundId.Get()) {
		var ret string
		return ret
	}
	return *o.RefundId.Get()
}

// GetRefundIdOk returns a tuple with the RefundId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetRefundIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RefundId.Get(), o.RefundId.IsSet()
}

// HasRefundId returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasRefundId() bool {
	if o != nil && o.RefundId.IsSet() {
		return true
	}

	return false
}

// SetRefundId gets a reference to the given NullableString and assigns it to the RefundId field.
func (o *ReconEntityDataInner) SetRefundId(v string) {
	o.RefundId.Set(&v)
}
// SetRefundIdNil sets the value for RefundId to be an explicit nil
func (o *ReconEntityDataInner) SetRefundIdNil() {
	o.RefundId.Set(nil)
}

// UnsetRefundId ensures that no value is present for RefundId, not even an explicit nil
func (o *ReconEntityDataInner) UnsetRefundId() {
	o.RefundId.Unset()
}

// GetAdjustmentRemarks returns the AdjustmentRemarks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetAdjustmentRemarks() string {
	if o == nil || IsNil(o.AdjustmentRemarks.Get()) {
		var ret string
		return ret
	}
	return *o.AdjustmentRemarks.Get()
}

// GetAdjustmentRemarksOk returns a tuple with the AdjustmentRemarks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetAdjustmentRemarksOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdjustmentRemarks.Get(), o.AdjustmentRemarks.IsSet()
}

// HasAdjustmentRemarks returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasAdjustmentRemarks() bool {
	if o != nil && o.AdjustmentRemarks.IsSet() {
		return true
	}

	return false
}

// SetAdjustmentRemarks gets a reference to the given NullableString and assigns it to the AdjustmentRemarks field.
func (o *ReconEntityDataInner) SetAdjustmentRemarks(v string) {
	o.AdjustmentRemarks.Set(&v)
}
// SetAdjustmentRemarksNil sets the value for AdjustmentRemarks to be an explicit nil
func (o *ReconEntityDataInner) SetAdjustmentRemarksNil() {
	o.AdjustmentRemarks.Set(nil)
}

// UnsetAdjustmentRemarks ensures that no value is present for AdjustmentRemarks, not even an explicit nil
func (o *ReconEntityDataInner) UnsetAdjustmentRemarks() {
	o.AdjustmentRemarks.Unset()
}

// GetAdjustment returns the Adjustment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetAdjustment() float32 {
	if o == nil || IsNil(o.Adjustment.Get()) {
		var ret float32
		return ret
	}
	return *o.Adjustment.Get()
}

// GetAdjustmentOk returns a tuple with the Adjustment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetAdjustmentOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Adjustment.Get(), o.Adjustment.IsSet()
}

// HasAdjustment returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasAdjustment() bool {
	if o != nil && o.Adjustment.IsSet() {
		return true
	}

	return false
}

// SetAdjustment gets a reference to the given NullableFloat32 and assigns it to the Adjustment field.
func (o *ReconEntityDataInner) SetAdjustment(v float32) {
	o.Adjustment.Set(&v)
}
// SetAdjustmentNil sets the value for Adjustment to be an explicit nil
func (o *ReconEntityDataInner) SetAdjustmentNil() {
	o.Adjustment.Set(nil)
}

// UnsetAdjustment ensures that no value is present for Adjustment, not even an explicit nil
func (o *ReconEntityDataInner) UnsetAdjustment() {
	o.Adjustment.Unset()
}

// GetServiceTax returns the ServiceTax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetServiceTax() float32 {
	if o == nil || IsNil(o.ServiceTax.Get()) {
		var ret float32
		return ret
	}
	return *o.ServiceTax.Get()
}

// GetServiceTaxOk returns a tuple with the ServiceTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetServiceTaxOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceTax.Get(), o.ServiceTax.IsSet()
}

// HasServiceTax returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasServiceTax() bool {
	if o != nil && o.ServiceTax.IsSet() {
		return true
	}

	return false
}

// SetServiceTax gets a reference to the given NullableFloat32 and assigns it to the ServiceTax field.
func (o *ReconEntityDataInner) SetServiceTax(v float32) {
	o.ServiceTax.Set(&v)
}
// SetServiceTaxNil sets the value for ServiceTax to be an explicit nil
func (o *ReconEntityDataInner) SetServiceTaxNil() {
	o.ServiceTax.Set(nil)
}

// UnsetServiceTax ensures that no value is present for ServiceTax, not even an explicit nil
func (o *ReconEntityDataInner) UnsetServiceTax() {
	o.ServiceTax.Unset()
}

// GetServiceCharge returns the ServiceCharge field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetServiceCharge() float32 {
	if o == nil || IsNil(o.ServiceCharge.Get()) {
		var ret float32
		return ret
	}
	return *o.ServiceCharge.Get()
}

// GetServiceChargeOk returns a tuple with the ServiceCharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetServiceChargeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceCharge.Get(), o.ServiceCharge.IsSet()
}

// HasServiceCharge returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasServiceCharge() bool {
	if o != nil && o.ServiceCharge.IsSet() {
		return true
	}

	return false
}

// SetServiceCharge gets a reference to the given NullableFloat32 and assigns it to the ServiceCharge field.
func (o *ReconEntityDataInner) SetServiceCharge(v float32) {
	o.ServiceCharge.Set(&v)
}
// SetServiceChargeNil sets the value for ServiceCharge to be an explicit nil
func (o *ReconEntityDataInner) SetServiceChargeNil() {
	o.ServiceCharge.Set(nil)
}

// UnsetServiceCharge ensures that no value is present for ServiceCharge, not even an explicit nil
func (o *ReconEntityDataInner) UnsetServiceCharge() {
	o.ServiceCharge.Unset()
}

// GetAmountSettled returns the AmountSettled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetAmountSettled() float32 {
	if o == nil || IsNil(o.AmountSettled.Get()) {
		var ret float32
		return ret
	}
	return *o.AmountSettled.Get()
}

// GetAmountSettledOk returns a tuple with the AmountSettled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetAmountSettledOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AmountSettled.Get(), o.AmountSettled.IsSet()
}

// HasAmountSettled returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasAmountSettled() bool {
	if o != nil && o.AmountSettled.IsSet() {
		return true
	}

	return false
}

// SetAmountSettled gets a reference to the given NullableFloat32 and assigns it to the AmountSettled field.
func (o *ReconEntityDataInner) SetAmountSettled(v float32) {
	o.AmountSettled.Set(&v)
}
// SetAmountSettledNil sets the value for AmountSettled to be an explicit nil
func (o *ReconEntityDataInner) SetAmountSettledNil() {
	o.AmountSettled.Set(nil)
}

// UnsetAmountSettled ensures that no value is present for AmountSettled, not even an explicit nil
func (o *ReconEntityDataInner) UnsetAmountSettled() {
	o.AmountSettled.Unset()
}

// GetPaymentFrom returns the PaymentFrom field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetPaymentFrom() string {
	if o == nil || IsNil(o.PaymentFrom.Get()) {
		var ret string
		return ret
	}
	return *o.PaymentFrom.Get()
}

// GetPaymentFromOk returns a tuple with the PaymentFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetPaymentFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PaymentFrom.Get(), o.PaymentFrom.IsSet()
}

// HasPaymentFrom returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasPaymentFrom() bool {
	if o != nil && o.PaymentFrom.IsSet() {
		return true
	}

	return false
}

// SetPaymentFrom gets a reference to the given NullableString and assigns it to the PaymentFrom field.
func (o *ReconEntityDataInner) SetPaymentFrom(v string) {
	o.PaymentFrom.Set(&v)
}
// SetPaymentFromNil sets the value for PaymentFrom to be an explicit nil
func (o *ReconEntityDataInner) SetPaymentFromNil() {
	o.PaymentFrom.Set(nil)
}

// UnsetPaymentFrom ensures that no value is present for PaymentFrom, not even an explicit nil
func (o *ReconEntityDataInner) UnsetPaymentFrom() {
	o.PaymentFrom.Unset()
}

// GetPaymentTill returns the PaymentTill field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetPaymentTill() string {
	if o == nil || IsNil(o.PaymentTill.Get()) {
		var ret string
		return ret
	}
	return *o.PaymentTill.Get()
}

// GetPaymentTillOk returns a tuple with the PaymentTill field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetPaymentTillOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PaymentTill.Get(), o.PaymentTill.IsSet()
}

// HasPaymentTill returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasPaymentTill() bool {
	if o != nil && o.PaymentTill.IsSet() {
		return true
	}

	return false
}

// SetPaymentTill gets a reference to the given NullableString and assigns it to the PaymentTill field.
func (o *ReconEntityDataInner) SetPaymentTill(v string) {
	o.PaymentTill.Set(&v)
}
// SetPaymentTillNil sets the value for PaymentTill to be an explicit nil
func (o *ReconEntityDataInner) SetPaymentTillNil() {
	o.PaymentTill.Set(nil)
}

// UnsetPaymentTill ensures that no value is present for PaymentTill, not even an explicit nil
func (o *ReconEntityDataInner) UnsetPaymentTill() {
	o.PaymentTill.Unset()
}

// GetReason returns the Reason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetReason() string {
	if o == nil || IsNil(o.Reason.Get()) {
		var ret string
		return ret
	}
	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// HasReason returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasReason() bool {
	if o != nil && o.Reason.IsSet() {
		return true
	}

	return false
}

// SetReason gets a reference to the given NullableString and assigns it to the Reason field.
func (o *ReconEntityDataInner) SetReason(v string) {
	o.Reason.Set(&v)
}
// SetReasonNil sets the value for Reason to be an explicit nil
func (o *ReconEntityDataInner) SetReasonNil() {
	o.Reason.Set(nil)
}

// UnsetReason ensures that no value is present for Reason, not even an explicit nil
func (o *ReconEntityDataInner) UnsetReason() {
	o.Reason.Unset()
}

// GetSettlementInitiatedOn returns the SettlementInitiatedOn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetSettlementInitiatedOn() string {
	if o == nil || IsNil(o.SettlementInitiatedOn.Get()) {
		var ret string
		return ret
	}
	return *o.SettlementInitiatedOn.Get()
}

// GetSettlementInitiatedOnOk returns a tuple with the SettlementInitiatedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetSettlementInitiatedOnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SettlementInitiatedOn.Get(), o.SettlementInitiatedOn.IsSet()
}

// HasSettlementInitiatedOn returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasSettlementInitiatedOn() bool {
	if o != nil && o.SettlementInitiatedOn.IsSet() {
		return true
	}

	return false
}

// SetSettlementInitiatedOn gets a reference to the given NullableString and assigns it to the SettlementInitiatedOn field.
func (o *ReconEntityDataInner) SetSettlementInitiatedOn(v string) {
	o.SettlementInitiatedOn.Set(&v)
}
// SetSettlementInitiatedOnNil sets the value for SettlementInitiatedOn to be an explicit nil
func (o *ReconEntityDataInner) SetSettlementInitiatedOnNil() {
	o.SettlementInitiatedOn.Set(nil)
}

// UnsetSettlementInitiatedOn ensures that no value is present for SettlementInitiatedOn, not even an explicit nil
func (o *ReconEntityDataInner) UnsetSettlementInitiatedOn() {
	o.SettlementInitiatedOn.Unset()
}

// GetSettlementType returns the SettlementType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetSettlementType() string {
	if o == nil || IsNil(o.SettlementType.Get()) {
		var ret string
		return ret
	}
	return *o.SettlementType.Get()
}

// GetSettlementTypeOk returns a tuple with the SettlementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetSettlementTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SettlementType.Get(), o.SettlementType.IsSet()
}

// HasSettlementType returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasSettlementType() bool {
	if o != nil && o.SettlementType.IsSet() {
		return true
	}

	return false
}

// SetSettlementType gets a reference to the given NullableString and assigns it to the SettlementType field.
func (o *ReconEntityDataInner) SetSettlementType(v string) {
	o.SettlementType.Set(&v)
}
// SetSettlementTypeNil sets the value for SettlementType to be an explicit nil
func (o *ReconEntityDataInner) SetSettlementTypeNil() {
	o.SettlementType.Set(nil)
}

// UnsetSettlementType ensures that no value is present for SettlementType, not even an explicit nil
func (o *ReconEntityDataInner) UnsetSettlementType() {
	o.SettlementType.Unset()
}

// GetSettlementCharge returns the SettlementCharge field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetSettlementCharge() float32 {
	if o == nil || IsNil(o.SettlementCharge.Get()) {
		var ret float32
		return ret
	}
	return *o.SettlementCharge.Get()
}

// GetSettlementChargeOk returns a tuple with the SettlementCharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetSettlementChargeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SettlementCharge.Get(), o.SettlementCharge.IsSet()
}

// HasSettlementCharge returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasSettlementCharge() bool {
	if o != nil && o.SettlementCharge.IsSet() {
		return true
	}

	return false
}

// SetSettlementCharge gets a reference to the given NullableFloat32 and assigns it to the SettlementCharge field.
func (o *ReconEntityDataInner) SetSettlementCharge(v float32) {
	o.SettlementCharge.Set(&v)
}
// SetSettlementChargeNil sets the value for SettlementCharge to be an explicit nil
func (o *ReconEntityDataInner) SetSettlementChargeNil() {
	o.SettlementCharge.Set(nil)
}

// UnsetSettlementCharge ensures that no value is present for SettlementCharge, not even an explicit nil
func (o *ReconEntityDataInner) UnsetSettlementCharge() {
	o.SettlementCharge.Unset()
}

// GetSettlementTax returns the SettlementTax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetSettlementTax() float32 {
	if o == nil || IsNil(o.SettlementTax.Get()) {
		var ret float32
		return ret
	}
	return *o.SettlementTax.Get()
}

// GetSettlementTaxOk returns a tuple with the SettlementTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetSettlementTaxOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SettlementTax.Get(), o.SettlementTax.IsSet()
}

// HasSettlementTax returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasSettlementTax() bool {
	if o != nil && o.SettlementTax.IsSet() {
		return true
	}

	return false
}

// SetSettlementTax gets a reference to the given NullableFloat32 and assigns it to the SettlementTax field.
func (o *ReconEntityDataInner) SetSettlementTax(v float32) {
	o.SettlementTax.Set(&v)
}
// SetSettlementTaxNil sets the value for SettlementTax to be an explicit nil
func (o *ReconEntityDataInner) SetSettlementTaxNil() {
	o.SettlementTax.Set(nil)
}

// UnsetSettlementTax ensures that no value is present for SettlementTax, not even an explicit nil
func (o *ReconEntityDataInner) UnsetSettlementTax() {
	o.SettlementTax.Unset()
}

// GetRemarks returns the Remarks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntityDataInner) GetRemarks() string {
	if o == nil || IsNil(o.Remarks.Get()) {
		var ret string
		return ret
	}
	return *o.Remarks.Get()
}

// GetRemarksOk returns a tuple with the Remarks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntityDataInner) GetRemarksOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Remarks.Get(), o.Remarks.IsSet()
}

// HasRemarks returns a boolean if a field has been set.
func (o *ReconEntityDataInner) HasRemarks() bool {
	if o != nil && o.Remarks.IsSet() {
		return true
	}

	return false
}

// SetRemarks gets a reference to the given NullableString and assigns it to the Remarks field.
func (o *ReconEntityDataInner) SetRemarks(v string) {
	o.Remarks.Set(&v)
}
// SetRemarksNil sets the value for Remarks to be an explicit nil
func (o *ReconEntityDataInner) SetRemarksNil() {
	o.Remarks.Set(nil)
}

// UnsetRemarks ensures that no value is present for Remarks, not even an explicit nil
func (o *ReconEntityDataInner) UnsetRemarks() {
	o.Remarks.Unset()
}

func (o ReconEntityDataInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReconEntityDataInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventId) {
		toSerialize["event_id"] = o.EventId
	}
	if !IsNil(o.EventType) {
		toSerialize["event_type"] = o.EventType
	}
	if !IsNil(o.EventSettlementAmount) {
		toSerialize["event_settlement_amount"] = o.EventSettlementAmount
	}
	if !IsNil(o.EventAmount) {
		toSerialize["event_amount"] = o.EventAmount
	}
	if o.SaleType.IsSet() {
		toSerialize["sale_type"] = o.SaleType.Get()
	}
	if o.EventStatus.IsSet() {
		toSerialize["event_status"] = o.EventStatus.Get()
	}
	if !IsNil(o.Entity) {
		toSerialize["entity"] = o.Entity
	}
	if !IsNil(o.EventTime) {
		toSerialize["event_time"] = o.EventTime
	}
	if o.EventCurrency.IsSet() {
		toSerialize["event_currency"] = o.EventCurrency.Get()
	}
	if o.OrderId.IsSet() {
		toSerialize["order_id"] = o.OrderId.Get()
	}
	if o.OrderAmount.IsSet() {
		toSerialize["order_amount"] = o.OrderAmount.Get()
	}
	if o.CustomerPhone.IsSet() {
		toSerialize["customer_phone"] = o.CustomerPhone.Get()
	}
	if o.CustomerEmail.IsSet() {
		toSerialize["customer_email"] = o.CustomerEmail.Get()
	}
	if o.CustomerName.IsSet() {
		toSerialize["customer_name"] = o.CustomerName.Get()
	}
	if o.PaymentAmount.IsSet() {
		toSerialize["payment_amount"] = o.PaymentAmount.Get()
	}
	if o.PaymentUtr.IsSet() {
		toSerialize["payment_utr"] = o.PaymentUtr.Get()
	}
	if o.PaymentTime.IsSet() {
		toSerialize["payment_time"] = o.PaymentTime.Get()
	}
	if o.PaymentServiceCharge.IsSet() {
		toSerialize["payment_service_charge"] = o.PaymentServiceCharge.Get()
	}
	if o.PaymentServiceTax.IsSet() {
		toSerialize["payment_service_tax"] = o.PaymentServiceTax.Get()
	}
	if o.CfPaymentId.IsSet() {
		toSerialize["cf_payment_id"] = o.CfPaymentId.Get()
	}
	if o.CfSettlementId.IsSet() {
		toSerialize["cf_settlement_id"] = o.CfSettlementId.Get()
	}
	if o.SettlementDate.IsSet() {
		toSerialize["settlement_date"] = o.SettlementDate.Get()
	}
	if o.SettlementUtr.IsSet() {
		toSerialize["settlement_utr"] = o.SettlementUtr.Get()
	}
	if o.SplitServiceCharge.IsSet() {
		toSerialize["split_service_charge"] = o.SplitServiceCharge.Get()
	}
	if o.SplitServiceTax.IsSet() {
		toSerialize["split_service_tax"] = o.SplitServiceTax.Get()
	}
	if o.VendorCommission.IsSet() {
		toSerialize["vendor_commission"] = o.VendorCommission.Get()
	}
	if o.ClosedInFavorOf.IsSet() {
		toSerialize["closed_in_favor_of"] = o.ClosedInFavorOf.Get()
	}
	if o.DisputeResolvedOn.IsSet() {
		toSerialize["dispute_resolved_on"] = o.DisputeResolvedOn.Get()
	}
	if o.DisputeCategory.IsSet() {
		toSerialize["dispute_category"] = o.DisputeCategory.Get()
	}
	if o.DisputeNote.IsSet() {
		toSerialize["dispute_note"] = o.DisputeNote.Get()
	}
	if o.RefundProcessedAt.IsSet() {
		toSerialize["refund_processed_at"] = o.RefundProcessedAt.Get()
	}
	if o.RefundArn.IsSet() {
		toSerialize["refund_arn"] = o.RefundArn.Get()
	}
	if o.RefundNote.IsSet() {
		toSerialize["refund_note"] = o.RefundNote.Get()
	}
	if o.RefundId.IsSet() {
		toSerialize["refund_id"] = o.RefundId.Get()
	}
	if o.AdjustmentRemarks.IsSet() {
		toSerialize["adjustment_remarks"] = o.AdjustmentRemarks.Get()
	}
	if o.Adjustment.IsSet() {
		toSerialize["adjustment"] = o.Adjustment.Get()
	}
	if o.ServiceTax.IsSet() {
		toSerialize["service_tax"] = o.ServiceTax.Get()
	}
	if o.ServiceCharge.IsSet() {
		toSerialize["service_charge"] = o.ServiceCharge.Get()
	}
	if o.AmountSettled.IsSet() {
		toSerialize["amount_settled"] = o.AmountSettled.Get()
	}
	if o.PaymentFrom.IsSet() {
		toSerialize["payment_from"] = o.PaymentFrom.Get()
	}
	if o.PaymentTill.IsSet() {
		toSerialize["payment_till"] = o.PaymentTill.Get()
	}
	if o.Reason.IsSet() {
		toSerialize["reason"] = o.Reason.Get()
	}
	if o.SettlementInitiatedOn.IsSet() {
		toSerialize["settlement_initiated_on"] = o.SettlementInitiatedOn.Get()
	}
	if o.SettlementType.IsSet() {
		toSerialize["settlement_type"] = o.SettlementType.Get()
	}
	if o.SettlementCharge.IsSet() {
		toSerialize["settlement_charge"] = o.SettlementCharge.Get()
	}
	if o.SettlementTax.IsSet() {
		toSerialize["settlement_tax"] = o.SettlementTax.Get()
	}
	if o.Remarks.IsSet() {
		toSerialize["remarks"] = o.Remarks.Get()
	}
	return toSerialize, nil
}

type NullableReconEntityDataInner struct {
	value *ReconEntityDataInner
	isSet bool
}

func (v NullableReconEntityDataInner) Get() *ReconEntityDataInner {
	return v.value
}

func (v *NullableReconEntityDataInner) Set(val *ReconEntityDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableReconEntityDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableReconEntityDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReconEntityDataInner(val *ReconEntityDataInner) *NullableReconEntityDataInner {
	return &NullableReconEntityDataInner{value: val, isSet: true}
}

func (v NullableReconEntityDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReconEntityDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


