/*
Cashfree Payment Gateway APIs

Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

API version: 2022-09-01
Contact: developers@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg

import (
	"encoding/json"
	"fmt"
)

// OfferValidationsPaymentMethod - struct for OfferValidationsPaymentMethod
type OfferValidationsPaymentMethod struct {
	OfferAll *OfferAll
	OfferCard *OfferCard
	OfferEMI *OfferEMI
	OfferNB *OfferNB
	OfferPaylater *OfferPaylater
	OfferUPI *OfferUPI
	OfferWallet *OfferWallet
}

// OfferAllAsOfferValidationsPaymentMethod is a convenience function that returns OfferAll wrapped in OfferValidationsPaymentMethod
func OfferAllAsOfferValidationsPaymentMethod(v *OfferAll) OfferValidationsPaymentMethod {
	return OfferValidationsPaymentMethod{
		OfferAll: v,
	}
}

// OfferCardAsOfferValidationsPaymentMethod is a convenience function that returns OfferCard wrapped in OfferValidationsPaymentMethod
func OfferCardAsOfferValidationsPaymentMethod(v *OfferCard) OfferValidationsPaymentMethod {
	return OfferValidationsPaymentMethod{
		OfferCard: v,
	}
}

// OfferEMIAsOfferValidationsPaymentMethod is a convenience function that returns OfferEMI wrapped in OfferValidationsPaymentMethod
func OfferEMIAsOfferValidationsPaymentMethod(v *OfferEMI) OfferValidationsPaymentMethod {
	return OfferValidationsPaymentMethod{
		OfferEMI: v,
	}
}

// OfferNBAsOfferValidationsPaymentMethod is a convenience function that returns OfferNB wrapped in OfferValidationsPaymentMethod
func OfferNBAsOfferValidationsPaymentMethod(v *OfferNB) OfferValidationsPaymentMethod {
	return OfferValidationsPaymentMethod{
		OfferNB: v,
	}
}

// OfferPaylaterAsOfferValidationsPaymentMethod is a convenience function that returns OfferPaylater wrapped in OfferValidationsPaymentMethod
func OfferPaylaterAsOfferValidationsPaymentMethod(v *OfferPaylater) OfferValidationsPaymentMethod {
	return OfferValidationsPaymentMethod{
		OfferPaylater: v,
	}
}

// OfferUPIAsOfferValidationsPaymentMethod is a convenience function that returns OfferUPI wrapped in OfferValidationsPaymentMethod
func OfferUPIAsOfferValidationsPaymentMethod(v *OfferUPI) OfferValidationsPaymentMethod {
	return OfferValidationsPaymentMethod{
		OfferUPI: v,
	}
}

// OfferWalletAsOfferValidationsPaymentMethod is a convenience function that returns OfferWallet wrapped in OfferValidationsPaymentMethod
func OfferWalletAsOfferValidationsPaymentMethod(v *OfferWallet) OfferValidationsPaymentMethod {
	return OfferValidationsPaymentMethod{
		OfferWallet: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *OfferValidationsPaymentMethod) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'OfferAll'
	if jsonDict["type"] == "OfferAll" {
		// try to unmarshal JSON data into OfferAll
		err = json.Unmarshal(data, &dst.OfferAll)
		if err == nil {
			return nil // data stored in dst.OfferAll, return on the first match
		} else {
			dst.OfferAll = nil
			return fmt.Errorf("failed to unmarshal OfferValidationsPaymentMethod as OfferAll: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OfferCard'
	if jsonDict["type"] == "OfferCard" {
		// try to unmarshal JSON data into OfferCard
		err = json.Unmarshal(data, &dst.OfferCard)
		if err == nil {
			return nil // data stored in dst.OfferCard, return on the first match
		} else {
			dst.OfferCard = nil
			return fmt.Errorf("failed to unmarshal OfferValidationsPaymentMethod as OfferCard: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OfferEMI'
	if jsonDict["type"] == "OfferEMI" {
		// try to unmarshal JSON data into OfferEMI
		err = json.Unmarshal(data, &dst.OfferEMI)
		if err == nil {
			return nil // data stored in dst.OfferEMI, return on the first match
		} else {
			dst.OfferEMI = nil
			return fmt.Errorf("failed to unmarshal OfferValidationsPaymentMethod as OfferEMI: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OfferNB'
	if jsonDict["type"] == "OfferNB" {
		// try to unmarshal JSON data into OfferNB
		err = json.Unmarshal(data, &dst.OfferNB)
		if err == nil {
			return nil // data stored in dst.OfferNB, return on the first match
		} else {
			dst.OfferNB = nil
			return fmt.Errorf("failed to unmarshal OfferValidationsPaymentMethod as OfferNB: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OfferPaylater'
	if jsonDict["type"] == "OfferPaylater" {
		// try to unmarshal JSON data into OfferPaylater
		err = json.Unmarshal(data, &dst.OfferPaylater)
		if err == nil {
			return nil // data stored in dst.OfferPaylater, return on the first match
		} else {
			dst.OfferPaylater = nil
			return fmt.Errorf("failed to unmarshal OfferValidationsPaymentMethod as OfferPaylater: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OfferUPI'
	if jsonDict["type"] == "OfferUPI" {
		// try to unmarshal JSON data into OfferUPI
		err = json.Unmarshal(data, &dst.OfferUPI)
		if err == nil {
			return nil // data stored in dst.OfferUPI, return on the first match
		} else {
			dst.OfferUPI = nil
			return fmt.Errorf("failed to unmarshal OfferValidationsPaymentMethod as OfferUPI: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OfferWallet'
	if jsonDict["type"] == "OfferWallet" {
		// try to unmarshal JSON data into OfferWallet
		err = json.Unmarshal(data, &dst.OfferWallet)
		if err == nil {
			return nil // data stored in dst.OfferWallet, return on the first match
		} else {
			dst.OfferWallet = nil
			return fmt.Errorf("failed to unmarshal OfferValidationsPaymentMethod as OfferWallet: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OfferValidationsPaymentMethod) MarshalJSON() ([]byte, error) {
	if src.OfferAll != nil {
		return json.Marshal(&src.OfferAll)
	}

	if src.OfferCard != nil {
		return json.Marshal(&src.OfferCard)
	}

	if src.OfferEMI != nil {
		return json.Marshal(&src.OfferEMI)
	}

	if src.OfferNB != nil {
		return json.Marshal(&src.OfferNB)
	}

	if src.OfferPaylater != nil {
		return json.Marshal(&src.OfferPaylater)
	}

	if src.OfferUPI != nil {
		return json.Marshal(&src.OfferUPI)
	}

	if src.OfferWallet != nil {
		return json.Marshal(&src.OfferWallet)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OfferValidationsPaymentMethod) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.OfferAll != nil {
		return obj.OfferAll
	}

	if obj.OfferCard != nil {
		return obj.OfferCard
	}

	if obj.OfferEMI != nil {
		return obj.OfferEMI
	}

	if obj.OfferNB != nil {
		return obj.OfferNB
	}

	if obj.OfferPaylater != nil {
		return obj.OfferPaylater
	}

	if obj.OfferUPI != nil {
		return obj.OfferUPI
	}

	if obj.OfferWallet != nil {
		return obj.OfferWallet
	}

	// all schemas are nil
	return nil
}

type NullableOfferValidationsPaymentMethod struct {
	value *OfferValidationsPaymentMethod
	isSet bool
}

func (v NullableOfferValidationsPaymentMethod) Get() *OfferValidationsPaymentMethod {
	return v.value
}

func (v *NullableOfferValidationsPaymentMethod) Set(val *OfferValidationsPaymentMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferValidationsPaymentMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferValidationsPaymentMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferValidationsPaymentMethod(val *OfferValidationsPaymentMethod) *NullableOfferValidationsPaymentMethod {
	return &NullableOfferValidationsPaymentMethod{value: val, isSet: true}
}

func (v NullableOfferValidationsPaymentMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferValidationsPaymentMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


