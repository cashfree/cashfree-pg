/*
Cashfree Payment Gateway APIs

Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

API version: 2022-09-01
Contact: developers@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg

import (
	"encoding/json"
)

// checks if the ReconEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReconEntity{}

// ReconEntity Settlement detailed recon response
type ReconEntity struct {
	// Specifies from where the next set of settlement details should be fetched.
	Cursor NullableString `json:"cursor,omitempty"`
	// Number of settlements you want to fetch in the next iteration.
	Limit *int32 `json:"limit,omitempty"`
	Data []ReconEntityDataInner `json:"data,omitempty"`
}

// NewReconEntity instantiates a new ReconEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReconEntity() *ReconEntity {
	this := ReconEntity{}
	return &this
}

// NewReconEntityWithDefaults instantiates a new ReconEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReconEntityWithDefaults() *ReconEntity {
	this := ReconEntity{}
	return &this
}

// GetCursor returns the Cursor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReconEntity) GetCursor() string {
	if o == nil || IsNil(o.Cursor.Get()) {
		var ret string
		return ret
	}
	return *o.Cursor.Get()
}

// GetCursorOk returns a tuple with the Cursor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReconEntity) GetCursorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cursor.Get(), o.Cursor.IsSet()
}

// HasCursor returns a boolean if a field has been set.
func (o *ReconEntity) HasCursor() bool {
	if o != nil && o.Cursor.IsSet() {
		return true
	}

	return false
}

// SetCursor gets a reference to the given NullableString and assigns it to the Cursor field.
func (o *ReconEntity) SetCursor(v string) {
	o.Cursor.Set(&v)
}
// SetCursorNil sets the value for Cursor to be an explicit nil
func (o *ReconEntity) SetCursorNil() {
	o.Cursor.Set(nil)
}

// UnsetCursor ensures that no value is present for Cursor, not even an explicit nil
func (o *ReconEntity) UnsetCursor() {
	o.Cursor.Unset()
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *ReconEntity) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconEntity) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *ReconEntity) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *ReconEntity) SetLimit(v int32) {
	o.Limit = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ReconEntity) GetData() []ReconEntityDataInner {
	if o == nil || IsNil(o.Data) {
		var ret []ReconEntityDataInner
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReconEntity) GetDataOk() ([]ReconEntityDataInner, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ReconEntity) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []ReconEntityDataInner and assigns it to the Data field.
func (o *ReconEntity) SetData(v []ReconEntityDataInner) {
	o.Data = v
}

func (o ReconEntity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReconEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Cursor.IsSet() {
		toSerialize["cursor"] = o.Cursor.Get()
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableReconEntity struct {
	value *ReconEntity
	isSet bool
}

func (v NullableReconEntity) Get() *ReconEntity {
	return v.value
}

func (v *NullableReconEntity) Set(val *ReconEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableReconEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableReconEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReconEntity(val *ReconEntity) *NullableReconEntity {
	return &NullableReconEntity{value: val, isSet: true}
}

func (v NullableReconEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReconEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


