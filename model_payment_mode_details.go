/*
Cashfree Payment Gateway APIs

Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

API version: 2022-09-01
Contact: developers@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg

import (
	"encoding/json"
)

// checks if the PaymentModeDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentModeDetails{}

// PaymentModeDetails payment mode eligiblity object
type PaymentModeDetails struct {
	Nick *string `json:"nick,omitempty"`
	Display *string `json:"display,omitempty"`
	Eligibility *bool `json:"eligibility,omitempty"`
	Code *float32 `json:"code,omitempty"`
}

// NewPaymentModeDetails instantiates a new PaymentModeDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentModeDetails() *PaymentModeDetails {
	this := PaymentModeDetails{}
	return &this
}

// NewPaymentModeDetailsWithDefaults instantiates a new PaymentModeDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentModeDetailsWithDefaults() *PaymentModeDetails {
	this := PaymentModeDetails{}
	return &this
}

// GetNick returns the Nick field value if set, zero value otherwise.
func (o *PaymentModeDetails) GetNick() string {
	if o == nil || IsNil(o.Nick) {
		var ret string
		return ret
	}
	return *o.Nick
}

// GetNickOk returns a tuple with the Nick field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentModeDetails) GetNickOk() (*string, bool) {
	if o == nil || IsNil(o.Nick) {
		return nil, false
	}
	return o.Nick, true
}

// HasNick returns a boolean if a field has been set.
func (o *PaymentModeDetails) HasNick() bool {
	if o != nil && !IsNil(o.Nick) {
		return true
	}

	return false
}

// SetNick gets a reference to the given string and assigns it to the Nick field.
func (o *PaymentModeDetails) SetNick(v string) {
	o.Nick = &v
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *PaymentModeDetails) GetDisplay() string {
	if o == nil || IsNil(o.Display) {
		var ret string
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentModeDetails) GetDisplayOk() (*string, bool) {
	if o == nil || IsNil(o.Display) {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *PaymentModeDetails) HasDisplay() bool {
	if o != nil && !IsNil(o.Display) {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given string and assigns it to the Display field.
func (o *PaymentModeDetails) SetDisplay(v string) {
	o.Display = &v
}

// GetEligibility returns the Eligibility field value if set, zero value otherwise.
func (o *PaymentModeDetails) GetEligibility() bool {
	if o == nil || IsNil(o.Eligibility) {
		var ret bool
		return ret
	}
	return *o.Eligibility
}

// GetEligibilityOk returns a tuple with the Eligibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentModeDetails) GetEligibilityOk() (*bool, bool) {
	if o == nil || IsNil(o.Eligibility) {
		return nil, false
	}
	return o.Eligibility, true
}

// HasEligibility returns a boolean if a field has been set.
func (o *PaymentModeDetails) HasEligibility() bool {
	if o != nil && !IsNil(o.Eligibility) {
		return true
	}

	return false
}

// SetEligibility gets a reference to the given bool and assigns it to the Eligibility field.
func (o *PaymentModeDetails) SetEligibility(v bool) {
	o.Eligibility = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *PaymentModeDetails) GetCode() float32 {
	if o == nil || IsNil(o.Code) {
		var ret float32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentModeDetails) GetCodeOk() (*float32, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *PaymentModeDetails) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given float32 and assigns it to the Code field.
func (o *PaymentModeDetails) SetCode(v float32) {
	o.Code = &v
}

func (o PaymentModeDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentModeDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Nick) {
		toSerialize["nick"] = o.Nick
	}
	if !IsNil(o.Display) {
		toSerialize["display"] = o.Display
	}
	if !IsNil(o.Eligibility) {
		toSerialize["eligibility"] = o.Eligibility
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	return toSerialize, nil
}

type NullablePaymentModeDetails struct {
	value *PaymentModeDetails
	isSet bool
}

func (v NullablePaymentModeDetails) Get() *PaymentModeDetails {
	return v.value
}

func (v *NullablePaymentModeDetails) Set(val *PaymentModeDetails) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentModeDetails) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentModeDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentModeDetails(val *PaymentModeDetails) *NullablePaymentModeDetails {
	return &NullablePaymentModeDetails{value: val, isSet: true}
}

func (v NullablePaymentModeDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentModeDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


