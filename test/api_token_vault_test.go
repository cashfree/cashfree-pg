/*
Cashfree Payment Gateway APIs

Testing TokenVaultAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package cashfree_pg

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	cashfree "github.com/cashfree/cashfree-pg"
)

func Test_cashfree_pg_TokenVaultAPIService(t *testing.T) {

	configuration := cashfree.NewConfiguration()
	apiClient := cashfree.NewAPIClient(configuration)

	t.Run("Test TokenVaultAPIService PGCustomerDeleteInstrument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var instrumentId string

		resp, httpRes, err := apiClient.TokenVaultAPI.PGCustomerDeleteInstrument(context.Background(), customerId, instrumentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokenVaultAPIService PGCustomerFetchInstrument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var instrumentId string

		resp, httpRes, err := apiClient.TokenVaultAPI.PGCustomerFetchInstrument(context.Background(), customerId, instrumentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokenVaultAPIService PGCustomerFetchInstruments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string

		resp, httpRes, err := apiClient.TokenVaultAPI.PGCustomerFetchInstruments(context.Background(), customerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokenVaultAPIService PGCustomerInstrumentsFetchCryptogram", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var customerId string
		var instrumentId string

		resp, httpRes, err := apiClient.TokenVaultAPI.PGCustomerInstrumentsFetchCryptogram(context.Background(), customerId, instrumentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
