/*
Cashfree Payment Gateway APIs

Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

API version: 2023-08-01
Contact: developers@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg

import (
	"encoding/json"
	"strings"
	"fmt"
)

// CreateSubscriptionPaymentRequestPaymentMethod - Payment method. Can be one of [\"upi\", \"enach\", \"pnach\", \"card\"]
type CreateSubscriptionPaymentRequestPaymentMethod struct {
	CARD *CARD
	ENACH *ENACH
	PNACH *PNACH
	UPI *UPI
}

// CARDAsCreateSubscriptionPaymentRequestPaymentMethod is a convenience function that returns CARD wrapped in CreateSubscriptionPaymentRequestPaymentMethod
func CARDAsCreateSubscriptionPaymentRequestPaymentMethod(v *CARD) CreateSubscriptionPaymentRequestPaymentMethod {
	return CreateSubscriptionPaymentRequestPaymentMethod{
		CARD: v,
	}
}

// ENACHAsCreateSubscriptionPaymentRequestPaymentMethod is a convenience function that returns ENACH wrapped in CreateSubscriptionPaymentRequestPaymentMethod
func ENACHAsCreateSubscriptionPaymentRequestPaymentMethod(v *ENACH) CreateSubscriptionPaymentRequestPaymentMethod {
	return CreateSubscriptionPaymentRequestPaymentMethod{
		ENACH: v,
	}
}

// PNACHAsCreateSubscriptionPaymentRequestPaymentMethod is a convenience function that returns PNACH wrapped in CreateSubscriptionPaymentRequestPaymentMethod
func PNACHAsCreateSubscriptionPaymentRequestPaymentMethod(v *PNACH) CreateSubscriptionPaymentRequestPaymentMethod {
	return CreateSubscriptionPaymentRequestPaymentMethod{
		PNACH: v,
	}
}

// UPIAsCreateSubscriptionPaymentRequestPaymentMethod is a convenience function that returns UPI wrapped in CreateSubscriptionPaymentRequestPaymentMethod
func UPIAsCreateSubscriptionPaymentRequestPaymentMethod(v *UPI) CreateSubscriptionPaymentRequestPaymentMethod {
	return CreateSubscriptionPaymentRequestPaymentMethod{
		UPI: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateSubscriptionPaymentRequestPaymentMethod) UnmarshalJSON(data []byte) error {
		var err error





	match := 0


	// try to unmarshal data into CARD

	err = json.Unmarshal(data, &dst.CARD)

	if err == nil {

		jsonCARD, _ := json.Marshal(dst.CARD)

		if strings.Contains(string(jsonCARD), "{}") || strings.Contains(string(jsonCARD), "null") { // empty struct

			dst.CARD = nil

		} else {

			match++

		}

	} else {

		dst.CARD = nil

	}


	// try to unmarshal data into ENACH

	err = json.Unmarshal(data, &dst.ENACH)

	if err == nil {

		jsonENACH, _ := json.Marshal(dst.ENACH)

		if strings.Contains(string(jsonENACH), "{}") || strings.Contains(string(jsonENACH), "null") { // empty struct

			dst.ENACH = nil

		} else {

			match++

		}

	} else {

		dst.ENACH = nil

	}


	// try to unmarshal data into PNACH

	err = json.Unmarshal(data, &dst.PNACH)

	if err == nil {

		jsonPNACH, _ := json.Marshal(dst.PNACH)

		if strings.Contains(string(jsonPNACH), "{}") || strings.Contains(string(jsonPNACH), "null") { // empty struct

			dst.PNACH = nil

		} else {

			match++

		}

	} else {

		dst.PNACH = nil

	}


	// try to unmarshal data into UPI

	err = json.Unmarshal(data, &dst.UPI)

	if err == nil {

		jsonUPI, _ := json.Marshal(dst.UPI)

		if strings.Contains(string(jsonUPI), "{}") || strings.Contains(string(jsonUPI), "null") { // empty struct

			dst.UPI = nil

		} else {

			match++

		}

	} else {

		dst.UPI = nil

	}


	if match > 1 { // more than 1 match

		// reset to nil


		dst.CARD = nil


		dst.ENACH = nil


		dst.PNACH = nil


		dst.UPI = nil


		return fmt.Errorf("data matches more than one schema in oneOf(CreateSubscriptionPaymentRequestPaymentMethod)")

	} else if match == 1 {

		return nil // exactly one match

	} else { // no match

		return fmt.Errorf("data failed to match schemas in oneOf(CreateSubscriptionPaymentRequestPaymentMethod)")

	}



}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateSubscriptionPaymentRequestPaymentMethod) MarshalJSON() ([]byte, error) {
	if src.CARD != nil {
		return json.Marshal(&src.CARD)
	}

	if src.ENACH != nil {
		return json.Marshal(&src.ENACH)
	}

	if src.PNACH != nil {
		return json.Marshal(&src.PNACH)
	}

	if src.UPI != nil {
		return json.Marshal(&src.UPI)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateSubscriptionPaymentRequestPaymentMethod) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CARD != nil {
		return obj.CARD
	}

	if obj.ENACH != nil {
		return obj.ENACH
	}

	if obj.PNACH != nil {
		return obj.PNACH
	}

	if obj.UPI != nil {
		return obj.UPI
	}

	// all schemas are nil
	return nil
}



