/*
Cashfree Payment Gateway APIs

Cashfree's Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.

API version: 2023-08-01
Contact: developers@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg

import (
	"encoding/json"
	"strings"
	"fmt"
)

// CreateSubscriptionPaymentRequestPaymentMethod - Payment method. Can be one of [\"upi\", \"enach\", \"pnach\", \"card\"]
type CreateSubscriptionPaymentRequestPaymentMethod struct {
	CreateSubscriptionPaymentRequestCard *CreateSubscriptionPaymentRequestCard
	CreateSubscriptionPaymentRequestEnack *CreateSubscriptionPaymentRequestEnack
	CreateSubscriptionPaymentRequestPnach *CreateSubscriptionPaymentRequestPnach
	CreateSubscriptonPaymentRequestUpi *CreateSubscriptonPaymentRequestUpi
}

// CreateSubscriptionPaymentRequestCardAsCreateSubscriptionPaymentRequestPaymentMethod is a convenience function that returns CreateSubscriptionPaymentRequestCard wrapped in CreateSubscriptionPaymentRequestPaymentMethod
func CreateSubscriptionPaymentRequestCardAsCreateSubscriptionPaymentRequestPaymentMethod(v *CreateSubscriptionPaymentRequestCard) CreateSubscriptionPaymentRequestPaymentMethod {
	return CreateSubscriptionPaymentRequestPaymentMethod{
		CreateSubscriptionPaymentRequestCard: v,
	}
}

// CreateSubscriptionPaymentRequestEnackAsCreateSubscriptionPaymentRequestPaymentMethod is a convenience function that returns CreateSubscriptionPaymentRequestEnack wrapped in CreateSubscriptionPaymentRequestPaymentMethod
func CreateSubscriptionPaymentRequestEnackAsCreateSubscriptionPaymentRequestPaymentMethod(v *CreateSubscriptionPaymentRequestEnack) CreateSubscriptionPaymentRequestPaymentMethod {
	return CreateSubscriptionPaymentRequestPaymentMethod{
		CreateSubscriptionPaymentRequestEnack: v,
	}
}

// CreateSubscriptionPaymentRequestPnachAsCreateSubscriptionPaymentRequestPaymentMethod is a convenience function that returns CreateSubscriptionPaymentRequestPnach wrapped in CreateSubscriptionPaymentRequestPaymentMethod
func CreateSubscriptionPaymentRequestPnachAsCreateSubscriptionPaymentRequestPaymentMethod(v *CreateSubscriptionPaymentRequestPnach) CreateSubscriptionPaymentRequestPaymentMethod {
	return CreateSubscriptionPaymentRequestPaymentMethod{
		CreateSubscriptionPaymentRequestPnach: v,
	}
}

// CreateSubscriptonPaymentRequestUpiAsCreateSubscriptionPaymentRequestPaymentMethod is a convenience function that returns CreateSubscriptonPaymentRequestUpi wrapped in CreateSubscriptionPaymentRequestPaymentMethod
func CreateSubscriptonPaymentRequestUpiAsCreateSubscriptionPaymentRequestPaymentMethod(v *CreateSubscriptonPaymentRequestUpi) CreateSubscriptionPaymentRequestPaymentMethod {
	return CreateSubscriptionPaymentRequestPaymentMethod{
		CreateSubscriptonPaymentRequestUpi: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateSubscriptionPaymentRequestPaymentMethod) UnmarshalJSON(data []byte) error {
		var err error





	match := 0


	// try to unmarshal data into CreateSubscriptionPaymentRequestCard

	err = json.Unmarshal(data, &dst.CreateSubscriptionPaymentRequestCard)

	if err == nil {

		jsonCreateSubscriptionPaymentRequestCard, _ := json.Marshal(dst.CreateSubscriptionPaymentRequestCard)

		if strings.Contains(string(jsonCreateSubscriptionPaymentRequestCard), "{}") || strings.Contains(string(jsonCreateSubscriptionPaymentRequestCard), "null") { // empty struct

			dst.CreateSubscriptionPaymentRequestCard = nil

		} else {

			match++

		}

	} else {

		dst.CreateSubscriptionPaymentRequestCard = nil

	}


	// try to unmarshal data into CreateSubscriptionPaymentRequestEnack

	err = json.Unmarshal(data, &dst.CreateSubscriptionPaymentRequestEnack)

	if err == nil {

		jsonCreateSubscriptionPaymentRequestEnack, _ := json.Marshal(dst.CreateSubscriptionPaymentRequestEnack)

		if strings.Contains(string(jsonCreateSubscriptionPaymentRequestEnack), "{}") || strings.Contains(string(jsonCreateSubscriptionPaymentRequestEnack), "null") { // empty struct

			dst.CreateSubscriptionPaymentRequestEnack = nil

		} else {

			match++

		}

	} else {

		dst.CreateSubscriptionPaymentRequestEnack = nil

	}


	// try to unmarshal data into CreateSubscriptionPaymentRequestPnach

	err = json.Unmarshal(data, &dst.CreateSubscriptionPaymentRequestPnach)

	if err == nil {

		jsonCreateSubscriptionPaymentRequestPnach, _ := json.Marshal(dst.CreateSubscriptionPaymentRequestPnach)

		if strings.Contains(string(jsonCreateSubscriptionPaymentRequestPnach), "{}") || strings.Contains(string(jsonCreateSubscriptionPaymentRequestPnach), "null") { // empty struct

			dst.CreateSubscriptionPaymentRequestPnach = nil

		} else {

			match++

		}

	} else {

		dst.CreateSubscriptionPaymentRequestPnach = nil

	}


	// try to unmarshal data into CreateSubscriptonPaymentRequestUpi

	err = json.Unmarshal(data, &dst.CreateSubscriptonPaymentRequestUpi)

	if err == nil {

		jsonCreateSubscriptonPaymentRequestUpi, _ := json.Marshal(dst.CreateSubscriptonPaymentRequestUpi)

		if strings.Contains(string(jsonCreateSubscriptonPaymentRequestUpi), "{}") || strings.Contains(string(jsonCreateSubscriptonPaymentRequestUpi), "null") { // empty struct

			dst.CreateSubscriptonPaymentRequestUpi = nil

		} else {

			match++

		}

	} else {

		dst.CreateSubscriptonPaymentRequestUpi = nil

	}


	if match > 1 { // more than 1 match

		// reset to nil


		dst.CreateSubscriptionPaymentRequestCard = nil


		dst.CreateSubscriptionPaymentRequestEnack = nil


		dst.CreateSubscriptionPaymentRequestPnach = nil


		dst.CreateSubscriptonPaymentRequestUpi = nil


		return fmt.Errorf("data matches more than one schema in oneOf(CreateSubscriptionPaymentRequestPaymentMethod)")

	} else if match == 1 {

		return nil // exactly one match

	} else { // no match

		return fmt.Errorf("data failed to match schemas in oneOf(CreateSubscriptionPaymentRequestPaymentMethod)")

	}



}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateSubscriptionPaymentRequestPaymentMethod) MarshalJSON() ([]byte, error) {
	if src.CreateSubscriptionPaymentRequestCard != nil {
		return json.Marshal(&src.CreateSubscriptionPaymentRequestCard)
	}

	if src.CreateSubscriptionPaymentRequestEnack != nil {
		return json.Marshal(&src.CreateSubscriptionPaymentRequestEnack)
	}

	if src.CreateSubscriptionPaymentRequestPnach != nil {
		return json.Marshal(&src.CreateSubscriptionPaymentRequestPnach)
	}

	if src.CreateSubscriptonPaymentRequestUpi != nil {
		return json.Marshal(&src.CreateSubscriptonPaymentRequestUpi)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateSubscriptionPaymentRequestPaymentMethod) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CreateSubscriptionPaymentRequestCard != nil {
		return obj.CreateSubscriptionPaymentRequestCard
	}

	if obj.CreateSubscriptionPaymentRequestEnack != nil {
		return obj.CreateSubscriptionPaymentRequestEnack
	}

	if obj.CreateSubscriptionPaymentRequestPnach != nil {
		return obj.CreateSubscriptionPaymentRequestPnach
	}

	if obj.CreateSubscriptonPaymentRequestUpi != nil {
		return obj.CreateSubscriptonPaymentRequestUpi
	}

	// all schemas are nil
	return nil
}



