/*
New Payment Gateway APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2022-01-01
Contact: nextgenapi@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg_sdk_go

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

// PaymentsApiService PaymentsApi service
type PaymentsApiService service

type ApiGetPaymentbyIdRequest struct {
	ctx context.Context
	ApiService *PaymentsApiService
	xClientId *string
	xClientSecret *string
	orderId string
	cfPaymentId int64
	xApiVersion *string
	xIdempotencyReplayed *bool
	xIdempotencyKey *string
	xRequestId *string
}

func (r ApiGetPaymentbyIdRequest) XClientId(xClientId string) ApiGetPaymentbyIdRequest {
	r.xClientId = &xClientId
	return r
}
func (r ApiGetPaymentbyIdRequest) XClientSecret(xClientSecret string) ApiGetPaymentbyIdRequest {
	r.xClientSecret = &xClientSecret
	return r
}
func (r ApiGetPaymentbyIdRequest) XApiVersion(xApiVersion string) ApiGetPaymentbyIdRequest {
	r.xApiVersion = &xApiVersion
	return r
}
func (r ApiGetPaymentbyIdRequest) XIdempotencyReplayed(xIdempotencyReplayed bool) ApiGetPaymentbyIdRequest {
	r.xIdempotencyReplayed = &xIdempotencyReplayed
	return r
}
func (r ApiGetPaymentbyIdRequest) XIdempotencyKey(xIdempotencyKey string) ApiGetPaymentbyIdRequest {
	r.xIdempotencyKey = &xIdempotencyKey
	return r
}
func (r ApiGetPaymentbyIdRequest) XRequestId(xRequestId string) ApiGetPaymentbyIdRequest {
	r.xRequestId = &xRequestId
	return r
}

func (r ApiGetPaymentbyIdRequest) Execute() (*CFPaymentsEntity, *http.Response, error) {
	return r.ApiService.GetPaymentbyIdExecute(r)
}

/*
GetPaymentbyId Get Payment by ID

Use this API to view payment details of an order for a payment ID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orderId
 @param cfPaymentId
 @return ApiGetPaymentbyIdRequest
*/
func (a *PaymentsApiService) GetPaymentbyId(ctx context.Context, orderId string, cfPaymentId int64) ApiGetPaymentbyIdRequest {
	return ApiGetPaymentbyIdRequest{
		ApiService: a,
		ctx: ctx,
		orderId: orderId,
		cfPaymentId: cfPaymentId,
	}
}

// Execute executes the request
//  @return CFPaymentsEntity
func (a *PaymentsApiService) GetPaymentbyIdExecute(r ApiGetPaymentbyIdRequest) (*CFPaymentsEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CFPaymentsEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentsApiService.GetPaymentbyId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/orders/{order_id}/payments/{cf_payment_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"order_id"+"}", url.PathEscape(parameterToString(r.orderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cf_payment_id"+"}", url.PathEscape(parameterToString(r.cfPaymentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xClientId == nil {
		return localVarReturnValue, nil, reportError("xClientId is required and must be specified")
	}
	if r.xClientSecret == nil {
		return localVarReturnValue, nil, reportError("xClientSecret is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["x-client-id"] = parameterToString(*r.xClientId, "")
	localVarHeaderParams["x-client-secret"] = parameterToString(*r.xClientSecret, "")
	if r.xApiVersion != nil {
		localVarHeaderParams["x-api-version"] = parameterToString(*r.xApiVersion, "")
	}
	if r.xIdempotencyReplayed != nil {
		localVarHeaderParams["x-idempotency-replayed"] = parameterToString(*r.xIdempotencyReplayed, "")
	}
	if r.xIdempotencyKey != nil {
		localVarHeaderParams["x-idempotency-key"] = parameterToString(*r.xIdempotencyKey, "")
	}
	if r.xRequestId != nil {
		localVarHeaderParams["x-request-id"] = parameterToString(*r.xRequestId, "")
	}
	localVarHeaderParams[XPlatform] = XPlatformValue
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v CFError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPaymentsfororderRequest struct {
	ctx context.Context
	ApiService *PaymentsApiService
	xClientId *string
	xClientSecret *string
	orderId string
	xApiVersion *string
	xIdempotencyReplayed *bool
	xIdempotencyKey *string
	xRequestId *string
}

func (r ApiGetPaymentsfororderRequest) XClientId(xClientId string) ApiGetPaymentsfororderRequest {
	r.xClientId = &xClientId
	return r
}
func (r ApiGetPaymentsfororderRequest) XClientSecret(xClientSecret string) ApiGetPaymentsfororderRequest {
	r.xClientSecret = &xClientSecret
	return r
}
func (r ApiGetPaymentsfororderRequest) XApiVersion(xApiVersion string) ApiGetPaymentsfororderRequest {
	r.xApiVersion = &xApiVersion
	return r
}
func (r ApiGetPaymentsfororderRequest) XIdempotencyReplayed(xIdempotencyReplayed bool) ApiGetPaymentsfororderRequest {
	r.xIdempotencyReplayed = &xIdempotencyReplayed
	return r
}
func (r ApiGetPaymentsfororderRequest) XIdempotencyKey(xIdempotencyKey string) ApiGetPaymentsfororderRequest {
	r.xIdempotencyKey = &xIdempotencyKey
	return r
}
func (r ApiGetPaymentsfororderRequest) XRequestId(xRequestId string) ApiGetPaymentsfororderRequest {
	r.xRequestId = &xRequestId
	return r
}

func (r ApiGetPaymentsfororderRequest) Execute() ([]CFPaymentsEntity, *http.Response, error) {
	return r.ApiService.GetPaymentsfororderExecute(r)
}

/*
GetPaymentsfororder Get Payments for an Order

Use this API to view all payment details for an order.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orderId
 @return ApiGetPaymentsfororderRequest
*/
func (a *PaymentsApiService) GetPaymentsfororder(ctx context.Context, orderId string) ApiGetPaymentsfororderRequest {
	return ApiGetPaymentsfororderRequest{
		ApiService: a,
		ctx: ctx,
		orderId: orderId,
	}
}

// Execute executes the request
//  @return []CFPaymentsEntity
func (a *PaymentsApiService) GetPaymentsfororderExecute(r ApiGetPaymentsfororderRequest) ([]CFPaymentsEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CFPaymentsEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentsApiService.GetPaymentsfororder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/orders/{order_id}/payments"
	localVarPath = strings.Replace(localVarPath, "{"+"order_id"+"}", url.PathEscape(parameterToString(r.orderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xClientId == nil {
		return localVarReturnValue, nil, reportError("xClientId is required and must be specified")
	}
	if r.xClientSecret == nil {
		return localVarReturnValue, nil, reportError("xClientSecret is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["x-client-id"] = parameterToString(*r.xClientId, "")
	localVarHeaderParams["x-client-secret"] = parameterToString(*r.xClientSecret, "")
	if r.xApiVersion != nil {
		localVarHeaderParams["x-api-version"] = parameterToString(*r.xApiVersion, "")
	}
	if r.xIdempotencyReplayed != nil {
		localVarHeaderParams["x-idempotency-replayed"] = parameterToString(*r.xIdempotencyReplayed, "")
	}
	if r.xIdempotencyKey != nil {
		localVarHeaderParams["x-idempotency-key"] = parameterToString(*r.xIdempotencyKey, "")
	}
	if r.xRequestId != nil {
		localVarHeaderParams["x-request-id"] = parameterToString(*r.xRequestId, "")
	}
	localVarHeaderParams[XPlatform] = XPlatformValue
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v CFError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
