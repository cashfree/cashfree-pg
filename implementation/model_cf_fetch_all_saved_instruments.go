/*
New Payment Gateway APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2022-01-01
Contact: nextgenapi@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg_sdk_go

import (
	"encoding/json"
)

// CFFetchAllSavedInstruments struct for CFFetchAllSavedInstruments
type CFFetchAllSavedInstruments struct {
	// customer_id for which the instrument was saved
	CustomerId *string `json:"customer_id,omitempty"`
	// cf_payment_id of the successful transaction done while saving instrument
	AfaReference *int32 `json:"afa_reference,omitempty"`
	// saved instrument id
	InstrumentId *string `json:"instrument_id,omitempty"`
	// Type of the saved instrument
	InstrumentType *string `json:"instrument_type,omitempty"`
	// Unique id for the saved instrument
	InstrumentUid *string `json:"instrument_uid,omitempty"`
	// masked card number displayed to the customer
	InstrumentDisplay *string `json:"instrument_display,omitempty"`
	// status of the saved instrument
	InstrumentStatus *string `json:"instrument_status,omitempty"`
	// timestamp at which instrument was saved
	CreatedAt *string `json:"created_at,omitempty"`
	InstrumentMeta *CFSavedInstrumentMeta `json:"instrument_meta,omitempty"`
}

// NewCFFetchAllSavedInstruments instantiates a new CFFetchAllSavedInstruments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCFFetchAllSavedInstruments() *CFFetchAllSavedInstruments {
	this := CFFetchAllSavedInstruments{}
	return &this
}

// NewCFFetchAllSavedInstrumentsWithDefaults instantiates a new CFFetchAllSavedInstruments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCFFetchAllSavedInstrumentsWithDefaults() *CFFetchAllSavedInstruments {
	this := CFFetchAllSavedInstruments{}
	return &this
}

// GetCustomerId returns the CustomerId field value if set, zero value otherwise.
func (o *CFFetchAllSavedInstruments) GetCustomerId() string {
	if o == nil || o.CustomerId == nil {
		var ret string
		return ret
	}
	return *o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CFFetchAllSavedInstruments) GetCustomerIdOk() (*string, bool) {
	if o == nil || o.CustomerId == nil {
		return nil, false
	}
	return o.CustomerId, true
}

// HasCustomerId returns a boolean if a field has been set.
func (o *CFFetchAllSavedInstruments) HasCustomerId() bool {
	if o != nil && o.CustomerId != nil {
		return true
	}

	return false
}

// SetCustomerId gets a reference to the given string and assigns it to the CustomerId field.
func (o *CFFetchAllSavedInstruments) SetCustomerId(v string) {
	o.CustomerId = &v
}

// GetAfaReference returns the AfaReference field value if set, zero value otherwise.
func (o *CFFetchAllSavedInstruments) GetAfaReference() int32 {
	if o == nil || o.AfaReference == nil {
		var ret int32
		return ret
	}
	return *o.AfaReference
}

// GetAfaReferenceOk returns a tuple with the AfaReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CFFetchAllSavedInstruments) GetAfaReferenceOk() (*int32, bool) {
	if o == nil || o.AfaReference == nil {
		return nil, false
	}
	return o.AfaReference, true
}

// HasAfaReference returns a boolean if a field has been set.
func (o *CFFetchAllSavedInstruments) HasAfaReference() bool {
	if o != nil && o.AfaReference != nil {
		return true
	}

	return false
}

// SetAfaReference gets a reference to the given int32 and assigns it to the AfaReference field.
func (o *CFFetchAllSavedInstruments) SetAfaReference(v int32) {
	o.AfaReference = &v
}

// GetInstrumentId returns the InstrumentId field value if set, zero value otherwise.
func (o *CFFetchAllSavedInstruments) GetInstrumentId() string {
	if o == nil || o.InstrumentId == nil {
		var ret string
		return ret
	}
	return *o.InstrumentId
}

// GetInstrumentIdOk returns a tuple with the InstrumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CFFetchAllSavedInstruments) GetInstrumentIdOk() (*string, bool) {
	if o == nil || o.InstrumentId == nil {
		return nil, false
	}
	return o.InstrumentId, true
}

// HasInstrumentId returns a boolean if a field has been set.
func (o *CFFetchAllSavedInstruments) HasInstrumentId() bool {
	if o != nil && o.InstrumentId != nil {
		return true
	}

	return false
}

// SetInstrumentId gets a reference to the given string and assigns it to the InstrumentId field.
func (o *CFFetchAllSavedInstruments) SetInstrumentId(v string) {
	o.InstrumentId = &v
}

// GetInstrumentType returns the InstrumentType field value if set, zero value otherwise.
func (o *CFFetchAllSavedInstruments) GetInstrumentType() string {
	if o == nil || o.InstrumentType == nil {
		var ret string
		return ret
	}
	return *o.InstrumentType
}

// GetInstrumentTypeOk returns a tuple with the InstrumentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CFFetchAllSavedInstruments) GetInstrumentTypeOk() (*string, bool) {
	if o == nil || o.InstrumentType == nil {
		return nil, false
	}
	return o.InstrumentType, true
}

// HasInstrumentType returns a boolean if a field has been set.
func (o *CFFetchAllSavedInstruments) HasInstrumentType() bool {
	if o != nil && o.InstrumentType != nil {
		return true
	}

	return false
}

// SetInstrumentType gets a reference to the given string and assigns it to the InstrumentType field.
func (o *CFFetchAllSavedInstruments) SetInstrumentType(v string) {
	o.InstrumentType = &v
}

// GetInstrumentUid returns the InstrumentUid field value if set, zero value otherwise.
func (o *CFFetchAllSavedInstruments) GetInstrumentUid() string {
	if o == nil || o.InstrumentUid == nil {
		var ret string
		return ret
	}
	return *o.InstrumentUid
}

// GetInstrumentUidOk returns a tuple with the InstrumentUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CFFetchAllSavedInstruments) GetInstrumentUidOk() (*string, bool) {
	if o == nil || o.InstrumentUid == nil {
		return nil, false
	}
	return o.InstrumentUid, true
}

// HasInstrumentUid returns a boolean if a field has been set.
func (o *CFFetchAllSavedInstruments) HasInstrumentUid() bool {
	if o != nil && o.InstrumentUid != nil {
		return true
	}

	return false
}

// SetInstrumentUid gets a reference to the given string and assigns it to the InstrumentUid field.
func (o *CFFetchAllSavedInstruments) SetInstrumentUid(v string) {
	o.InstrumentUid = &v
}

// GetInstrumentDisplay returns the InstrumentDisplay field value if set, zero value otherwise.
func (o *CFFetchAllSavedInstruments) GetInstrumentDisplay() string {
	if o == nil || o.InstrumentDisplay == nil {
		var ret string
		return ret
	}
	return *o.InstrumentDisplay
}

// GetInstrumentDisplayOk returns a tuple with the InstrumentDisplay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CFFetchAllSavedInstruments) GetInstrumentDisplayOk() (*string, bool) {
	if o == nil || o.InstrumentDisplay == nil {
		return nil, false
	}
	return o.InstrumentDisplay, true
}

// HasInstrumentDisplay returns a boolean if a field has been set.
func (o *CFFetchAllSavedInstruments) HasInstrumentDisplay() bool {
	if o != nil && o.InstrumentDisplay != nil {
		return true
	}

	return false
}

// SetInstrumentDisplay gets a reference to the given string and assigns it to the InstrumentDisplay field.
func (o *CFFetchAllSavedInstruments) SetInstrumentDisplay(v string) {
	o.InstrumentDisplay = &v
}

// GetInstrumentStatus returns the InstrumentStatus field value if set, zero value otherwise.
func (o *CFFetchAllSavedInstruments) GetInstrumentStatus() string {
	if o == nil || o.InstrumentStatus == nil {
		var ret string
		return ret
	}
	return *o.InstrumentStatus
}

// GetInstrumentStatusOk returns a tuple with the InstrumentStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CFFetchAllSavedInstruments) GetInstrumentStatusOk() (*string, bool) {
	if o == nil || o.InstrumentStatus == nil {
		return nil, false
	}
	return o.InstrumentStatus, true
}

// HasInstrumentStatus returns a boolean if a field has been set.
func (o *CFFetchAllSavedInstruments) HasInstrumentStatus() bool {
	if o != nil && o.InstrumentStatus != nil {
		return true
	}

	return false
}

// SetInstrumentStatus gets a reference to the given string and assigns it to the InstrumentStatus field.
func (o *CFFetchAllSavedInstruments) SetInstrumentStatus(v string) {
	o.InstrumentStatus = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *CFFetchAllSavedInstruments) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CFFetchAllSavedInstruments) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *CFFetchAllSavedInstruments) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *CFFetchAllSavedInstruments) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetInstrumentMeta returns the InstrumentMeta field value if set, zero value otherwise.
func (o *CFFetchAllSavedInstruments) GetInstrumentMeta() CFSavedInstrumentMeta {
	if o == nil || o.InstrumentMeta == nil {
		var ret CFSavedInstrumentMeta
		return ret
	}
	return *o.InstrumentMeta
}

// GetInstrumentMetaOk returns a tuple with the InstrumentMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CFFetchAllSavedInstruments) GetInstrumentMetaOk() (*CFSavedInstrumentMeta, bool) {
	if o == nil || o.InstrumentMeta == nil {
		return nil, false
	}
	return o.InstrumentMeta, true
}

// HasInstrumentMeta returns a boolean if a field has been set.
func (o *CFFetchAllSavedInstruments) HasInstrumentMeta() bool {
	if o != nil && o.InstrumentMeta != nil {
		return true
	}

	return false
}

// SetInstrumentMeta gets a reference to the given CFSavedInstrumentMeta and assigns it to the InstrumentMeta field.
func (o *CFFetchAllSavedInstruments) SetInstrumentMeta(v CFSavedInstrumentMeta) {
	o.InstrumentMeta = &v
}

func (o CFFetchAllSavedInstruments) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CustomerId != nil {
		toSerialize["customer_id"] = o.CustomerId
	}
	if o.AfaReference != nil {
		toSerialize["afa_reference"] = o.AfaReference
	}
	if o.InstrumentId != nil {
		toSerialize["instrument_id"] = o.InstrumentId
	}
	if o.InstrumentType != nil {
		toSerialize["instrument_type"] = o.InstrumentType
	}
	if o.InstrumentUid != nil {
		toSerialize["instrument_uid"] = o.InstrumentUid
	}
	if o.InstrumentDisplay != nil {
		toSerialize["instrument_display"] = o.InstrumentDisplay
	}
	if o.InstrumentStatus != nil {
		toSerialize["instrument_status"] = o.InstrumentStatus
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.InstrumentMeta != nil {
		toSerialize["instrument_meta"] = o.InstrumentMeta
	}
	return json.Marshal(toSerialize)
}

type NullableCFFetchAllSavedInstruments struct {
	value *CFFetchAllSavedInstruments
	isSet bool
}

func (v NullableCFFetchAllSavedInstruments) Get() *CFFetchAllSavedInstruments {
	return v.value
}

func (v *NullableCFFetchAllSavedInstruments) Set(val *CFFetchAllSavedInstruments) {
	v.value = val
	v.isSet = true
}

func (v NullableCFFetchAllSavedInstruments) IsSet() bool {
	return v.isSet
}

func (v *NullableCFFetchAllSavedInstruments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCFFetchAllSavedInstruments(val *CFFetchAllSavedInstruments) *NullableCFFetchAllSavedInstruments {
	return &NullableCFFetchAllSavedInstruments{value: val, isSet: true}
}

func (v NullableCFFetchAllSavedInstruments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCFFetchAllSavedInstruments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


