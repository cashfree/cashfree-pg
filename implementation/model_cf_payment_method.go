/*
New Payment Gateway APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2022-01-01
Contact: nextgenapi@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg_sdk_go

import (
	"encoding/json"
	"fmt"
)

// CFPaymentMethod - struct for CFPaymentMethod
type CFPaymentMethod struct {
	CFAppPayment *CFAppPayment
	CFCardPayment *CFCardPayment
	CFCardlessEMIPayment *CFCardlessEMIPayment
	CFEMIPayment *CFEMIPayment
	CFNetbankingPayment *CFNetbankingPayment
	CFPaylaterPayment *CFPaylaterPayment
	CFUPIPayment *CFUPIPayment
}

// CFAppPaymentAsCFPaymentMethod is a convenience function that returns CFAppPayment wrapped in CFPaymentMethod
func CFAppPaymentAsCFPaymentMethod(v *CFAppPayment) CFPaymentMethod {
	return CFPaymentMethod{
		CFAppPayment: v,
	}
}

// CFCardPaymentAsCFPaymentMethod is a convenience function that returns CFCardPayment wrapped in CFPaymentMethod
func CFCardPaymentAsCFPaymentMethod(v *CFCardPayment) CFPaymentMethod {
	return CFPaymentMethod{
		CFCardPayment: v,
	}
}

// CFCardlessEMIPaymentAsCFPaymentMethod is a convenience function that returns CFCardlessEMIPayment wrapped in CFPaymentMethod
func CFCardlessEMIPaymentAsCFPaymentMethod(v *CFCardlessEMIPayment) CFPaymentMethod {
	return CFPaymentMethod{
		CFCardlessEMIPayment: v,
	}
}

// CFEMIPaymentAsCFPaymentMethod is a convenience function that returns CFEMIPayment wrapped in CFPaymentMethod
func CFEMIPaymentAsCFPaymentMethod(v *CFEMIPayment) CFPaymentMethod {
	return CFPaymentMethod{
		CFEMIPayment: v,
	}
}

// CFNetbankingPaymentAsCFPaymentMethod is a convenience function that returns CFNetbankingPayment wrapped in CFPaymentMethod
func CFNetbankingPaymentAsCFPaymentMethod(v *CFNetbankingPayment) CFPaymentMethod {
	return CFPaymentMethod{
		CFNetbankingPayment: v,
	}
}

// CFPaylaterPaymentAsCFPaymentMethod is a convenience function that returns CFPaylaterPayment wrapped in CFPaymentMethod
func CFPaylaterPaymentAsCFPaymentMethod(v *CFPaylaterPayment) CFPaymentMethod {
	return CFPaymentMethod{
		CFPaylaterPayment: v,
	}
}

// CFUPIPaymentAsCFPaymentMethod is a convenience function that returns CFUPIPayment wrapped in CFPaymentMethod
func CFUPIPaymentAsCFPaymentMethod(v *CFUPIPayment) CFPaymentMethod {
	return CFPaymentMethod{
		CFUPIPayment: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CFPaymentMethod) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CFAppPayment
	err = newStrictDecoder(data).Decode(&dst.CFAppPayment)
	if err == nil {
		jsonCFAppPayment, _ := json.Marshal(dst.CFAppPayment)
		if string(jsonCFAppPayment) == "{}" { // empty struct
			dst.CFAppPayment = nil
		} else {
			match++
		}
	} else {
		dst.CFAppPayment = nil
	}

	// try to unmarshal data into CFCardPayment
	err = newStrictDecoder(data).Decode(&dst.CFCardPayment)
	if err == nil {
		jsonCFCardPayment, _ := json.Marshal(dst.CFCardPayment)
		if string(jsonCFCardPayment) == "{}" { // empty struct
			dst.CFCardPayment = nil
		} else {
			match++
		}
	} else {
		dst.CFCardPayment = nil
	}

	// try to unmarshal data into CFCardlessEMIPayment
	err = newStrictDecoder(data).Decode(&dst.CFCardlessEMIPayment)
	if err == nil {
		jsonCFCardlessEMIPayment, _ := json.Marshal(dst.CFCardlessEMIPayment)
		if string(jsonCFCardlessEMIPayment) == "{}" { // empty struct
			dst.CFCardlessEMIPayment = nil
		} else {
			match++
		}
	} else {
		dst.CFCardlessEMIPayment = nil
	}

	// try to unmarshal data into CFEMIPayment
	err = newStrictDecoder(data).Decode(&dst.CFEMIPayment)
	if err == nil {
		jsonCFEMIPayment, _ := json.Marshal(dst.CFEMIPayment)
		if string(jsonCFEMIPayment) == "{}" { // empty struct
			dst.CFEMIPayment = nil
		} else {
			match++
		}
	} else {
		dst.CFEMIPayment = nil
	}

	// try to unmarshal data into CFNetbankingPayment
	err = newStrictDecoder(data).Decode(&dst.CFNetbankingPayment)
	if err == nil {
		jsonCFNetbankingPayment, _ := json.Marshal(dst.CFNetbankingPayment)
		if string(jsonCFNetbankingPayment) == "{}" { // empty struct
			dst.CFNetbankingPayment = nil
		} else {
			match++
		}
	} else {
		dst.CFNetbankingPayment = nil
	}

	// try to unmarshal data into CFPaylaterPayment
	err = newStrictDecoder(data).Decode(&dst.CFPaylaterPayment)
	if err == nil {
		jsonCFPaylaterPayment, _ := json.Marshal(dst.CFPaylaterPayment)
		if string(jsonCFPaylaterPayment) == "{}" { // empty struct
			dst.CFPaylaterPayment = nil
		} else {
			match++
		}
	} else {
		dst.CFPaylaterPayment = nil
	}

	// try to unmarshal data into CFUPIPayment
	err = newStrictDecoder(data).Decode(&dst.CFUPIPayment)
	if err == nil {
		jsonCFUPIPayment, _ := json.Marshal(dst.CFUPIPayment)
		if string(jsonCFUPIPayment) == "{}" { // empty struct
			dst.CFUPIPayment = nil
		} else {
			match++
		}
	} else {
		dst.CFUPIPayment = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CFAppPayment = nil
		dst.CFCardPayment = nil
		dst.CFCardlessEMIPayment = nil
		dst.CFEMIPayment = nil
		dst.CFNetbankingPayment = nil
		dst.CFPaylaterPayment = nil
		dst.CFUPIPayment = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(CFPaymentMethod)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(CFPaymentMethod)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CFPaymentMethod) MarshalJSON() ([]byte, error) {
	if src.CFAppPayment != nil {
		return json.Marshal(&src.CFAppPayment)
	}

	if src.CFCardPayment != nil {
		return json.Marshal(&src.CFCardPayment)
	}

	if src.CFCardlessEMIPayment != nil {
		return json.Marshal(&src.CFCardlessEMIPayment)
	}

	if src.CFEMIPayment != nil {
		return json.Marshal(&src.CFEMIPayment)
	}

	if src.CFNetbankingPayment != nil {
		return json.Marshal(&src.CFNetbankingPayment)
	}

	if src.CFPaylaterPayment != nil {
		return json.Marshal(&src.CFPaylaterPayment)
	}

	if src.CFUPIPayment != nil {
		return json.Marshal(&src.CFUPIPayment)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CFPaymentMethod) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CFAppPayment != nil {
		return obj.CFAppPayment
	}

	if obj.CFCardPayment != nil {
		return obj.CFCardPayment
	}

	if obj.CFCardlessEMIPayment != nil {
		return obj.CFCardlessEMIPayment
	}

	if obj.CFEMIPayment != nil {
		return obj.CFEMIPayment
	}

	if obj.CFNetbankingPayment != nil {
		return obj.CFNetbankingPayment
	}

	if obj.CFPaylaterPayment != nil {
		return obj.CFPaylaterPayment
	}

	if obj.CFUPIPayment != nil {
		return obj.CFUPIPayment
	}

	// all schemas are nil
	return nil
}

type NullableCFPaymentMethod struct {
	value *CFPaymentMethod
	isSet bool
}

func (v NullableCFPaymentMethod) Get() *CFPaymentMethod {
	return v.value
}

func (v *NullableCFPaymentMethod) Set(val *CFPaymentMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableCFPaymentMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableCFPaymentMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCFPaymentMethod(val *CFPaymentMethod) *NullableCFPaymentMethod {
	return &NullableCFPaymentMethod{value: val, isSet: true}
}

func (v NullableCFPaymentMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCFPaymentMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


