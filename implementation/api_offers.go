/*
New Payment Gateway APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2022-09-01
Contact: nextgenapi@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg_sdk_go

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// OffersApiService OffersApi service
type OffersApiService service

type ApiCreateOfferRequest struct {
	ctx context.Context
	ApiService *OffersApiService
	xClientId *string
	xClientSecret *string
	xApiVersion *string
	xRequestId *string
	xIdempotencyKey *string
	createOfferBackendRequest *CFCreateOfferBackendRequest
}

func (r ApiCreateOfferRequest) XClientId(xClientId string) ApiCreateOfferRequest {
	r.xClientId = &xClientId
	return r
}

func (r ApiCreateOfferRequest) XClientSecret(xClientSecret string) ApiCreateOfferRequest {
	r.xClientSecret = &xClientSecret
	return r
}

func (r ApiCreateOfferRequest) XApiVersion(xApiVersion string) ApiCreateOfferRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiCreateOfferRequest) XRequestId(xRequestId string) ApiCreateOfferRequest {
	r.xRequestId = &xRequestId
	return r
}

func (r ApiCreateOfferRequest) XIdempotencyKey(xIdempotencyKey string) ApiCreateOfferRequest {
	r.xIdempotencyKey = &xIdempotencyKey
	return r
}

func (r ApiCreateOfferRequest) CreateOfferBackendRequest(createOfferBackendRequest CFCreateOfferBackendRequest) ApiCreateOfferRequest {
	r.createOfferBackendRequest = &createOfferBackendRequest
	return r
}

func (r ApiCreateOfferRequest) Execute() (*CFOfferEntity, *http.Response, error) {
	return r.ApiService.CreateOfferExecute(r)
}

/*
CreateOffer Create Offer

Use this API to create offers with Cashfree from your backend

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateOfferRequest
*/
func (a *OffersApiService) CreateOffer(ctx context.Context) ApiCreateOfferRequest {
	return ApiCreateOfferRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OfferEntity
func (a *OffersApiService) CreateOfferExecute(r ApiCreateOfferRequest) (*CFOfferEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CFOfferEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OffersApiService.CreateOffer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/offers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xClientId == nil {
		return localVarReturnValue, nil, reportError("xClientId is required and must be specified")
	}
	if r.xClientSecret == nil {
		return localVarReturnValue, nil, reportError("xClientSecret is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-client-id", r.xClientId, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-client-secret", r.xClientSecret, "")
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "")
	}
	if r.xIdempotencyKey != nil {
		localVarHeaderParams["x-idempotency-key"] = parameterToString(*r.xIdempotencyKey, "")
	}
	if r.xRequestId != nil {
		localVarHeaderParams["x-request-id"] = parameterToString(*r.xRequestId, "")
	}
	localVarHeaderParams[XPlatform] = XPlatformValue

	// body params
	localVarPostBody = r.createOfferBackendRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	defer localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOfferRequest struct {
	ctx context.Context
	ApiService *OffersApiService
	xClientId *string
	xClientSecret *string
	offerId string
	xApiVersion *string
	xRequestId *string
	xIdempotencyKey *string
}

func (r ApiGetOfferRequest) XClientId(xClientId string) ApiGetOfferRequest {
	r.xClientId = &xClientId
	return r
}

func (r ApiGetOfferRequest) XClientSecret(xClientSecret string) ApiGetOfferRequest {
	r.xClientSecret = &xClientSecret
	return r
}

func (r ApiGetOfferRequest) XApiVersion(xApiVersion string) ApiGetOfferRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiGetOfferRequest) XRequestId(xRequestId string) ApiGetOfferRequest {
	r.xRequestId = &xRequestId
	return r
}

func (r ApiGetOfferRequest) XIdempotencyKey(xIdempotencyKey string) ApiGetOfferRequest {
	r.xIdempotencyKey = &xIdempotencyKey
	return r
}

func (r ApiGetOfferRequest) Execute() (*CFOfferEntity, *http.Response, error) {
	return r.ApiService.GetOfferExecute(r)
}

/*
GetOffer Get Offer by ID

Use this API to get offer by offer_id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param offerId
 @return ApiGetOfferRequest
*/
func (a *OffersApiService) GetOffer(ctx context.Context, offerId string) ApiGetOfferRequest {
	return ApiGetOfferRequest{
		ApiService: a,
		ctx: ctx,
		offerId: offerId,
	}
}

// Execute executes the request
//  @return OfferEntity
func (a *OffersApiService) GetOfferExecute(r ApiGetOfferRequest) (*CFOfferEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CFOfferEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OffersApiService.GetOffer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/offers/{offer_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"offer_id"+"}", url.PathEscape(parameterValueToString(r.offerId, "offerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xClientId == nil {
		return localVarReturnValue, nil, reportError("xClientId is required and must be specified")
	}
	if r.xClientSecret == nil {
		return localVarReturnValue, nil, reportError("xClientSecret is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-client-id", r.xClientId, "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "x-client-secret", r.xClientSecret, "")
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "")
	}
	if r.xIdempotencyKey != nil {
		localVarHeaderParams["x-idempotency-key"] = parameterToString(*r.xIdempotencyKey, "")
	}
	if r.xRequestId != nil {
		localVarHeaderParams["x-request-id"] = parameterToString(*r.xRequestId, "")
	}
	localVarHeaderParams[XPlatform] = XPlatformValue
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
