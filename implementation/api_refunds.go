/*
New Payment Gateway APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2022-01-01
Contact: nextgenapi@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg_sdk_go

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

// RefundsApiService RefundsApi service
type RefundsApiService service

type ApiCreaterefundRequest struct {
	ctx context.Context
	ApiService *RefundsApiService
	xClientId *string
	xClientSecret *string
	orderId string
	xApiVersion *string
	xIdempotencyReplayed *bool
	xIdempotencyKey *string
	xRequestId *string
	cFRefundRequest *CFRefundRequest
}

func (r ApiCreaterefundRequest) XClientId(xClientId string) ApiCreaterefundRequest {
	r.xClientId = &xClientId
	return r
}
func (r ApiCreaterefundRequest) XClientSecret(xClientSecret string) ApiCreaterefundRequest {
	r.xClientSecret = &xClientSecret
	return r
}
func (r ApiCreaterefundRequest) XApiVersion(xApiVersion string) ApiCreaterefundRequest {
	r.xApiVersion = &xApiVersion
	return r
}
func (r ApiCreaterefundRequest) XIdempotencyReplayed(xIdempotencyReplayed bool) ApiCreaterefundRequest {
	r.xIdempotencyReplayed = &xIdempotencyReplayed
	return r
}
func (r ApiCreaterefundRequest) XIdempotencyKey(xIdempotencyKey string) ApiCreaterefundRequest {
	r.xIdempotencyKey = &xIdempotencyKey
	return r
}
func (r ApiCreaterefundRequest) XRequestId(xRequestId string) ApiCreaterefundRequest {
	r.xRequestId = &xRequestId
	return r
}
func (r ApiCreaterefundRequest) CFRefundRequest(cFRefundRequest CFRefundRequest) ApiCreaterefundRequest {
	r.cFRefundRequest = &cFRefundRequest
	return r
}

func (r ApiCreaterefundRequest) Execute() (*CFRefund, *http.Response, error) {
	return r.ApiService.CreaterefundExecute(r)
}

/*
Createrefund Create Refund

Use this API to initiate refunds.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orderId
 @return ApiCreaterefundRequest
*/
func (a *RefundsApiService) Createrefund(ctx context.Context, orderId string) ApiCreaterefundRequest {
	return ApiCreaterefundRequest{
		ApiService: a,
		ctx: ctx,
		orderId: orderId,
	}
}

// Execute executes the request
//  @return CFRefund
func (a *RefundsApiService) CreaterefundExecute(r ApiCreaterefundRequest) (*CFRefund, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CFRefund
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RefundsApiService.Createrefund")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/orders/{order_id}/refunds"
	localVarPath = strings.Replace(localVarPath, "{"+"order_id"+"}", url.PathEscape(parameterToString(r.orderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xClientId == nil {
		return localVarReturnValue, nil, reportError("xClientId is required and must be specified")
	}
	if r.xClientSecret == nil {
		return localVarReturnValue, nil, reportError("xClientSecret is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["x-client-id"] = parameterToString(*r.xClientId, "")
	localVarHeaderParams["x-client-secret"] = parameterToString(*r.xClientSecret, "")
	if r.xApiVersion != nil {
		localVarHeaderParams["x-api-version"] = parameterToString(*r.xApiVersion, "")
	}
	if r.xIdempotencyReplayed != nil {
		localVarHeaderParams["x-idempotency-replayed"] = parameterToString(*r.xIdempotencyReplayed, "")
	}
	if r.xIdempotencyKey != nil {
		localVarHeaderParams["x-idempotency-key"] = parameterToString(*r.xIdempotencyKey, "")
	}
	if r.xRequestId != nil {
		localVarHeaderParams["x-request-id"] = parameterToString(*r.xRequestId, "")
	}
	localVarHeaderParams[XPlatform] = XPlatformValue
	// body params
	localVarPostBody = r.cFRefundRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v CFError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRefundRequest struct {
	ctx context.Context
	ApiService *RefundsApiService
	xClientId *string
	xClientSecret *string
	orderId string
	refundId string
	xApiVersion *string
	xIdempotencyReplayed *bool
	xIdempotencyKey *string
	xRequestId *string
}

func (r ApiGetRefundRequest) XClientId(xClientId string) ApiGetRefundRequest {
	r.xClientId = &xClientId
	return r
}
func (r ApiGetRefundRequest) XClientSecret(xClientSecret string) ApiGetRefundRequest {
	r.xClientSecret = &xClientSecret
	return r
}
func (r ApiGetRefundRequest) XApiVersion(xApiVersion string) ApiGetRefundRequest {
	r.xApiVersion = &xApiVersion
	return r
}
func (r ApiGetRefundRequest) XIdempotencyReplayed(xIdempotencyReplayed bool) ApiGetRefundRequest {
	r.xIdempotencyReplayed = &xIdempotencyReplayed
	return r
}
func (r ApiGetRefundRequest) XIdempotencyKey(xIdempotencyKey string) ApiGetRefundRequest {
	r.xIdempotencyKey = &xIdempotencyKey
	return r
}
func (r ApiGetRefundRequest) XRequestId(xRequestId string) ApiGetRefundRequest {
	r.xRequestId = &xRequestId
	return r
}

func (r ApiGetRefundRequest) Execute() (*CFRefund, *http.Response, error) {
	return r.ApiService.GetRefundExecute(r)
}

/*
GetRefund Get Refund

Use this API to fetch a specific refund processed on your Cashfree Account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orderId
 @param refundId Refund Id of the refund you want to fetch.
 @return ApiGetRefundRequest
*/
func (a *RefundsApiService) GetRefund(ctx context.Context, orderId string, refundId string) ApiGetRefundRequest {
	return ApiGetRefundRequest{
		ApiService: a,
		ctx: ctx,
		orderId: orderId,
		refundId: refundId,
	}
}

// Execute executes the request
//  @return CFRefund
func (a *RefundsApiService) GetRefundExecute(r ApiGetRefundRequest) (*CFRefund, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CFRefund
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RefundsApiService.GetRefund")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/orders/{order_id}/refunds/{refund_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"order_id"+"}", url.PathEscape(parameterToString(r.orderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"refund_id"+"}", url.PathEscape(parameterToString(r.refundId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xClientId == nil {
		return localVarReturnValue, nil, reportError("xClientId is required and must be specified")
	}
	if r.xClientSecret == nil {
		return localVarReturnValue, nil, reportError("xClientSecret is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["x-client-id"] = parameterToString(*r.xClientId, "")
	localVarHeaderParams["x-client-secret"] = parameterToString(*r.xClientSecret, "")
	if r.xApiVersion != nil {
		localVarHeaderParams["x-api-version"] = parameterToString(*r.xApiVersion, "")
	}
	if r.xIdempotencyReplayed != nil {
		localVarHeaderParams["x-idempotency-replayed"] = parameterToString(*r.xIdempotencyReplayed, "")
	}
	if r.xIdempotencyKey != nil {
		localVarHeaderParams["x-idempotency-key"] = parameterToString(*r.xIdempotencyKey, "")
	}
	if r.xRequestId != nil {
		localVarHeaderParams["x-request-id"] = parameterToString(*r.xRequestId, "")
	}
	localVarHeaderParams[XPlatform] = XPlatformValue
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v CFError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetallrefundsfororderRequest struct {
	ctx context.Context
	ApiService *RefundsApiService
	xClientId *string
	xClientSecret *string
	orderId string
	xApiVersion *string
}

func (r ApiGetallrefundsfororderRequest) XClientId(xClientId string) ApiGetallrefundsfororderRequest {
	r.xClientId = &xClientId
	return r
}
func (r ApiGetallrefundsfororderRequest) XClientSecret(xClientSecret string) ApiGetallrefundsfororderRequest {
	r.xClientSecret = &xClientSecret
	return r
}
func (r ApiGetallrefundsfororderRequest) XApiVersion(xApiVersion string) ApiGetallrefundsfororderRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiGetallrefundsfororderRequest) Execute() ([]CFRefund, *http.Response, error) {
	return r.ApiService.GetallrefundsfororderExecute(r)
}

/*
Getallrefundsfororder Get All Refunds for an Order

Use this API to fetch all refunds processed against an order.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orderId
 @return ApiGetallrefundsfororderRequest
*/
func (a *RefundsApiService) Getallrefundsfororder(ctx context.Context, orderId string) ApiGetallrefundsfororderRequest {
	return ApiGetallrefundsfororderRequest{
		ApiService: a,
		ctx: ctx,
		orderId: orderId,
	}
}

// Execute executes the request
//  @return []CFRefund
func (a *RefundsApiService) GetallrefundsfororderExecute(r ApiGetallrefundsfororderRequest) ([]CFRefund, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CFRefund
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RefundsApiService.Getallrefundsfororder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/orders/{order_id}/refunds"
	localVarPath = strings.Replace(localVarPath, "{"+"order_id"+"}", url.PathEscape(parameterToString(r.orderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xClientId == nil {
		return localVarReturnValue, nil, reportError("xClientId is required and must be specified")
	}
	if r.xClientSecret == nil {
		return localVarReturnValue, nil, reportError("xClientSecret is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["x-client-id"] = parameterToString(*r.xClientId, "")
	localVarHeaderParams["x-client-secret"] = parameterToString(*r.xClientSecret, "")
	if r.xApiVersion != nil {
		localVarHeaderParams["x-api-version"] = parameterToString(*r.xApiVersion, "")
	}
	localVarHeaderParams[XPlatform] = XPlatformValue
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v CFError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
