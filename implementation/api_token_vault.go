/*
New Payment Gateway APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2022-01-01
Contact: nextgenapi@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg_sdk_go

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

// TokenVaultApiService TokenVaultApi service
type TokenVaultApiService service

type ApiDeleteSpecificSavedInstrumentRequest struct {
	ctx context.Context
	ApiService *TokenVaultApiService
	xClientId *string
	xClientSecret *string
	customerId string
	instrumentId string
	xApiVersion *string
}

func (r ApiDeleteSpecificSavedInstrumentRequest) XClientId(xClientId string) ApiDeleteSpecificSavedInstrumentRequest {
	r.xClientId = &xClientId
	return r
}
func (r ApiDeleteSpecificSavedInstrumentRequest) XClientSecret(xClientSecret string) ApiDeleteSpecificSavedInstrumentRequest {
	r.xClientSecret = &xClientSecret
	return r
}
func (r ApiDeleteSpecificSavedInstrumentRequest) XApiVersion(xApiVersion string) ApiDeleteSpecificSavedInstrumentRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiDeleteSpecificSavedInstrumentRequest) Execute() (*CFFetchAllSavedInstruments, *http.Response, error) {
	return r.ApiService.DeleteSpecificSavedInstrumentExecute(r)
}

/*
DeleteSpecificSavedInstrument Delete Saved Instrument

To delete a saved instrument for a customer id and instrument id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customerId
 @param instrumentId
 @return ApiDeleteSpecificSavedInstrumentRequest
*/
func (a *TokenVaultApiService) DeleteSpecificSavedInstrument(ctx context.Context, customerId string, instrumentId string) ApiDeleteSpecificSavedInstrumentRequest {
	return ApiDeleteSpecificSavedInstrumentRequest{
		ApiService: a,
		ctx: ctx,
		customerId: customerId,
		instrumentId: instrumentId,
	}
}

// Execute executes the request
//  @return CFFetchAllSavedInstruments
func (a *TokenVaultApiService) DeleteSpecificSavedInstrumentExecute(r ApiDeleteSpecificSavedInstrumentRequest) (*CFFetchAllSavedInstruments, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CFFetchAllSavedInstruments
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TokenVaultApiService.DeleteSpecificSavedInstrument")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/customers/{customer_id}/instruments/{instrument_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"customer_id"+"}", url.PathEscape(parameterToString(r.customerId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instrument_id"+"}", url.PathEscape(parameterToString(r.instrumentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xClientId == nil {
		return localVarReturnValue, nil, reportError("xClientId is required and must be specified")
	}
	if r.xClientSecret == nil {
		return localVarReturnValue, nil, reportError("xClientSecret is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["x-client-id"] = parameterToString(*r.xClientId, "")
	localVarHeaderParams["x-client-secret"] = parameterToString(*r.xClientSecret, "")
	if r.xApiVersion != nil {
		localVarHeaderParams["x-api-version"] = parameterToString(*r.xApiVersion, "")
	}
	localVarHeaderParams[XPlatform] = XPlatformValue
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v CFError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchAllSavedInstrumentsRequest struct {
	ctx context.Context
	ApiService *TokenVaultApiService
	xClientId *string
	xClientSecret *string
	customerId string
	instrumentType *string
	xApiVersion *string
	xIdempotencyReplayed *bool
	xIdempotencyKey *string
	xRequestId *string
}

func (r ApiFetchAllSavedInstrumentsRequest) XClientId(xClientId string) ApiFetchAllSavedInstrumentsRequest {
	r.xClientId = &xClientId
	return r
}
func (r ApiFetchAllSavedInstrumentsRequest) XClientSecret(xClientSecret string) ApiFetchAllSavedInstrumentsRequest {
	r.xClientSecret = &xClientSecret
	return r
}
func (r ApiFetchAllSavedInstrumentsRequest) InstrumentType(instrumentType string) ApiFetchAllSavedInstrumentsRequest {
	r.instrumentType = &instrumentType
	return r
}
func (r ApiFetchAllSavedInstrumentsRequest) XApiVersion(xApiVersion string) ApiFetchAllSavedInstrumentsRequest {
	r.xApiVersion = &xApiVersion
	return r
}
func (r ApiFetchAllSavedInstrumentsRequest) XIdempotencyReplayed(xIdempotencyReplayed bool) ApiFetchAllSavedInstrumentsRequest {
	r.xIdempotencyReplayed = &xIdempotencyReplayed
	return r
}
func (r ApiFetchAllSavedInstrumentsRequest) XIdempotencyKey(xIdempotencyKey string) ApiFetchAllSavedInstrumentsRequest {
	r.xIdempotencyKey = &xIdempotencyKey
	return r
}
func (r ApiFetchAllSavedInstrumentsRequest) XRequestId(xRequestId string) ApiFetchAllSavedInstrumentsRequest {
	r.xRequestId = &xRequestId
	return r
}

func (r ApiFetchAllSavedInstrumentsRequest) Execute() ([]CFFetchAllSavedInstruments, *http.Response, error) {
	return r.ApiService.FetchAllSavedInstrumentsExecute(r)
}

/*
FetchAllSavedInstruments Fetch All Saved Instruments

To get all saved instruments for a customer id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customerId
 @return ApiFetchAllSavedInstrumentsRequest
*/
func (a *TokenVaultApiService) FetchAllSavedInstruments(ctx context.Context, customerId string) ApiFetchAllSavedInstrumentsRequest {
	return ApiFetchAllSavedInstrumentsRequest{
		ApiService: a,
		ctx: ctx,
		customerId: customerId,
	}
}

// Execute executes the request
//  @return []CFFetchAllSavedInstruments
func (a *TokenVaultApiService) FetchAllSavedInstrumentsExecute(r ApiFetchAllSavedInstrumentsRequest) ([]CFFetchAllSavedInstruments, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CFFetchAllSavedInstruments
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TokenVaultApiService.FetchAllSavedInstruments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/customers/{customer_id}/instruments"
	localVarPath = strings.Replace(localVarPath, "{"+"customer_id"+"}", url.PathEscape(parameterToString(r.customerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xClientId == nil {
		return localVarReturnValue, nil, reportError("xClientId is required and must be specified")
	}
	if r.xClientSecret == nil {
		return localVarReturnValue, nil, reportError("xClientSecret is required and must be specified")
	}
	if r.instrumentType == nil {
		return localVarReturnValue, nil, reportError("instrumentType is required and must be specified")
	}

	localVarQueryParams.Add("instrument_type", parameterToString(*r.instrumentType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["x-client-id"] = parameterToString(*r.xClientId, "")
	localVarHeaderParams["x-client-secret"] = parameterToString(*r.xClientSecret, "")
	if r.xApiVersion != nil {
		localVarHeaderParams["x-api-version"] = parameterToString(*r.xApiVersion, "")
	}
	if r.xIdempotencyReplayed != nil {
		localVarHeaderParams["x-idempotency-replayed"] = parameterToString(*r.xIdempotencyReplayed, "")
	}
	if r.xIdempotencyKey != nil {
		localVarHeaderParams["x-idempotency-key"] = parameterToString(*r.xIdempotencyKey, "")
	}
	if r.xRequestId != nil {
		localVarHeaderParams["x-request-id"] = parameterToString(*r.xRequestId, "")
	}
	localVarHeaderParams[XPlatform] = XPlatformValue
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v CFError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchCryptogramRequest struct {
	ctx context.Context
	ApiService *TokenVaultApiService
	xClientId *string
	xClientSecret *string
	customerId string
	instrumentId string
	xApiVersion *string
	xIdempotencyReplayed *bool
	xIdempotencyKey *string
	xRequestId *string
}

func (r ApiFetchCryptogramRequest) XClientId(xClientId string) ApiFetchCryptogramRequest {
	r.xClientId = &xClientId
	return r
}
func (r ApiFetchCryptogramRequest) XClientSecret(xClientSecret string) ApiFetchCryptogramRequest {
	r.xClientSecret = &xClientSecret
	return r
}
func (r ApiFetchCryptogramRequest) XApiVersion(xApiVersion string) ApiFetchCryptogramRequest {
	r.xApiVersion = &xApiVersion
	return r
}
func (r ApiFetchCryptogramRequest) XIdempotencyReplayed(xIdempotencyReplayed bool) ApiFetchCryptogramRequest {
	r.xIdempotencyReplayed = &xIdempotencyReplayed
	return r
}
func (r ApiFetchCryptogramRequest) XIdempotencyKey(xIdempotencyKey string) ApiFetchCryptogramRequest {
	r.xIdempotencyKey = &xIdempotencyKey
	return r
}
func (r ApiFetchCryptogramRequest) XRequestId(xRequestId string) ApiFetchCryptogramRequest {
	r.xRequestId = &xRequestId
	return r
}

func (r ApiFetchCryptogramRequest) Execute() (*CFCryptogram, *http.Response, error) {
	return r.ApiService.FetchCryptogramExecute(r)
}

/*
FetchCryptogram Fetch cryptogram for saved instrument

To get the card network token, token expiry and cryptogram for a saved instrument using instrument id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customerId
 @param instrumentId
 @return ApiFetchCryptogramRequest
*/
func (a *TokenVaultApiService) FetchCryptogram(ctx context.Context, customerId string, instrumentId string) ApiFetchCryptogramRequest {
	return ApiFetchCryptogramRequest{
		ApiService: a,
		ctx: ctx,
		customerId: customerId,
		instrumentId: instrumentId,
	}
}

// Execute executes the request
//  @return CFCryptogram
func (a *TokenVaultApiService) FetchCryptogramExecute(r ApiFetchCryptogramRequest) (*CFCryptogram, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CFCryptogram
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TokenVaultApiService.FetchCryptogram")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/customers/{customer_id}/instruments/{instrument_id}/cryptogram"
	localVarPath = strings.Replace(localVarPath, "{"+"customer_id"+"}", url.PathEscape(parameterToString(r.customerId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instrument_id"+"}", url.PathEscape(parameterToString(r.instrumentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xClientId == nil {
		return localVarReturnValue, nil, reportError("xClientId is required and must be specified")
	}
	if r.xClientSecret == nil {
		return localVarReturnValue, nil, reportError("xClientSecret is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["x-client-id"] = parameterToString(*r.xClientId, "")
	localVarHeaderParams["x-client-secret"] = parameterToString(*r.xClientSecret, "")
	if r.xApiVersion != nil {
		localVarHeaderParams["x-api-version"] = parameterToString(*r.xApiVersion, "")
	}
	if r.xIdempotencyReplayed != nil {
		localVarHeaderParams["x-idempotency-replayed"] = parameterToString(*r.xIdempotencyReplayed, "")
	}
	if r.xIdempotencyKey != nil {
		localVarHeaderParams["x-idempotency-key"] = parameterToString(*r.xIdempotencyKey, "")
	}
	if r.xRequestId != nil {
		localVarHeaderParams["x-request-id"] = parameterToString(*r.xRequestId, "")
	}
	localVarHeaderParams[XPlatform] = XPlatformValue
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v CFError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchSpecificSavedInstrumentRequest struct {
	ctx context.Context
	ApiService *TokenVaultApiService
	xClientId *string
	xClientSecret *string
	customerId string
	instrumentId string
	xApiVersion *string
	xIdempotencyReplayed *bool
	xIdempotencyKey *string
	xRequestId *string
}

func (r ApiFetchSpecificSavedInstrumentRequest) XClientId(xClientId string) ApiFetchSpecificSavedInstrumentRequest {
	r.xClientId = &xClientId
	return r
}
func (r ApiFetchSpecificSavedInstrumentRequest) XClientSecret(xClientSecret string) ApiFetchSpecificSavedInstrumentRequest {
	r.xClientSecret = &xClientSecret
	return r
}
func (r ApiFetchSpecificSavedInstrumentRequest) XApiVersion(xApiVersion string) ApiFetchSpecificSavedInstrumentRequest {
	r.xApiVersion = &xApiVersion
	return r
}
func (r ApiFetchSpecificSavedInstrumentRequest) XIdempotencyReplayed(xIdempotencyReplayed bool) ApiFetchSpecificSavedInstrumentRequest {
	r.xIdempotencyReplayed = &xIdempotencyReplayed
	return r
}
func (r ApiFetchSpecificSavedInstrumentRequest) XIdempotencyKey(xIdempotencyKey string) ApiFetchSpecificSavedInstrumentRequest {
	r.xIdempotencyKey = &xIdempotencyKey
	return r
}
func (r ApiFetchSpecificSavedInstrumentRequest) XRequestId(xRequestId string) ApiFetchSpecificSavedInstrumentRequest {
	r.xRequestId = &xRequestId
	return r
}

func (r ApiFetchSpecificSavedInstrumentRequest) Execute() (*CFFetchAllSavedInstruments, *http.Response, error) {
	return r.ApiService.FetchSpecificSavedInstrumentExecute(r)
}

/*
FetchSpecificSavedInstrument Fetch Single Saved Instrument

To get specific saved instrument for a customer id and instrument id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customerId
 @param instrumentId
 @return ApiFetchSpecificSavedInstrumentRequest
*/
func (a *TokenVaultApiService) FetchSpecificSavedInstrument(ctx context.Context, customerId string, instrumentId string) ApiFetchSpecificSavedInstrumentRequest {
	return ApiFetchSpecificSavedInstrumentRequest{
		ApiService: a,
		ctx: ctx,
		customerId: customerId,
		instrumentId: instrumentId,
	}
}

// Execute executes the request
//  @return CFFetchAllSavedInstruments
func (a *TokenVaultApiService) FetchSpecificSavedInstrumentExecute(r ApiFetchSpecificSavedInstrumentRequest) (*CFFetchAllSavedInstruments, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CFFetchAllSavedInstruments
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TokenVaultApiService.FetchSpecificSavedInstrument")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/customers/{customer_id}/instruments/{instrument_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"customer_id"+"}", url.PathEscape(parameterToString(r.customerId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instrument_id"+"}", url.PathEscape(parameterToString(r.instrumentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xClientId == nil {
		return localVarReturnValue, nil, reportError("xClientId is required and must be specified")
	}
	if r.xClientSecret == nil {
		return localVarReturnValue, nil, reportError("xClientSecret is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["x-client-id"] = parameterToString(*r.xClientId, "")
	localVarHeaderParams["x-client-secret"] = parameterToString(*r.xClientSecret, "")
	if r.xApiVersion != nil {
		localVarHeaderParams["x-api-version"] = parameterToString(*r.xApiVersion, "")
	}
	if r.xIdempotencyReplayed != nil {
		localVarHeaderParams["x-idempotency-replayed"] = parameterToString(*r.xIdempotencyReplayed, "")
	}
	if r.xIdempotencyKey != nil {
		localVarHeaderParams["x-idempotency-key"] = parameterToString(*r.xIdempotencyKey, "")
	}
	if r.xRequestId != nil {
		localVarHeaderParams["x-request-id"] = parameterToString(*r.xRequestId, "")
	}
	localVarHeaderParams[XPlatform] = XPlatformValue
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v CFError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
