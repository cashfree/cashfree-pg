/*
New Payment Gateway APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2022-01-01
Contact: nextgenapi@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg_sdk_go

import (
	"encoding/json"
	"fmt"
)

// CFPaymentsEntityMethod - struct for CFPaymentsEntityMethod
type CFPaymentsEntityMethod struct {
	CFPaymentsEntityAppPayment *CFPaymentsEntityAppPayment
	CFPaymentsEntityCardPayment *CFPaymentsEntityCardPayment
	CFPaymentsEntityCardlessEMIPayment *CFPaymentsEntityCardlessEMIPayment
	CFPaymentsEntityNetbankingPayment *CFPaymentsEntityNetbankingPayment
	CFPaymentsEntityPaylaterPayment *CFPaymentsEntityPaylaterPayment
	CFPaymentsEntityUPIPayment *CFPaymentsEntityUPIPayment
}

// CFPaymentsEntityAppPaymentAsCFPaymentsEntityMethod is a convenience function that returns CFPaymentsEntityAppPayment wrapped in CFPaymentsEntityMethod
func CFPaymentsEntityAppPaymentAsCFPaymentsEntityMethod(v *CFPaymentsEntityAppPayment) CFPaymentsEntityMethod {
	return CFPaymentsEntityMethod{
		CFPaymentsEntityAppPayment: v,
	}
}

// CFPaymentsEntityCardPaymentAsCFPaymentsEntityMethod is a convenience function that returns CFPaymentsEntityCardPayment wrapped in CFPaymentsEntityMethod
func CFPaymentsEntityCardPaymentAsCFPaymentsEntityMethod(v *CFPaymentsEntityCardPayment) CFPaymentsEntityMethod {
	return CFPaymentsEntityMethod{
		CFPaymentsEntityCardPayment: v,
	}
}

// CFPaymentsEntityCardlessEMIPaymentAsCFPaymentsEntityMethod is a convenience function that returns CFPaymentsEntityCardlessEMIPayment wrapped in CFPaymentsEntityMethod
func CFPaymentsEntityCardlessEMIPaymentAsCFPaymentsEntityMethod(v *CFPaymentsEntityCardlessEMIPayment) CFPaymentsEntityMethod {
	return CFPaymentsEntityMethod{
		CFPaymentsEntityCardlessEMIPayment: v,
	}
}

// CFPaymentsEntityNetbankingPaymentAsCFPaymentsEntityMethod is a convenience function that returns CFPaymentsEntityNetbankingPayment wrapped in CFPaymentsEntityMethod
func CFPaymentsEntityNetbankingPaymentAsCFPaymentsEntityMethod(v *CFPaymentsEntityNetbankingPayment) CFPaymentsEntityMethod {
	return CFPaymentsEntityMethod{
		CFPaymentsEntityNetbankingPayment: v,
	}
}

// CFPaymentsEntityPaylaterPaymentAsCFPaymentsEntityMethod is a convenience function that returns CFPaymentsEntityPaylaterPayment wrapped in CFPaymentsEntityMethod
func CFPaymentsEntityPaylaterPaymentAsCFPaymentsEntityMethod(v *CFPaymentsEntityPaylaterPayment) CFPaymentsEntityMethod {
	return CFPaymentsEntityMethod{
		CFPaymentsEntityPaylaterPayment: v,
	}
}

// CFPaymentsEntityUPIPaymentAsCFPaymentsEntityMethod is a convenience function that returns CFPaymentsEntityUPIPayment wrapped in CFPaymentsEntityMethod
func CFPaymentsEntityUPIPaymentAsCFPaymentsEntityMethod(v *CFPaymentsEntityUPIPayment) CFPaymentsEntityMethod {
	return CFPaymentsEntityMethod{
		CFPaymentsEntityUPIPayment: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CFPaymentsEntityMethod) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CFPaymentsEntityAppPayment
	err = newStrictDecoder(data).Decode(&dst.CFPaymentsEntityAppPayment)
	if err == nil {
		jsonCFPaymentsEntityAppPayment, _ := json.Marshal(dst.CFPaymentsEntityAppPayment)
		if string(jsonCFPaymentsEntityAppPayment) == "{}" { // empty struct
			dst.CFPaymentsEntityAppPayment = nil
		} else {
			match++
		}
	} else {
		dst.CFPaymentsEntityAppPayment = nil
	}

	// try to unmarshal data into CFPaymentsEntityCardPayment
	err = newStrictDecoder(data).Decode(&dst.CFPaymentsEntityCardPayment)
	if err == nil {
		jsonCFPaymentsEntityCardPayment, _ := json.Marshal(dst.CFPaymentsEntityCardPayment)
		if string(jsonCFPaymentsEntityCardPayment) == "{}" { // empty struct
			dst.CFPaymentsEntityCardPayment = nil
		} else {
			match++
		}
	} else {
		dst.CFPaymentsEntityCardPayment = nil
	}

	// try to unmarshal data into CFPaymentsEntityCardlessEMIPayment
	err = newStrictDecoder(data).Decode(&dst.CFPaymentsEntityCardlessEMIPayment)
	if err == nil {
		jsonCFPaymentsEntityCardlessEMIPayment, _ := json.Marshal(dst.CFPaymentsEntityCardlessEMIPayment)
		if string(jsonCFPaymentsEntityCardlessEMIPayment) == "{}" { // empty struct
			dst.CFPaymentsEntityCardlessEMIPayment = nil
		} else {
			match++
		}
	} else {
		dst.CFPaymentsEntityCardlessEMIPayment = nil
	}

	// try to unmarshal data into CFPaymentsEntityNetbankingPayment
	err = newStrictDecoder(data).Decode(&dst.CFPaymentsEntityNetbankingPayment)
	if err == nil {
		jsonCFPaymentsEntityNetbankingPayment, _ := json.Marshal(dst.CFPaymentsEntityNetbankingPayment)
		if string(jsonCFPaymentsEntityNetbankingPayment) == "{}" { // empty struct
			dst.CFPaymentsEntityNetbankingPayment = nil
		} else {
			match++
		}
	} else {
		dst.CFPaymentsEntityNetbankingPayment = nil
	}

	// try to unmarshal data into CFPaymentsEntityPaylaterPayment
	err = newStrictDecoder(data).Decode(&dst.CFPaymentsEntityPaylaterPayment)
	if err == nil {
		jsonCFPaymentsEntityPaylaterPayment, _ := json.Marshal(dst.CFPaymentsEntityPaylaterPayment)
		if string(jsonCFPaymentsEntityPaylaterPayment) == "{}" { // empty struct
			dst.CFPaymentsEntityPaylaterPayment = nil
		} else {
			match++
		}
	} else {
		dst.CFPaymentsEntityPaylaterPayment = nil
	}

	// try to unmarshal data into CFPaymentsEntityUPIPayment
	err = newStrictDecoder(data).Decode(&dst.CFPaymentsEntityUPIPayment)
	if err == nil {
		jsonCFPaymentsEntityUPIPayment, _ := json.Marshal(dst.CFPaymentsEntityUPIPayment)
		if string(jsonCFPaymentsEntityUPIPayment) == "{}" { // empty struct
			dst.CFPaymentsEntityUPIPayment = nil
		} else {
			match++
		}
	} else {
		dst.CFPaymentsEntityUPIPayment = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CFPaymentsEntityAppPayment = nil
		dst.CFPaymentsEntityCardPayment = nil
		dst.CFPaymentsEntityCardlessEMIPayment = nil
		dst.CFPaymentsEntityNetbankingPayment = nil
		dst.CFPaymentsEntityPaylaterPayment = nil
		dst.CFPaymentsEntityUPIPayment = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(CFPaymentsEntityMethod)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(CFPaymentsEntityMethod)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CFPaymentsEntityMethod) MarshalJSON() ([]byte, error) {
	if src.CFPaymentsEntityAppPayment != nil {
		return json.Marshal(&src.CFPaymentsEntityAppPayment)
	}

	if src.CFPaymentsEntityCardPayment != nil {
		return json.Marshal(&src.CFPaymentsEntityCardPayment)
	}

	if src.CFPaymentsEntityCardlessEMIPayment != nil {
		return json.Marshal(&src.CFPaymentsEntityCardlessEMIPayment)
	}

	if src.CFPaymentsEntityNetbankingPayment != nil {
		return json.Marshal(&src.CFPaymentsEntityNetbankingPayment)
	}

	if src.CFPaymentsEntityPaylaterPayment != nil {
		return json.Marshal(&src.CFPaymentsEntityPaylaterPayment)
	}

	if src.CFPaymentsEntityUPIPayment != nil {
		return json.Marshal(&src.CFPaymentsEntityUPIPayment)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CFPaymentsEntityMethod) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CFPaymentsEntityAppPayment != nil {
		return obj.CFPaymentsEntityAppPayment
	}

	if obj.CFPaymentsEntityCardPayment != nil {
		return obj.CFPaymentsEntityCardPayment
	}

	if obj.CFPaymentsEntityCardlessEMIPayment != nil {
		return obj.CFPaymentsEntityCardlessEMIPayment
	}

	if obj.CFPaymentsEntityNetbankingPayment != nil {
		return obj.CFPaymentsEntityNetbankingPayment
	}

	if obj.CFPaymentsEntityPaylaterPayment != nil {
		return obj.CFPaymentsEntityPaylaterPayment
	}

	if obj.CFPaymentsEntityUPIPayment != nil {
		return obj.CFPaymentsEntityUPIPayment
	}

	// all schemas are nil
	return nil
}

type NullableCFPaymentsEntityMethod struct {
	value *CFPaymentsEntityMethod
	isSet bool
}

func (v NullableCFPaymentsEntityMethod) Get() *CFPaymentsEntityMethod {
	return v.value
}

func (v *NullableCFPaymentsEntityMethod) Set(val *CFPaymentsEntityMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableCFPaymentsEntityMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableCFPaymentsEntityMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCFPaymentsEntityMethod(val *CFPaymentsEntityMethod) *NullableCFPaymentsEntityMethod {
	return &NullableCFPaymentsEntityMethod{value: val, isSet: true}
}

func (v NullableCFPaymentsEntityMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCFPaymentsEntityMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


