/*
New Payment Gateway APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2022-01-01
Contact: nextgenapi@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg_sdk_go

import (
	"bytes"
	"context"
	"encoding/json"
	"encoding/xml"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"mime/multipart"
	"net/http"
	"net/http/httputil"
	"net/url"
	"os"
	"path/filepath"
	"reflect"
	"regexp"
	"strconv"
	"strings"
	"time"
	"unicode/utf8"

	"golang.org/x/oauth2"
)

var (
	jsonCheck = regexp.MustCompile(`(?i:(?:application|text)/(?:vnd\.[^;]+\+)?json)`)
	xmlCheck  = regexp.MustCompile(`(?i:(?:application|text)/xml)`)
)

// APIClient manages communication with the New Payment Gateway APIs API v2022-01-01
// In most cases there should be only one, shared, APIClient.
type APIClient struct {
	cfg    *Configuration
	common service // Reuse a single struct instead of allocating one for each service on the heap.

	// API Services

	OrdersApi *OrdersApiService

	PaymentLinksApi *PaymentLinksApiService

	PaymentsApi *PaymentsApiService

	RefundsApi *RefundsApiService

	SettlementsApi *SettlementsApiService

	TokenVaultApi *TokenVaultApiService

	OffersApiService *OffersApiService

	EligibilityAPIsApiService *EligibilityAPIsApiService
}

type service struct {
	client *APIClient
}

// NewAPIClient creates a new API client. Requires a userAgent string describing your application.
// optionally a custom http.Client to allow for advanced features such as caching.
func NewAPIClient(cfg *Configuration) *APIClient {
	if cfg.HTTPClient == nil {
		cfg.HTTPClient = http.DefaultClient
	}

	c := &APIClient{}
	c.cfg = cfg
	c.common.client = c

	// API Services
	c.OrdersApi = (*OrdersApiService)(&c.common)
	c.PaymentLinksApi = (*PaymentLinksApiService)(&c.common)
	c.PaymentsApi = (*PaymentsApiService)(&c.common)
	c.RefundsApi = (*RefundsApiService)(&c.common)
	c.SettlementsApi = (*SettlementsApiService)(&c.common)
	c.TokenVaultApi = (*TokenVaultApiService)(&c.common)
	c.OffersApiService = (*OffersApiService)(&c.common)
	c.EligibilityAPIsApiService = (*EligibilityAPIsApiService)(&c.common)

	return c
}

func atoi(in string) (int, error) {
	return strconv.Atoi(in)
}

// selectHeaderContentType select a content type from the available list.
func selectHeaderContentType(contentTypes []string) string {
	if len(contentTypes) == 0 {
		return ""
	}
	if contains(contentTypes, "application/json") {
		return "application/json"
	}
	return contentTypes[0] // use the first content type specified in 'consumes'
}

// selectHeaderAccept join all accept types and return
func selectHeaderAccept(accepts []string) string {
	if len(accepts) == 0 {
		return ""
	}

	if contains(accepts, "application/json") {
		return "application/json"
	}

	return strings.Join(accepts, ",")
}

// contains is a case insensitive match, finding needle in a haystack
func contains(haystack []string, needle string) bool {
	for _, a := range haystack {
		if strings.ToLower(a) == strings.ToLower(needle) {
			return true
		}
	}
	return false
}

// Verify optional parameters are of the correct type.
func typeCheckParameter(obj interface{}, expected string, name string) error {
	// Make sure there is an object.
	if obj == nil {
		return nil
	}

	// Check the type is as expected.
	if reflect.TypeOf(obj).String() != expected {
		return fmt.Errorf("Expected %s to be of type %s but received %s.", name, expected, reflect.TypeOf(obj).String())
	}
	return nil
}

// parameterToString convert interface{} parameters to string, using a delimiter if format is provided.
func parameterToString(obj interface{}, collectionFormat string) string {
	var delimiter string

	switch collectionFormat {
	case "pipes":
		delimiter = "|"
	case "ssv":
		delimiter = " "
	case "tsv":
		delimiter = "\t"
	case "csv":
		delimiter = ","
	}

	if reflect.TypeOf(obj).Kind() == reflect.Slice {
		return strings.Trim(strings.Replace(fmt.Sprint(obj), " ", delimiter, -1), "[]")
	} else if t, ok := obj.(time.Time); ok {
		return t.Format(time.RFC3339)
	}

	return fmt.Sprintf("%v", obj)
}

// helper for converting interface{} parameters to json strings
func parameterToJson(obj interface{}) (string, error) {
	jsonBuf, err := json.Marshal(obj)
	if err != nil {
		return "", err
	}
	return string(jsonBuf), err
}

// callAPI do the request.
func (c *APIClient) callAPI(request *http.Request) (*http.Response, error) {
	if c.cfg.Debug {
		dump, err := httputil.DumpRequestOut(request, true)
		if err != nil {
			return nil, err
		}
		log.Printf("\n%s\n", string(dump))
	}

	resp, err := c.cfg.HTTPClient.Do(request)
	if err != nil {
		return resp, err
	}

	if c.cfg.Debug {
		dump, err := httputil.DumpResponse(resp, true)
		if err != nil {
			return resp, err
		}
		log.Printf("\n%s\n", string(dump))
	}
	return resp, err
}

// Allow modification of underlying config for alternate implementations and testing
// Caution: modifying the configuration while live can cause data races and potentially unwanted behavior
func (c *APIClient) GetConfig() *Configuration {
	return c.cfg
}

type formFile struct {
		fileBytes []byte
		fileName string
		formFileName string
}

// prepareRequest build the request
func (c *APIClient) prepareRequest(
	ctx context.Context,
	path string, method string,
	postBody interface{},
	headerParams map[string]string,
	queryParams url.Values,
	formParams url.Values,
	formFiles []formFile) (localVarRequest *http.Request, err error) {

	var body *bytes.Buffer

	// Detect postBody type and post.
	if postBody != nil {
		contentType := headerParams["Content-Type"]
		if contentType == "" {
			contentType = detectContentType(postBody)
			headerParams["Content-Type"] = contentType
		}

		body, err = setBody(postBody, contentType)
		if err != nil {
			return nil, err
		}
	}

	// add form parameters and file if available.
	if strings.HasPrefix(headerParams["Content-Type"], "multipart/form-data") && len(formParams) > 0 || (len(formFiles) > 0) {
		if body != nil {
			return nil, errors.New("Cannot specify postBody and multipart form at the same time.")
		}
		body = &bytes.Buffer{}
		w := multipart.NewWriter(body)

		for k, v := range formParams {
			for _, iv := range v {
				if strings.HasPrefix(k, "@") { // file
					err = addFile(w, k[1:], iv)
					if err != nil {
						return nil, err
					}
				} else { // form value
					w.WriteField(k, iv)
				}
			}
		}
		for _, formFile := range formFiles {
			if len(formFile.fileBytes) > 0 && formFile.fileName != "" {
				w.Boundary()
				part, err := w.CreateFormFile(formFile.formFileName, filepath.Base(formFile.fileName))
				if err != nil {
						return nil, err
				}
				_, err = part.Write(formFile.fileBytes)
				if err != nil {
						return nil, err
				}
			}
		}

		// Set the Boundary in the Content-Type
		headerParams["Content-Type"] = w.FormDataContentType()

		// Set Content-Length
		headerParams["Content-Length"] = fmt.Sprintf("%d", body.Len())
		w.Close()
	}

	if strings.HasPrefix(headerParams["Content-Type"], "application/x-www-form-urlencoded") && len(formParams) > 0 {
		if body != nil {
			return nil, errors.New("Cannot specify postBody and x-www-form-urlencoded form at the same time.")
		}
		body = &bytes.Buffer{}
		body.WriteString(formParams.Encode())
		// Set Content-Length
		headerParams["Content-Length"] = fmt.Sprintf("%d", body.Len())
	}

	// Setup path and query parameters
	url, err := url.Parse(path)
	if err != nil {
		return nil, err
	}

	// Override request host, if applicable
	if c.cfg.Host != "" {
		url.Host = c.cfg.Host
	}

	// Override request scheme, if applicable
	if c.cfg.Scheme != "" {
		url.Scheme = c.cfg.Scheme
	}

	// Adding Query Param
	query := url.Query()
	for k, v := range queryParams {
		for _, iv := range v {
			query.Add(k, iv)
		}
	}

	// Encode the parameters.
	url.RawQuery = query.Encode()

	// Generate a new request
	if body != nil {
		localVarRequest, err = http.NewRequest(method, url.String(), body)
	} else {
		localVarRequest, err = http.NewRequest(method, url.String(), nil)
	}
	if err != nil {
		return nil, err
	}

	// add header parameters, if any
	if len(headerParams) > 0 {
		headers := http.Header{}
		for h, v := range headerParams {
			headers[h] = []string{v}
		}
		localVarRequest.Header = headers
	}

	// Add the user agent to the request.
	localVarRequest.Header.Add("User-Agent", c.cfg.UserAgent)

	if ctx != nil {
		// add context to the request
		localVarRequest = localVarRequest.WithContext(ctx)

		// Walk through any authentication.

		// OAuth2 authentication
		if tok, ok := ctx.Value(ContextOAuth2).(oauth2.TokenSource); ok {
			// We were able to grab an oauth2 token from the context
			var latestToken *oauth2.Token
			if latestToken, err = tok.Token(); err != nil {
				return nil, err
			}

			latestToken.SetAuthHeader(localVarRequest)
		}

		// Basic HTTP Authentication
		if auth, ok := ctx.Value(ContextBasicAuth).(BasicAuth); ok {
			localVarRequest.SetBasicAuth(auth.UserName, auth.Password)
		}

		// AccessToken Authentication
		if auth, ok := ctx.Value(ContextAccessToken).(string); ok {
			localVarRequest.Header.Add("Authorization", "Bearer "+auth)
		}

	}

	for header, value := range c.cfg.DefaultHeader {
		localVarRequest.Header.Add(header, value)
	}
	return localVarRequest, nil
}

func (c *APIClient) decode(v interface{}, b []byte, contentType string) (err error) {
	if len(b) == 0 {
		return nil
	}
	if s, ok := v.(*string); ok {
		*s = string(b)
		return nil
	}
	if f, ok := v.(**os.File); ok {
		*f, err = ioutil.TempFile("", "HttpClientFile")
		if err != nil {
			return
		}
		_, err = (*f).Write(b)
		if err != nil {
			return
		}
		_, err = (*f).Seek(0, io.SeekStart)
		return
	}
	if xmlCheck.MatchString(contentType) {
		if err = xml.Unmarshal(b, v); err != nil {
			return err
		}
		return nil
	}
	if jsonCheck.MatchString(contentType) {
		if actualObj, ok := v.(interface{ GetActualInstance() interface{} }); ok { // oneOf, anyOf schemas
			if unmarshalObj, ok := actualObj.(interface{ UnmarshalJSON([]byte) error }); ok { // make sure it has UnmarshalJSON defined
				if err = unmarshalObj.UnmarshalJSON(b); err != nil {
					return err
				}
			} else {
				return errors.New("Unknown type with GetActualInstance but no unmarshalObj.UnmarshalJSON defined")
			}
		} else if err = json.Unmarshal(b, v); err != nil { // simple model
			return err
		}
		return nil
	}
	return errors.New("undefined response type")
}

// Add a file to the multipart request
func addFile(w *multipart.Writer, fieldName, path string) error {
	file, err := os.Open(path)
	if err != nil {
		return err
	}
	defer file.Close()

	part, err := w.CreateFormFile(fieldName, filepath.Base(path))
	if err != nil {
		return err
	}
	_, err = io.Copy(part, file)

	return err
}

// Prevent trying to import "fmt"
func reportError(format string, a ...interface{}) error {
	return fmt.Errorf(format, a...)
}

// A wrapper for strict JSON decoding
func newStrictDecoder(data []byte) *json.Decoder {
	dec := json.NewDecoder(bytes.NewBuffer(data))
	dec.DisallowUnknownFields()
	return dec
}

// Set request body from an interface{}
func setBody(body interface{}, contentType string) (bodyBuf *bytes.Buffer, err error) {
	if bodyBuf == nil {
		bodyBuf = &bytes.Buffer{}
	}

	if reader, ok := body.(io.Reader); ok {
		_, err = bodyBuf.ReadFrom(reader)
	} else if fp, ok := body.(**os.File); ok {
		_, err = bodyBuf.ReadFrom(*fp)
	} else if b, ok := body.([]byte); ok {
		_, err = bodyBuf.Write(b)
	} else if s, ok := body.(string); ok {
		_, err = bodyBuf.WriteString(s)
	} else if s, ok := body.(*string); ok {
		_, err = bodyBuf.WriteString(*s)
	} else if jsonCheck.MatchString(contentType) {
		if a, ok := body.(*CFOrderPayRequest); ok {
			if a != nil {
				if a.PaymentMethod.CFAppPayment != nil {
					w := a.PaymentMethod.CFAppPayment
					flag := false
					if a.SaveInstrument != nil {
						flag = *a.SaveInstrument
					}
					wallet := map[string]interface{} {
						"order_token": a.OrderToken,
						"payment_method": map[string]interface{} {
							"app": map[string]interface{} {
								"channel": w.GetApp().Channel,
								"provider": w.GetApp().Provider,
								"phone": w.GetApp().Phone,
							},
						},
						"save_instrument": flag,
					}
					err = json.NewEncoder(bodyBuf).Encode(wallet)
				} else if a.PaymentMethod.CFEMIPayment != nil {
					c := a.PaymentMethod.CFEMIPayment
					flag := false
					if a.SaveInstrument != nil {
						flag = *a.SaveInstrument
					}
						card := map[string]interface{}{
							"order_token": a.OrderToken,
							"payment_method": map[string]interface{} {
								"card": map[string]interface{} {
									"channel": c.GetEmi().Channel,
									"card_number": c.GetEmi().CardNumber,
									"card_holder_name": c.GetEmi().CardHolderName,
									"card_expiry_mm": c.GetEmi().CardExpiryMm,
									"card_expiry_yy": c.GetEmi().CardExpiryYy,
									"card_cvv": c.GetEmi().CardCvv,
									"emi_tenure": c.GetEmi().EmiTenure,
									"card_bank_name": c.GetEmi().CardBankName,
								},
							},
							"save_instrument": flag,
						}
					err = json.NewEncoder(bodyBuf).Encode(card)
				} else if a.PaymentMethod.CFCardPayment != nil {
					c := a.PaymentMethod.CFCardPayment
					flag := false
					if a.SaveInstrument != nil {
						flag = *a.SaveInstrument
					}
					var card map[string]interface{}
						card = map[string]interface{}{
							"order_token": a.OrderToken,
							"payment_method": map[string]interface{} {
								"card": map[string]interface{} {
									"channel": c.GetCard().Channel,
									"card_number": c.GetCard().CardNumber,
									"card_holder_name": c.GetCard().CardHolderName,
									"card_expiry_mm": c.GetCard().CardExpiryMm,
									"card_expiry_yy": c.GetCard().CardExpiryYy,
									"card_cvv": c.GetCard().CardCvv,
									"instrument_id": c.GetCard().InstrumentId,
									"cryptogram": c.GetCard().Cryptogram,
									"token_requestor_id": c.GetCard().TokenRequestorId,
									"card_display": c.GetCard().CardDisplay,
									"card_alias": c.GetCard().CardAlias,
									"card_bank_name": c.GetCard().CardBankName,
									"emi_tenure": c.GetCard().EmiTenure,
								},
							},
							"save_instrument": flag,
						}
					err = json.NewEncoder(bodyBuf).Encode(card)
				} else if a.PaymentMethod.CFCardlessEMIPayment != nil {
					cl_emi := a.PaymentMethod.CFCardlessEMIPayment
					flag := false
					if a.SaveInstrument != nil {
						flag = *a.SaveInstrument
					}
					cardless_emi := map[string]interface{} {
						"order_token": a.OrderToken,
						"payment_method": map[string]interface{} {
							"cardless_emi": map[string]interface{} {
								"channel": cl_emi.GetCardlessEmi().Channel,
								"provider": cl_emi.GetCardlessEmi().Provider,
								"phone": cl_emi.GetCardlessEmi().Phone,
							},
						},
						"save_instrument": flag,
					}
					err = json.NewEncoder(bodyBuf).Encode(cardless_emi)
				} else if a.PaymentMethod.CFNetbankingPayment != nil {
					flag := false
					if a.SaveInstrument != nil {
						flag = *a.SaveInstrument
					}
					netbanking := map[string]interface{} {
						"order_token": a.OrderToken,
						"payment_method": map[string]interface{} {
							"netbanking": map[string]interface{} {
								"channel": a.PaymentMethod.CFNetbankingPayment.Netbanking.GetChannel(),
								"netbanking_bank_code": a.PaymentMethod.CFNetbankingPayment.Netbanking.GetNetbankingBankCode(),
							},
						},
						"save_instrument": flag,
					}
					err = json.NewEncoder(bodyBuf).Encode(netbanking)
				} else if a.PaymentMethod.CFPaylaterPayment != nil {
					p := a.PaymentMethod.CFPaylaterPayment
					flag := false
					if a.SaveInstrument != nil {
						flag = *a.SaveInstrument
					}
					paylater := map[string]interface{} {
						"order_token": a.OrderToken,
						"payment_method": map[string]interface{} {
							"paylater": map[string]interface{} {
								"channel": p.GetPaylater().Channel,
								"provider": p.GetPaylater().Provider,
								"phone": p.GetPaylater().Phone,
							},
						},
						"save_instrument": flag,
					}
					err = json.NewEncoder(bodyBuf).Encode(paylater)
				} else if a.PaymentMethod.CFUPIPayment != nil {
					flag := false
					if a.SaveInstrument != nil {
						flag = *a.SaveInstrument
					}
					auth := a.PaymentMethod.CFUPIPayment.Upi.Authorization
					var upi map[string]interface{}
					if auth.ApproveBy != nil && auth.StartTime != nil && auth.EndTime != nil && a.PaymentMethod.CFUPIPayment.Upi.AuthorizeOnly != nil {
						upi = map[string]interface{} {
							"order_token": a.OrderToken,
							"payment_method": map[string]interface{} {
								"upi": map[string]interface{}{
									"channel": a.PaymentMethod.CFUPIPayment.GetUpi().Channel,
									"upi_id": a.PaymentMethod.CFUPIPayment.GetUpi().UpiId,
									"authorize_only": a.PaymentMethod.CFUPIPayment.GetUpi().AuthorizeOnly,
									"authorization": map[string]interface{} {
										"approve_by": a.PaymentMethod.CFUPIPayment.GetUpi().Authorization.ApproveBy,
										"start_time": a.PaymentMethod.CFUPIPayment.GetUpi().Authorization.StartTime,
										"end_time": a.PaymentMethod.CFUPIPayment.GetUpi().Authorization.EndTime,
									},
								},
							},
							"save_instrument": flag,
						}
					} else {
						upi = map[string]interface{} {
							"order_token": a.OrderToken,
							"payment_method": map[string]interface{} {
								"upi": map[string]interface{}{
									"channel": a.PaymentMethod.CFUPIPayment.GetUpi().Channel,
									"upi_id": a.PaymentMethod.CFUPIPayment.GetUpi().UpiId,
								},
							},
							"save_instrument": flag,
						}
					}
					err = json.NewEncoder(bodyBuf).Encode(upi)
				}
			}
		} else if orderCreate, ok := body.(*CFOrderRequest); ok {
			createOrder := map[string]interface{} {
				"order_id": orderCreate.OrderId,
				"order_amount": orderCreate.OrderAmount,
				"order_currency": orderCreate.OrderCurrency,
				"customer_details": map[string]interface{} {
					"customer_name": orderCreate.CustomerDetails.CustomerName,
					"customer_id": orderCreate.CustomerDetails.CustomerId,
					"customer_email": orderCreate.CustomerDetails.CustomerEmail,
					"customer_phone": orderCreate.CustomerDetails.CustomerPhone,
					"customer_bank_account_number": orderCreate.CustomerDetails.CustomerBankAccountNumber,
					"customer_bank_ifsc": orderCreate.CustomerDetails.CustomerBankIfsc,
					"customer_bank_code": orderCreate.CustomerDetails.CustomerBankCode,
				},
				"order_expiry_time": orderCreate.OrderExpiryTime,
				"order_note": orderCreate.OrderNote,
				"order_tags": orderCreate.OrderTags,
				"order_splits": orderCreate.OrderSplits,
			}
			if orderCreate.OrderMeta != nil {
				createOrder["order_meta"] = map[string]interface{} {
					"notify_url": orderCreate.OrderMeta.NotifyUrl,
					"return_url": orderCreate.OrderMeta.ReturnUrl,
					"payment_methods": orderCreate.OrderMeta.PaymentMethods,
				}
			}
			err = json.NewEncoder(bodyBuf).Encode(createOrder)
		} else if offer, ok := body.(*CFCreateOfferBackendRequest); ok {
			createOffer := map[string]interface{} {
				"offer_meta": map[string]interface{} {
					"offer_title": offer.OfferMeta.OfferTitle,
					"offer_description": offer.OfferMeta.OfferDescription,
					"offer_code": offer.OfferMeta.OfferCode,
					"offer_start_time": offer.OfferMeta.OfferStartTime,
					"offer_end_time": offer.OfferMeta.OfferEndTime,
				},
				"offer_tnc": map[string]interface{} {
					"offer_tnc_type": offer.OfferTnc.OfferTncType,
        			"offer_tnc_value": offer.OfferTnc.OfferTncValue,
				},
				"offer_validations": map[string]interface{} {
					"min_amount": *offer.OfferValidations.MinAmount,
					"max_allowed": offer.OfferValidations.MaxAllowed,
				},
			}
			if offer.OfferDetails.DiscountDetails != nil && strings.Contains(offer.OfferDetails.OfferType, "DISCOUNT") {
				createOffer["offer_details"] = map[string]interface{}{
					"offer_type": offer.OfferDetails.OfferType,
					"discount_details": map[string]interface{}{
						"discount_type": offer.OfferDetails.DiscountDetails.DiscountType,
						"discount_value": offer.OfferDetails.DiscountDetails.DiscountValue,
						"max_discount_amount": offer.OfferDetails.DiscountDetails.MaxDiscountAmount,
					},
				}
			}
			if offer.OfferDetails.CashbackDetails != nil && strings.Contains(offer.OfferDetails.OfferType, "CASHBACK") {
				if o, ok := createOffer["offer_details"].(map[string]interface{}); ok {
					o["cashback_details"] = map[string]interface{}{
						"cashback_type": offer.OfferDetails.CashbackDetails.CashbackType,
						"cashback_value": offer.OfferDetails.CashbackDetails.CashbackValue,
						"max_cashback_amount": offer.OfferDetails.CashbackDetails.MaxCashbackAmount,
					}
					createOffer["offer_details"] = o
				} else {
					createOffer["offer_details"] = map[string]interface{} {
						"offer_type": offer.OfferDetails.OfferType,
						"cashback_details": map[string]interface{}{
							"cashback_type": offer.OfferDetails.CashbackDetails.CashbackType,
							"cashback_value": offer.OfferDetails.CashbackDetails.CashbackValue,
							"max_cashback_amount": offer.OfferDetails.CashbackDetails.MaxCashbackAmount,
						},
					}
				}
			}
			createOffer["offer_validations"].(map[string]interface{})["payment_method"] = map[string]interface{}{}
			if offer.OfferValidations.PaymentMethod.OfferAll != nil {
				all := map[string]interface{} {
					"all": offer.OfferValidations.PaymentMethod.OfferAll.All,
				}
				createOffer["offer_validations"].(map[string]interface{})["payment_method"] = all
			} else if offer.OfferValidations.PaymentMethod.OfferCard != nil {
				card := map[string]interface{} {
					"card": map[string]interface{} {
						"type": offer.OfferValidations.PaymentMethod.OfferCard.Card.Type,
						"bank_name": offer.OfferValidations.PaymentMethod.OfferCard.Card.BankName,
						"scheme_name": offer.OfferValidations.PaymentMethod.OfferCard.Card.SchemeName,
						"bins": offer.OfferValidations.PaymentMethod.OfferCard.Card.Bins,
					},
				}
				createOffer["offer_validations"].(map[string]interface{})["payment_method"] = card
			} else if offer.OfferValidations.PaymentMethod.OfferNB != nil {
				netbanking := map[string]interface{} {
					"netbanking": map[string]interface{} {
						"bank_name": offer.OfferValidations.PaymentMethod.OfferNB.Netbanking.BankName,
					},
				}
				createOffer["offer_validations"].(map[string]interface{})["payment_method"] = netbanking
			} else if offer.OfferValidations.PaymentMethod.OfferPaylater != nil {
				paylater := map[string]interface{} {
					"paylater": map[string]interface{} {
						"provider": offer.OfferValidations.PaymentMethod.OfferPaylater.Paylater.Provider,
					},
				}
				createOffer["offer_validations"].(map[string]interface{})["payment_method"] = paylater
			} else if offer.OfferValidations.PaymentMethod.OfferWallet != nil {
				app := map[string]interface{} {
					"app": map[string]interface{} {
						"provider": *offer.OfferValidations.PaymentMethod.OfferWallet.App.Provider,
					},
				}
				createOffer["offer_validations"].(map[string]interface{})["payment_method"] = app
			} else if offer.OfferValidations.PaymentMethod.OfferUPI != nil {
				upi := map[string]interface{} {
					"upi": offer.OfferValidations.PaymentMethod.OfferUPI.Upi,
				}
				createOffer["offer_validations"].(map[string]interface{})["payment_method"] = upi
			} else if offer.OfferValidations.PaymentMethod.OfferEMI != nil {
				emi := map[string]interface{} {
					"emi": map[string]interface{} {
						"issuer": offer.OfferValidations.PaymentMethod.OfferEMI.Emi.BankName,
						"type": offer.OfferValidations.PaymentMethod.OfferEMI.Emi.Type,
						"tenures": offer.OfferValidations.PaymentMethod.OfferEMI.Emi.Tenures,
					},
				}
				createOffer["offer_validations"].(map[string]interface{})["payment_method"] = emi
			}
			err = json.NewEncoder(bodyBuf).Encode(createOffer)
		} else {
			err = json.NewEncoder(bodyBuf).Encode(body)
		}
	} else if xmlCheck.MatchString(contentType) {
		err = xml.NewEncoder(bodyBuf).Encode(body)
	}

	if err != nil {
		return nil, err
	}

	if bodyBuf.Len() == 0 {
		err = fmt.Errorf("Invalid body type %s\n", contentType)
		return nil, err
	}
	return bodyBuf, nil
}

// detectContentType method is used to figure out `Request.Body` content type for request header
func detectContentType(body interface{}) string {
	contentType := "text/plain; charset=utf-8"
	kind := reflect.TypeOf(body).Kind()

	switch kind {
	case reflect.Struct, reflect.Map, reflect.Ptr:
		contentType = "application/json; charset=utf-8"
	case reflect.String:
		contentType = "text/plain; charset=utf-8"
	default:
		if b, ok := body.([]byte); ok {
			contentType = http.DetectContentType(b)
		} else if kind == reflect.Slice {
			contentType = "application/json; charset=utf-8"
		}
	}

	return contentType
}

// Ripped from https://github.com/gregjones/httpcache/blob/master/httpcache.go
type cacheControl map[string]string

func parseCacheControl(headers http.Header) cacheControl {
	cc := cacheControl{}
	ccHeader := headers.Get("Cache-Control")
	for _, part := range strings.Split(ccHeader, ",") {
		part = strings.Trim(part, " ")
		if part == "" {
			continue
		}
		if strings.ContainsRune(part, '=') {
			keyval := strings.Split(part, "=")
			cc[strings.Trim(keyval[0], " ")] = strings.Trim(keyval[1], ",")
		} else {
			cc[part] = ""
		}
	}
	return cc
}

// CacheExpires helper function to determine remaining time before repeating a request.
func CacheExpires(r *http.Response) time.Time {
	// Figure out when the cache expires.
	var expires time.Time
	now, err := time.Parse(time.RFC1123, r.Header.Get("date"))
	if err != nil {
		return time.Now()
	}
	respCacheControl := parseCacheControl(r.Header)

	if maxAge, ok := respCacheControl["max-age"]; ok {
		lifetime, err := time.ParseDuration(maxAge + "s")
		if err != nil {
			expires = now
		} else {
			expires = now.Add(lifetime)
		}
	} else {
		expiresHeader := r.Header.Get("Expires")
		if expiresHeader != "" {
			expires, err = time.Parse(time.RFC1123, expiresHeader)
			if err != nil {
				expires = now
			}
		}
	}
	return expires
}

func strlen(s string) int {
	return utf8.RuneCountInString(s)
}

// GenericOpenAPIError Provides access to the body, error and model on returned errors.
type GenericOpenAPIError struct {
	body  []byte
	error string
	model interface{}
}

// Error returns non-empty string if there was an error.
func (e GenericOpenAPIError) Error() string {
	return e.error
}

// Body returns the raw bytes of the response
func (e GenericOpenAPIError) Body() []byte {
	return e.body
}

// Model returns the unpacked model of the error
func (e GenericOpenAPIError) Model() interface{} {
	return e.model
}

func parameterAddToHeaderOrQuery(headerOrQueryParams interface{}, keyPrefix string, obj interface{}, collectionType string) {
	var v = reflect.ValueOf(obj)
	var value = ""
	if v == reflect.ValueOf(nil) {
		value = "null"
	} else {
		switch v.Kind() {
			case reflect.Invalid:
				value = "invalid"

			case reflect.Struct:
				if t,ok := obj.(MappedNullable); ok {
					dataMap,err := t.ToMap()
					if err != nil {
						return
					}
					parameterAddToHeaderOrQuery(headerOrQueryParams, keyPrefix, dataMap, collectionType)
					return
				}
				if t, ok := obj.(time.Time); ok {
					parameterAddToHeaderOrQuery(headerOrQueryParams, keyPrefix, t.Format(time.RFC3339), collectionType)
					return
				}
				value = v.Type().String() + " value"
			case reflect.Slice:
				var indValue = reflect.ValueOf(obj)
				if indValue == reflect.ValueOf(nil) {
					return
				}
				var lenIndValue = indValue.Len()
				for i:=0;i<lenIndValue;i++ {
					var arrayValue = indValue.Index(i)
					parameterAddToHeaderOrQuery(headerOrQueryParams, keyPrefix, arrayValue.Interface(), collectionType)
				}
				return

			case reflect.Map:
				var indValue = reflect.ValueOf(obj)
				if indValue == reflect.ValueOf(nil) {
					return
				}
				iter := indValue.MapRange()
				for iter.Next() {
					k,v := iter.Key(), iter.Value()
					parameterAddToHeaderOrQuery(headerOrQueryParams, fmt.Sprintf("%s[%s]", keyPrefix, k.String()), v.Interface(), collectionType)
				}
				return

			case reflect.Interface:
				fallthrough
			case reflect.Ptr:
				parameterAddToHeaderOrQuery(headerOrQueryParams, keyPrefix, v.Elem().Interface(), collectionType)
				return

			case reflect.Int, reflect.Int8, reflect.Int16,
				reflect.Int32, reflect.Int64:
				value = strconv.FormatInt(v.Int(), 10)
			case reflect.Uint, reflect.Uint8, reflect.Uint16,
				reflect.Uint32, reflect.Uint64, reflect.Uintptr:
				value = strconv.FormatUint(v.Uint(), 10)
			case reflect.Float32, reflect.Float64:
				value = strconv.FormatFloat(v.Float(), 'g', -1, 32)
			case reflect.Bool:
				value = strconv.FormatBool(v.Bool())
			case reflect.String:
				value = v.String()
			default:
				value = v.Type().String() + " value"
		}
	}

	switch valuesMap := headerOrQueryParams.(type) {
		case url.Values:
			if collectionType == "csv" && valuesMap.Get(keyPrefix) != "" {
				valuesMap.Set(keyPrefix, valuesMap.Get(keyPrefix) + "," + value)
			} else {
				valuesMap.Add(keyPrefix, value)
			}
			break
		case map[string]string:
			valuesMap[keyPrefix] = value
			break
	}
}

func parameterValueToString( obj interface{}, key string ) string {
	if reflect.TypeOf(obj).Kind() != reflect.Ptr {
		return fmt.Sprintf("%v", obj)
	}
	var param,ok = obj.(MappedNullable)
	if !ok {
		return ""
	}
	dataMap,err := param.ToMap()
	if err != nil {
		return ""
	}
	return fmt.Sprintf("%v", dataMap[key])
}