/*
New Payment Gateway APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2022-01-01
Contact: nextgenapi@cashfree.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cashfree_pg_sdk_go

import (
	"encoding/json"
)

// CFLinkNotifyEntity struct for CFLinkNotifyEntity
type CFLinkNotifyEntity struct {
	// If \"true\", Cashfree will send sms on customer_phone
	SendSms *bool `json:"send_sms,omitempty"`
	// If \"true\", Cashfree will send email on customer_email
	SendEmail *bool `json:"send_email,omitempty"`
}

// NewCFLinkNotifyEntity instantiates a new CFLinkNotifyEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCFLinkNotifyEntity() *CFLinkNotifyEntity {
	this := CFLinkNotifyEntity{}
	return &this
}

// NewCFLinkNotifyEntityWithDefaults instantiates a new CFLinkNotifyEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCFLinkNotifyEntityWithDefaults() *CFLinkNotifyEntity {
	this := CFLinkNotifyEntity{}
	return &this
}

// GetSendSms returns the SendSms field value if set, zero value otherwise.
func (o *CFLinkNotifyEntity) GetSendSms() bool {
	if o == nil || o.SendSms == nil {
		var ret bool
		return ret
	}
	return *o.SendSms
}

// GetSendSmsOk returns a tuple with the SendSms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CFLinkNotifyEntity) GetSendSmsOk() (*bool, bool) {
	if o == nil || o.SendSms == nil {
		return nil, false
	}
	return o.SendSms, true
}

// HasSendSms returns a boolean if a field has been set.
func (o *CFLinkNotifyEntity) HasSendSms() bool {
	if o != nil && o.SendSms != nil {
		return true
	}

	return false
}

// SetSendSms gets a reference to the given bool and assigns it to the SendSms field.
func (o *CFLinkNotifyEntity) SetSendSms(v bool) {
	o.SendSms = &v
}

// GetSendEmail returns the SendEmail field value if set, zero value otherwise.
func (o *CFLinkNotifyEntity) GetSendEmail() bool {
	if o == nil || o.SendEmail == nil {
		var ret bool
		return ret
	}
	return *o.SendEmail
}

// GetSendEmailOk returns a tuple with the SendEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CFLinkNotifyEntity) GetSendEmailOk() (*bool, bool) {
	if o == nil || o.SendEmail == nil {
		return nil, false
	}
	return o.SendEmail, true
}

// HasSendEmail returns a boolean if a field has been set.
func (o *CFLinkNotifyEntity) HasSendEmail() bool {
	if o != nil && o.SendEmail != nil {
		return true
	}

	return false
}

// SetSendEmail gets a reference to the given bool and assigns it to the SendEmail field.
func (o *CFLinkNotifyEntity) SetSendEmail(v bool) {
	o.SendEmail = &v
}

func (o CFLinkNotifyEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SendSms != nil {
		toSerialize["send_sms"] = o.SendSms
	}
	if o.SendEmail != nil {
		toSerialize["send_email"] = o.SendEmail
	}
	return json.Marshal(toSerialize)
}

type NullableCFLinkNotifyEntity struct {
	value *CFLinkNotifyEntity
	isSet bool
}

func (v NullableCFLinkNotifyEntity) Get() *CFLinkNotifyEntity {
	return v.value
}

func (v *NullableCFLinkNotifyEntity) Set(val *CFLinkNotifyEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableCFLinkNotifyEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableCFLinkNotifyEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCFLinkNotifyEntity(val *CFLinkNotifyEntity) *NullableCFLinkNotifyEntity {
	return &NullableCFLinkNotifyEntity{value: val, isSet: true}
}

func (v NullableCFLinkNotifyEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCFLinkNotifyEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


